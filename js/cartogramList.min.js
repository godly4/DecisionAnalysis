CartogramOperAnasisly = function (e) {
    var c = Backbone.Router.extend({
        initialize: function () {
            this.getDataModel = new b();
            this.operConllection = new f();
            this.operView = new a({model: this.operConllection});
            this.listenTo(this.operView, "updateResize", this.updateResize);
            this.listenTo(this.operView, "hideTimeSlider", this.hideTimeSlider);
            this.init()
        }, init: function () {
            this.getDataModel.UpdateData(this.getDataModel, e);
            this.operConllection.add(this.getDataModel)
        }, hideTimeSlider: function (g) {
            addCartogramOper.cartogramListItemDel()
        }, updateResize: function (g) {
            analysisOper.resize()
        }
    });
    var b = Backbone.Model.extend({
        UpdateData: function (g, h) {
            var i = null;
            g.attributes = h
        }
    });
    var f = Backbone.Collection.extend({
        sortDataLayers: function (h) {
            for (var i = [], g = 0; g < h.length; g++) {
                i.push(this.get(h[g]))
            }
            this.reset(i, {silent: !0})
        }
    });
    var a = Backbone.View.extend({
        el: "#cartogramListConDiv",
        cartogramListItemTemplate: _.template($("#cartogramListItemTemplate").html()),
        initialize: function () {
            this.listenTo(this.model, "add", this.addRender)
        },
        remove: function (g) {
            var h = $(g.currentTarget).attr("id");
            $("#cartogramListConDiv").find("div#cartogram-" + g.cid).remove();
            this.trigger("hideTimeSlider", g);
            this.model.remove(g)
        },
        addRender: function (g) {
            $(this.el).removeClass("hide");
            this.trigger("updateResize", g);
            $("#cartogramListConDiv").prepend(this.cartogramListItemTemplate({carData: g}));
            cartogramConfigView = new d({el: "#cartogram-" + g.cid + ".cartogramListItemDiv", model: g});
            this.listenTo(cartogramConfigView, "modelRemove", this.remove);
            cartogramConfigView.init()
        }
    });
    var d = Backbone.View.extend({
        events: {
            "click .cartogram-btn-title-edit": "titleEditHandler",
            "keypress .cartogram-title-editor": "titleEditorPressHandler",
            "click .cartogram-btn-toggle-up": "toggleUp",
            "click .cartogram-title-wrapper": "toggleUp",
            "click .cartogram-btn-remove": "remove",
        }, init: function () {
            this.dataHanlder()
        }, toggleUp: function (g) {
            $(this.el).hasClass("open") ? $(this.el).removeClass("open") : $(this.el).addClass("open"), g && g.stopImmediatePropagation()
        }, remove: function () {
            this.trigger("modelRemove", this.model)
        }, titleEditHandler: function (j) {
            var m = $(j.currentTarget);
            if (m.hasClass("active")) {
                var h = this.$(".cartogram-title-editor").val().trim();
                this.$(".cartogram-title-wrapper span").text(h);
                this.model.set({itemName: h});
                this.$(".cartogram-title-wrapper").removeClass("editing"), m.removeClass("active")
            } else {
                m.addClass("active");
                var h = this.$(".cartogram-title-wrapper");
                if (h.hasClass("editing")) {
                    return
                }
                h.addClass("editing"), this.$(".cartogram-title-wrapper .cartogram-title-editor").focus()
            }
            j.stopImmediatePropagation(), j.preventDefault();
            var k = this.$(".cartogram-title-editor"), g = k.val().trim().length;
            this.$(".cartogram-title-editor").selectRange(g, g)
        }, titleEditorPressHandler: function (g) {
            13 == g.keyCode && this.titleChangeHandler(g)
        }, titleChangeHandler: function (h) {
            var k = $(h.currentTarget), g = k.val().trim();
            if (this.stringIsBlank(g)) {
                var j = this.$(".cartogram-title-wrapper span").text();
                k.val(j)
            } else {
                this.$(".cartogram-title-wrapper span").text(g), this.model.set({itemName: g})
            }
            this.$(".cartogram-title-wrapper").removeClass("editing");
            $(".cartogram-btn-title-edit").removeClass("active")
        }, stringIsBlank: function (g) {
            return null == g || void 0 == g || "" == g.trim()
        }, dataHanlder: function () {
            var g = this.model.get("config"), h = this.model.get("data");
            if (g.cartogram == "pie") {
                this.pieDataHanlder()
            } else {
                if (g.cartogram == "bar") {
                    this.barDataHanlder()
                } else {
                    if (g.cartogram == "doubleY") {
                        this.doubleYHanlder()
                    }
                }
            }
        }, pieDataHanlder: function () {
            var g = this.model.get("config"), h = this.model.get("data");
            var i = {yIn: "", series: [], xAxisArr: []};
            $.each(h, function (k, l) {
                var j = [];
                j.push(l.title);
                $.each(l.indexdata, function (o, n) {
                    if (g.yearl[0].code == n.indexdata) {
                        var m = n.data[g.indexl[0].code];
                        j.push(Number(m));
                        i.series.push(j)
                    }
                })
            });
            i.yIn = g.indexl[0].name + "(" + g.yearl[0].name + "å¹´ " + ")";
            this.pieRender(i)
        }, barDataHanlder: function () {
            var h = this.model.get("config"), j = this.model.get("data");
            var k = {title: "", series: [], xAxisArr: [], yAxisTitle: ""};
            if (h.axis == "area") {
                if (h.dataTypel == "singleIndex") {
                    var i = h.yearl;
                    var g = this.singleIndexHanlder(i, h.indexl[0].code);
                    k.series = g.series;
                    k.xAxisArr = g.xAxisArr;
                    k.yAxisTitle = h.indexl[0].name
                } else {
                    if (h.dataTypel == "singleYear") {
                        var l = h.indexl;
                        var g = this.singleYearDataHanlder(l, h.yearl[0].code);
                        k.series = g.series;
                        k.xAxisArr = g.xAxisArr;
                        k.yAxisTitle = h.yearl[0].name
                    }
                }
            } else {
                var i = h.yearl;
                var g = this.axissingleYearDataHanlders(i, h.indexl[0].code);
                k.series = g.series;
                k.xAxisArr = g.xAxisArr;
                k.yAxisTitle = h.indexl[0].name
            }
            this.barRender(k)
        }, doubleYHanlder: function () {
            var h = this.model.get("config"), j = this.model.get("data");
            var i = {
                title: "",
                seriesl: [],
                xAxisArrl: [],
                yAxisTitlel: "",
                seriesr: [],
                xAxisArrr: [],
                yAxisTitler: ""
            };
            if (h.axis == "area") {
                if (h.dataTypel == "singleIndex") {
                    var k = [].concat(h.yearl);
                    var n = this.singleIndexHanlder(k, h.indexl[0].code);
                    i.seriesl = n.series;
                    i.xAxisArrl = n.xAxisArr;
                    i.yAxisTitlel = h.indexl[0].name;
                    i.seriesl = this.typeConfigHanlder(i.seriesl, "column", i.yAxisTitlel)
                } else {
                    if (h.dataTypel == "singleYear") {
                        var o = [].concat(h.indexl);
                        var n = this.singleYearDataHanlder(o, h.yearl[0].code);
                        i.seriesl = n.series;
                        i.xAxisArrl = n.xAxisArr;
                        i.yAxisTitlel = h.yearl[0].name;
                        i.seriesl = this.typeConfigHanlder(i.seriesl, "column", i.yAxisTitlel)
                    }
                }
                if (h.dataTyper == "singleIndex") {
                    var g = [].concat(h.yearr);
                    var l = this.singleIndexHanlder(g, h.indexr[0].code);
                    i.seriesr = l.series;
                    i.xAxisArrr = l.xAxisArr;
                    i.yAxisTitler = h.indexr[0].name;
                    i.seriesr = this.typeConfigHanlder(i.seriesr, "spline", i.yAxisTitler, true)
                } else {
                    if (h.dataTyper == "singleYear") {
                        var m = [].concat(h.indexr);
                        var l = this.singleYearDataHanlder(m, h.yearr[0].code);
                        i.seriesr = l.series;
                        i.xAxisArrr = l.xAxisArr;
                        i.yAxisTitler = h.yearr[0].name;
                        i.seriesr = this.typeConfigHanlder(i.seriesr, "spline", i.yAxisTitler, true)
                    }
                }
            } else {
                var k = [].concat(h.yearr);
                var n = this.axissingleYearDataHanlders(k, h.indexl[0].code);
                i.seriesl = n.series;
                i.xAxisArrl = n.xAxisArr;
                i.yAxisTitlel = h.indexl[0].name;
                i.seriesl = this.typeConfigHanlder(i.seriesl, "column", i.yAxisTitlel);
                var l = this.axissingleYearDataHanlders(k, h.indexr[0].code);
                i.seriesr = l.series;
                i.xAxisArrr = l.xAxisArr;
                i.yAxisTitler = h.indexr[0].name;
                i.seriesr = this.typeConfigHanlder(i.seriesr, "spline", i.yAxisTitler, true)
            }
            console.log(i);
            this.doubleYRender(i)
        }, singleIndexHanlder: function (h, g) {
            var i = this.model.get("data");
            var j = {xAxisArr: [], series: []};
            $.each(h, function (m, l) {
                var k = jQuery.extend(true, {}, l);
                k["data"] = [];
                $.each(i, function (n, o) {
                    $.each(o.indexdata, function (q, p) {
                        if (p.indexdata == l.code) {
                            var r = p.data[g] ? Number(p.data[g]) : 0;
                            k.data.push(r)
                        }
                    });
                    $.inArray(o.title, j.xAxisArr) != -1 ? "" : j.xAxisArr.push(o.title)
                });
                j.series.push(k)
            });
            return j
        }, singleYearDataHanlder: function (j, g) {
            var h = this.model.get("data");
            var i = {xAxisArr: [], series: []};
            $.each(j, function (m, l) {
                var k = jQuery.extend(true, {}, l);
                k["data"] = [];
                $.each(h, function (n, o) {
                    $.each(o.indexdata, function (q, p) {
                        if (p.indexdata == g) {
                            var r = p.data[l.code] ? Number(p.data[l.code]) : 0;
                            k.data.push(r)
                        }
                    });
                    $.inArray(o.title, i.xAxisArr) != -1 ? "" : i.xAxisArr.push(o.title)
                });
                i.series.push(k)
            });
            return i
        }, axissingleYearDataHanlders: function (h, g) {
            var i = this.model.get("data");
            var j = {xAxisArr: [], series: []};
            $.each(i, function (l, m) {
                var k = jQuery.extend(true, {}, {code: m.elementid, name: m.title});
                k["data"] = [];
                $.each(h, function (o, n) {
                    $.each(m.indexdata, function (q, p) {
                        if (p.indexdata == n.code) {
                            var r = p.data[g] ? Number(p.data[g]) : 0;
                            k.data.push(r)
                        }
                    });
                    $.inArray(n.name, j.xAxisArr) != -1 ? "" : j.xAxisArr.push(n.name)
                });
                j.series.push(k)
            });
            return j
        }, typeConfigHanlder: function (h, j, g, i) {
            $.each(h, function (k, l) {
                l.name = l.name + "(" + g + ")";
                l["type"] = j;
                i && (l["yAxis"] = 1)
            });
            return h
        }, pieRender: function (h) {
            var g = $("#container-" + this.model.cid);
            g.highcharts({
                chart: {
                    plotBackgroundColor: null,
                    plotBorderWidth: null,
                    plotShadow: false,
                    width: ($("#cartogramListConDiv").width() - 25)
                },
                title: {text: null},
                tooltip: {
                    headerFormat: "{series.name}<br>",
                    pointFormat: "{point.name}:{point.y}({point.percentage:.1f}%)"
                },
                plotOptions: {
                    pie: {
                        allowPointSelect: false,
                        cursor: "default",
                        dataLabels: {enabled: true, format: "<b>{point.name}</b>"}
                    }
                },
                series: [{type: "pie", name: h.yIn, data: h.series}]
            })
        }, barRender: function (h) {
            var g = $("#container-" + this.model.cid);
            g.highcharts({
                chart: {type: "column", width: ($("#cartogramListConDiv").width() - 25)},
                title: {text: null},
                xAxis: {categories: h.xAxisArr, crosshair: true},
                yAxis: {min: 0, title: {text: h.yAxisTitle}},
                tooltip: {
                    headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                    pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' + '<td style="padding:0"><b>{point.y}</b></td></tr>',
                    footerFormat: "</table>",
                    shared: true,
                    useHTML: true
                },
                plotOptions: {column: {pointPadding: 0.2, borderWidth: 0}},
                series: h.series
            })
        }, doubleYRender: function (i) {
            var g = i.seriesl.concat(i.seriesr);
            var h = $("#container-" + this.model.cid);
            h.highcharts({
                chart: {zoomType: "xy", width: ($("#cartogramListConDiv").width() - 25)},
                title: {text: null},
                xAxis: [{categories: i.xAxisArrl, crosshair: true}],
                yAxis: [{title: {text: i.yAxisTitlel}, labels: {format: "{value}"}}, {
                    title: {text: i.yAxisTitler,},
                    labels: {format: "{value}"},
                    opposite: true
                }],
                tooltip: {shared: true},
                series: g
            })
        }
    });
    new c()
};

function AddCartogramOper() {
    this.WinID = "#addCartogramListWin";
    this.addInputBtn = ".addCartogramInput";
    this.addCartogramTemplate = "#addCartogramTemplate";
    this.addCartogramSelectTemplate = "#addCartogramSelectTemplate";
    this.addCartogramCheckedTemplate = "#addCartogramCheckedTemplate";
    this.data = [];
    this.dataType = [{code: "singleYear", name: "åå¹´ä»½å¤ææ "}, {code: "singleIndex", name: "åææ å¤å¹´ä»½"}];
    this.xAxisData = [{code: "area", name: "å°åº"}, {code: "year", name: "å¹´ä»½"}];
    this.cartogramType = [{code: "pie", name: "é¥¼å¾"}, {code: "bar", name: "æ±ç¶å¾"}, {code: "doubleY", name: "åYè½´"}];
    this.init()
}

AddCartogramOper.prototype = {
    init: function () {
        this.winRender();
        this.resize();
        this.windowResize();
        this.bindEvent()
    }, winRender: function () {
        var a = this;
        $(a.addCartogramTemplate).tmpl().appendTo("body");
        $(a.addCartogramSelectTemplate).tmpl(a.cartogramType).appendTo("#addCartogramType");
        $(a.addCartogramSelectTemplate).tmpl(a.dataType).appendTo(".addCartogramDataType");
        $(a.addCartogramSelectTemplate).tmpl(a.xAxisData).appendTo(".addCartogramXAxisSelect")
    }, resize: function () {
        var c = this;
        var d = $(c.WinID).height();
        var b = ($(document).height() - d) / 2;
        var a = ($(document).width() - 260) / 2;
        $(c.WinID).css("top", b).css("left", a)
    }, windowResize: function () {
        this.resize()
    }, bindEvent: function () {
        var a = this;
        $(a.addInputBtn).on("click", function () {
            a.pdWinOpen()
        });
        $(a.WinID + " .addDataCloseBtn").on("click", function () {
            a.closeWin()
        });
        $(a.WinID + " .addDataCanelInput").on("click", function () {
            a.closeWin()
        });
        $(a.WinID + " .addDataOkInput").on("click", function () {
            a.addCartogramList()
        });
        $(a.WinID + " .addCartogramDataType").on("change", function () {
            a.dataTypeHanlder(this)
        });
        $(a.WinID + " .addCartogramXAxisSelect").on("change", function () {
            a.xAxisHanlder(this)
        });
        $(a.WinID + " #addCartogramType").on("change", function () {
            a.cartogramHanlder(this)
        });
        $(a.WinID + " #addCartogramDataSource").on("change", function () {
            a.dataYearIndexHanlder(this)
        })
    }, dataHandler: function () {
        var b = this;
        var c = [], a = [], d = [];
        $.each(b.data, function (e, f) {
            c.push({name: f.itemName, code: f.itemId});
            e == 0 && (a = f.years, d = f.fields)
        });
        if (a.length == 0) {
            a.push({name: "æ ", code: ""})
        }
        $("#addCartogramDataSource").empty(), $(b.addCartogramSelectTemplate).tmpl(c).appendTo("#addCartogramDataSource");
        $(".yearSelect-picker").empty(), $(b.addCartogramSelectTemplate).tmpl(a).appendTo(".yearSelect-picker");
        $(".yearInput-picker").empty(), $(b.addCartogramCheckedTemplate).tmpl(a).appendTo(".yearInput-picker");
        $(".indexSelect-picker").empty(), $(b.addCartogramSelectTemplate).tmpl(d).appendTo(".indexSelect-picker");
        $(".indexInput-picker").empty(), $(b.addCartogramCheckedTemplate).tmpl(d).appendTo(".indexInput-picker")
    }, cartogramHanlder: function (a) {
        var b = this, c = $(a).val();
        if (c == "pie") {
            $(".addPieDivClass").removeClass("hide");
            $(".addBarDivClass").addClass("hide");
            $(".addDoubleYDivClass").addClass("hide")
        } else {
            if (c == "bar") {
                $(".addPieDivClass").addClass("hide");
                $(".addBarDivClass").removeClass("hide");
                $(".addDoubleYDivClass").addClass("hide")
            } else {
                if (c == "doubleY") {
                    $(".addPieDivClass").addClass("hide");
                    $(".addBarDivClass").addClass("hide");
                    $(".addDoubleYDivClass").removeClass("hide")
                }
            }
        }
        b.resize()
    }, dataYearIndexHanlder: function (a) {
        var c = this, f = $(a).val();
        var d = [], b = [], e = [];
        $.each(c.data, function (g, h) {
            if (f == h.itemId) {
                b = h.years, e = h.fields;
                return true
            }
        });
        if (b.length == 0) {
            b.push({name: "æ ", code: ""})
        }
        $(".yearSelect-picker").empty(), $(c.addCartogramSelectTemplate).tmpl(b).appendTo(".yearSelect-picker");
        $(".yearInput-picker").empty(), $(c.addCartogramCheckedTemplate).tmpl(b).appendTo(".yearInput-picker");
        $(".indexSelect-picker").empty(), $(c.addCartogramSelectTemplate).tmpl(e).appendTo(".indexSelect-picker");
        $(".indexInput-picker").empty(), $(c.addCartogramCheckedTemplate).tmpl(e).appendTo(".indexInput-picker")
    }, dataTypeHanlder: function (a) {
        var c = this;
        var b = $(a).val();
        var d = $(a).parent().parent();
        $(d).children(".singleItem").addClass("hide"), $(d).children("." + b).removeClass("hide")
    }, xAxisHanlder: function (a) {
        var d = this;
        var f = $(a).val();
        var b = $("#addCartogramType").val();
        var e = $(a).parent().parent();
        var c = b == "bar" ? (".addBarDivClass") : (b == "doubleY" ? ".addDoubleYDivClass" : "");
        f == "area" ? ($(e).find(".axisClass").removeClass("hide"), $("#addCartogramDoubleYYearDiv").parent().removeClass("hide")) : ($(e).find(".axisClass").addClass("hide"), $("#addCartogramDoubleYYearDiv").parent().addClass("hide"));
        $(e).find(".singleItem").addClass("hide");
        $(e).find(".singleIndex").removeClass("hide")
    }, pdWinOpen: function () {
        var a = this;
        if (a.data.length == 0) {
            return layer.alert("æ²¡æå¯ä»¥æ·»å ç»è®¡å¾çæ°æ®ï¼")
        }
        a.openWin()
    }, openWin: function () {
        var a = this;
        a.dataHandler();
        a.resize();
        $(a.WinID).show()
    }, closeWin: function () {
        var a = this;
        $(a.WinID).hide();
        a.resetWin()
    }, addCartogramList: function () {
        var j = this;
        var c = {};
        var e = $("#addCartogramDataSource").val();
        var i = $("#addCartogramType").val();
        var n = [], h = [], b = [], l = [], a, k, d;
        if (i == "pie" && $("#addCartogramYearSelect").val() != "") {
            n.push({
                code: $("#addCartogramPieYearSelect").val(),
                name: $("#addCartogramPieYearSelect option:selected").text()
            });
            b.push({
                code: $("#addCartogramPieIndexSelect").val(),
                name: $("#addCartogramPieIndexSelect option:selected").text()
            })
        } else {
            if (i == "bar" && $("#addCartogramYearSelect").val() != "") {
                d = $(".addBarDivClass .addCartogramXAxisSelect").val();
                a = $(".addBarDivClass .addCartogramDataType").val();
                d == "year" && (a = "singleIndex");
                if (a == "singleYear") {
                    n.push({
                        code: $("#addCartogramYearSelect").val(),
                        name: $("#addCartogramYearSelect option:selected").text()
                    });
                    var m = $("#addCartogramIndexDiv").find(".addCartogramItemCheckedDiv");
                    $.each(m, function (p, q) {
                        var o = $(q).find("input");
                        o.prop("checked") && b.push({code: o.val(), name: o.attr("name")})
                    })
                } else {
                    b.push({
                        code: $("#addCartogramIndexSelect").val(),
                        name: $("#addCartogramIndexSelect option:selected").text()
                    });
                    var m = $("#addCartogramYearDiv").find(".addCartogramItemCheckedDiv");
                    $.each(m, function (p, q) {
                        var o = $(q).find("input");
                        o.prop("checked") && n.push({code: o.val(), name: o.attr("name")})
                    });
                    n.reverse()
                }
            } else {
                if (i == "doubleY" && $("#addCartogramYearSelect").val() != "") {
                    d = $(".addDoubleYDivClass .addCartogramXAxisSelect").val();
                    a = $(".addDoubleYDivClass .leftConfigClass .addCartogramDataType").val();
                    k = $(".addDoubleYDivClass .rightConfigClass .addCartogramDataType").val();
                    d == "year" && (a = "singleIndex", k = "singleIndex");
                    if (a == "singleYear") {
                        n.push({
                            code: $(".leftConfigClass #addCartogramDoubleLeftYearSelect").val(),
                            name: $(".leftConfigClass #addCartogramDoubleLeftYearSelect option:selected").text()
                        });
                        var m = $(".leftConfigClass #addCartogramDoubleYIndexDiv").find(".addCartogramItemCheckedDiv");
                        $.each(m, function (p, q) {
                            var o = $(q).find("input");
                            o.prop("checked") && b.push({code: o.val(), name: o.attr("name")})
                        })
                    } else {
                        b.push({
                            code: $(".leftConfigClass #addCartogramDoubleLeftIndexSelect").val(),
                            name: $(".leftConfigClass #addCartogramDoubleLeftIndexSelect option:selected").text()
                        });
                        var m = $(".leftConfigClass #addCartogramDoubleYYearDiv").find(".addCartogramItemCheckedDiv");
                        $.each(m, function (p, q) {
                            var o = $(q).find("input");
                            o.prop("checked") && n.push({code: o.val(), name: o.attr("name")})
                        });
                        n.reverse()
                    }
                    if (k == "singleYear") {
                        h.push({
                            code: $(".rightConfigClass #addCartogramDoubleRightYearSelect").val(),
                            name: $(".rightConfigClass #addCartogramDoubleRightYearSelect option:selected").text()
                        });
                        var m = $(".rightConfigClass #addCartogramDoubleYIndexDiv").find(".addCartogramItemCheckedDiv");
                        $.each(m, function (p, q) {
                            var o = $(q).find("input");
                            o.prop("checked") && l.push({code: o.val(), name: o.attr("name")})
                        })
                    } else {
                        l.push({
                            code: $(".rightConfigClass #addCartogramDoubleRightIndexSelect").val(),
                            name: $(".rightConfigClass #addCartogramDoubleRightIndexSelect option:selected").text()
                        });
                        var m = $(".rightConfigClass #addCartogramDoubleYYearDiv").find(".addCartogramItemCheckedDiv");
                        $.each(m, function (p, q) {
                            var o = $(q).find("input");
                            o.prop("checked") && h.push({code: o.val(), name: o.attr("name")})
                        });
                        h.reverse()
                    }
                }
            }
        }
        c["cartogram"] = i, c["dataTypel"] = a, c["yearl"] = n, c["indexl"] = b, c["yearr"] = h, c["indexr"] = l;
        c["axis"] = d, c["dataTyper"] = k;
        var g;
        $.each(j.data, function (o, p) {
            if (p.itemId == e) {
                g = p;
                return true
            }
        });
        console.log(c);
        if ((c.cartogram != "doubleY" && c.yearl.length == 0) || (c.cartogram == "doubleY" && c.yearr.length == 0 && c.yearl.length == 0)) {
            return layer.alert("æ°æ®ä¸å®æ´ï¼æ æ³è¿è¡ç»è®¡å¾çæ¸²æåå±ç¤ºï¼")
        }
        var f = $.extend({config: c}, g);
        $("#folderCartogramBtn").show();
        $("#folderCartogramBtn").removeClass("unfolder").css("right", $("#cartogramListConDiv").width());
        analysisOper.resize();
        $("#cartogramListConDiv").show();
        new CartogramOperAnasisly(f);
        j.closeWin()
    }, listItemRemove: function (b) {
        var d = this;
        if (b) {
            for (var a = d.data.length - 1; a >= 0; a--) {
                var c = d.data[a];
                if (c.itemId == b) {
                    d.data.splice(a, 1)
                }
            }
            $.each($("#cartogramListConDiv .cartogramListItemDiv"), function (e, f) {
                $(f).attr("ac") == b && $(f).remove()
            })
        } else {
            d.data = [], $(d.addInputBtn).addClass("disabled"), d.cartogramListEmptyResize()
        }
        d.btnShowHide()
    }, btnShowHide: function () {
        var a = this;
        a.data.length == 0 && ($(a.addInputBtn).addClass("disabled"), a.cartogramListEmptyResize());
        a.data.length > 0 && $(a.addInputBtn).removeClass("disabled")
    }, cartogramListEmptyResize: function () {
        $("#cartogramListConDiv").addClass("hide");
        $("#cartogramListConDiv").empty();
        $("#folderCartogramBtn").hide();
        analysisOper.resize()
    }, cartogramListItemDel: function () {
        var a = this;
        var b = $("#cartogramListConDiv .cartogramListItemDiv");
        b.length == 0 && a.cartogramListEmptyResize()
    }, resetWin: function () {
        var a = this;
        $(a.WinID + " .addCartogramDataType").val("singleYear");
        $(a.WinID + " #addCartogramType").val("pie");
        $(a.WinID + " .addCartogramXAxisSelect").val("area");
        $(".addPieDivClass").removeClass("hide");
        $(".addPieDivClass>.singleYear").removeClass("hide");
        $(".addPieDivClass>.singleIndex").addClass("hide");
        $(".addBarDivClass").addClass("hide");
        $(".addBarDivClass>.singleYear").removeClass("hide");
        $(".addBarDivClass>.singleIndex").addClass("hide");
        $(".addDoubleYDivClass").addClass("hide");
        $(".addDoubleYDivClass .singleYear").removeClass("hide");
        $(".addDoubleYDivClass .singleIndex").addClass("hide");
        $(".addDoubleYDivClass").find(".axisClass").removeClass("hide");
        $(".addDoubleYDivClass #addCartogramDoubleYYearDiv").parent().removeClass("hide")
    }
};