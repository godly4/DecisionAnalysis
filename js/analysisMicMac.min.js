MicMacAnalysis = function (a) {
    var d = Backbone.Router.extend({
        initialize: function () {
            this.getDataArrModel = new h();
            this.panelOperConllection = new m();
            this.panelOperView = new i({model: this.panelOperConllection});
            this.legendView = new LegendView();
            this.listenTo(this.panelOperView, "mapUpdate", this.mapUpdate);
            this.listenTo(this.panelOperView, "showLegend", this.showLegend);
            this.listenTo(this.panelOperView, "hideLegend", this.hideLegend);
            this.listenTo(this.panelOperView, "updateLegend", this.updateLegend);
            this.listenTo(this.panelOperView, "hideTimeSlider", this.hideTimeSlider);
            this.listenTo(this.panelOperView, "layerZIndex", this.layerZIndex);
            this.init()
        }, init: function () {
            this.getDataArrModel.UpdateData(this.getDataArrModel, a);
            this.panelOperConllection.add(this.getDataArrModel.get("content"))
        }, mapUpdate: function (q) {
            var s = q.get("config");
            console.log(s);
            analysisMap.mapEntrance(q.attributes, q.cid);
            analysisSaveData.listDataChange(q.attributes, q.cid, true)
        }, showLegend: function (q) {
            this.legendView.showLegend(q)
        }, hideLegend: function (q) {
            this.legendView.hideLegend(q)
        }, updateLegend: function (q) {
            this.legendView.updateLegend(q)
        }, hideTimeSlider: function (s) {
            var q = s.get("dataUid");
            analysisMap.closePopup();
            analysisMap.removeLayer(q);
            this.hideLegend(s);
            analysisSaveData.listDataChange("", s.cid, false);
            s.get("config").animated && setProgressTime.timeShaftHide();
            addCartogramOper.listItemRemove(q)
        }, layerZIndex: function (q) {
            analysisMap.sortLayer()
        }
    });
    var h = Backbone.Model.extend({
        idAttribute: "uid", defaults: {content: void 0}, UpdateData: function (q, s) {
            var w = null;
            if (s.code && 0 == s.code) {
                w = s.data;
                $.extend(q.attributes, w)
            } else {
                if (s.code == undefined) {
                    var u = [];
                    for (var t = 0; t < s.content.length; t++) {
                        u.push(this.UpdateDataLayer(s.content[t]))
                    }
                    q.attributes.content = u;
                    q.attributes.uid = s.uid;
                    q.attributes.title = s.title
                }
            }
        }, UpdateDataLayer: function (s) {
            var q = s.themeDataType == "POINT" ? "pt" : s.themeDataType == "POLYGON" ? "pg" : "";
            var u = s.config ? s.config : s.themeDataType == "POINT" ? j.MarkerSimpleConfig() : s.themeDataType == "POLYGON" ? j.PolygonSimpleConfig() : "";
            var t = {
                dataUid: s.itemId,
                dataType: "private",
                dataName: s.itemName,
                extent: s.extent,
                geometryType: q,
                config: u,
                sr: s.sr,
                visible: s.visible,
                fields: s.fields,
                data: s.data,
                years: s.years
            };
            return t
        }
    });
    var m = Backbone.Collection.extend({
        sortDataLayers: function (u) {
            for (var s = [], q = 0; q < u.length; q++) {
                s.push(this.get(u[q]))
            }
            this.reset(s, {silent: !0})
        }
    });
    var i = Backbone.View.extend({
        $el: $("#data-panel"),
        markerTemplate: _.template($("#marker-data-layer-template").html()),
        polygonConfigTemplate: _.template($("#polygon-data-layer-template").html()),
        initialize: function () {
            this.listenTo(this.model, "add", this.addRender)
        },
        remove: function (w) {
            var u = $(w.currentTarget).attr("id"), q = w, s = q.get("config");
            (q.get("visible")) && (this.trigger("hideTimeSlider", q));
            $("#data-layer-list").find("li#" + w.cid).remove();
            this.model.remove(q)
        },
        addRender: function (s) {
            var q = s.get("geometryType"), t = null;
            if (q == "pt") {
                $("#data-layer-list").prepend(this.markerTemplate({dataLayer: s}));
                t = new g({el: "#" + s.cid + ".data-layer", model: s})
            } else {
                if (q == "pg") {
                    $("#data-layer-list").prepend(this.polygonConfigTemplate({dataLayer: s}));
                    t = new PolygonConfigView({el: "#" + s.cid + ".data-layer", model: s})
                }
            }
            this.listenTo(t, "mapUpdate", this.mapUpdateHandler), this.listenTo(t, "showLegend", this.showLegendHandler), this.listenTo(t, "hideLegend", this.hideLegendHandler);
            this.listenTo(t, "updateLegend", this.updateLegendHandler);
            this.listenTo(t, "modelRemove", this.remove);
            this.listenTo(t, "layerUp", this.layerZIndex);
            this.listenTo(t, "layerDown", this.layerZIndex);
            t.init()
        },
        mapUpdateHandler: function (q) {
            this.trigger("mapUpdate", q)
        },
        showLegendHandler: function (q) {
            this.trigger("showLegend", q)
        },
        hideLegendHandler: function (q) {
            this.trigger("hideLegend", q)
        },
        updateLegendHandler: function (q) {
            this.trigger("updateLegend", q)
        },
        layerZIndex: function (q) {
            this.trigger("layerZIndex", q)
        }
    });
    var g = Backbone.View.extend({
        colorPickerTemplate: _.template($("#color-picker-template").html()),
        valuePickerTemplate: _.template($("#value-picker-template").html()),
        namePickerTemplate: _.template($("#name-picker-template").html()),
        blendingPickerTemplate: _.template($("#blending-mode-picker-template").html()),
        bucketTemplate: _.template($("#bucket-template").html()),
        events: {
            "click .btn-title-edit": "titleEditHandler",
            "keypress .title-editor": "titleEditorPressHandler",
            "click .btn-layer-up": "layerUp",
            "click .btn-layer-down": "layerDown",
            "click .btn-toggle-up": "toggleUp",
            "click .title-wrapper": "toggleUp",
            "click .btn-remove": "remove",
            "click .chk-layer-toggle": "toggleLayerClickHandler",
            "change .chk-layer-toggle": "toggleLayer",
            "click .template-thumb": "changeState",
            "change .marker-size-picker": "markerFillSizeChange",
            "change .marker-opacity-picker": "markerFillOpacityChange",
            "change .blending-mode-picker": "blendingModeChange",
            "change .outline-picker": "markerOutlineSizeChange",
            "change .outline-opacity-picker": "markerOutlineOpacityChange",
            "change .label-field-picker": "labelFieldChange",
            "change .label-font-picker": "labelFontChange",
            "change .label-size-picker": "labelSizeChange",
            "change .bucket-type-picker": "bucketTypeChange",
            "change .bucket-count-picker": "bucketCountChange",
            "change .number-field-picker": "markerFieldChangeHandler",
            "change .category-field-picker": "categoryFieldChange",
            "change #heat-weight-field-picker": "heatWeightFieldChange",
            "keypress #input-heat-top-value": "heatTopValuePress",
            "blur #input-heat-top-value": "heatTopValueChange",
            "change #heat-size-picker": "heatSizeChange",
            "blur #input-heat-size": "heatSizeChange",
            "change #heat-opacity-picker": "HeatOpacityChange",
            "change .marker-min-size-picker": "markerMinSizeChange",
            "change .marker-max-size-picker": "markerMaxSizeChange",
            "change #bubble-color-bucket-type-picker": "bucketTypeChange",
            "change #bubble-color-bucket-count-picker": "bucketCountChange",
            "change .chk-toggle-legend": "toggleLegendHandler",
            "input #input-legend-title": "legendTitleChangeHandler",
            "change .number-year-picker": "markerYearChange",
            "change .intensity-field-picker": "intensityFieldChange",
            "change .intensity-corrfield-picker": "intensityCorrfieldChange",
            "change .intensity-year-picker": "markerYearChange",
            "keypress #input-intensity-top-value": "intensityTopValuePress",
            "blur #input-intensity-top-value": "intensityTopValueChange",
            "change .lineWidth-width-picker": "lineWidthChange",
            "change .intensity-corrcount-picker": "corrCountChange",
            "change .chk-toggle-animate": "toggleAnimationTimeshaft",
            "change .time-field-picker": "timeFieldChangeTimeshaft",
            "change .time-duration-picker": "timeDurationChangeTimeshaft",
            "change .time-segment-picker": "timeSegmentChangeTimeshaft",
            "change .chk-time-accumulate": "timeAccumulateChangeTimeshaft",
            "change .intensity-displayWay-picker": "intensityDisplayWayChangeHanlder",
            "change .chk-toggle-dynamic": "intensityDynamicChangeHanlder",
            "change .marker-size-dynamic-picker": "intensityDynamicSizeChangeHanlder",
        },
        configTable: {
            "simple-template": "simple-panel",
            "choropleth-template": "choropleth-panel",
            "bubble-template": "bubble-panel",
            "category-template": "category-panel",
            "heat-template": "heat-panel",
            "intensity-template": "intensity-panel"
        },
        remove: function (q) {
            this.trigger("modelRemove", this.model)
        },
        titleEditHandler: function (x) {
            var w = $(x.currentTarget);
            if (w.hasClass("active")) {
                var s = this.$(".title-editor").val().trim();
                this.$(".title-wrapper span").text(s);
                this.model.set({dataName: s});
                this.$(".title-wrapper").removeClass("editing"), w.removeClass("active")
            } else {
                w.addClass("active");
                var s = this.$(".title-wrapper");
                if (s.hasClass("editing")) {
                    return
                }
                s.addClass("editing"), this.$(".title-wrapper .title-editor").focus()
            }
            x.stopImmediatePropagation(), x.preventDefault();
            var u = this.$(".title-editor"), q = u.val().trim().length;
            this.$(".title-editor").selectRange(q, q)
        },
        titleEditorPressHandler: function (q) {
            13 == q.keyCode && this.titleChangeHandler(q)
        },
        titleChangeHandler: function (x) {
            var w = $(x.currentTarget), s = w.val().trim(), q = f;
            if (q.stringIsBlank(s)) {
                var u = this.$(".title-wrapper span").text();
                w.val(u)
            } else {
                this.$(".title-wrapper span").text(s), this.model.set({dataName: s})
            }
            this.$(".title-wrapper").removeClass("editing");
            $(".btn-title-edit").removeClass("active")
        },
        layerUp: function (s) {
            var q = $(this.el);
            q.insertBefore(q.prev(".data-layer")), this.trigger("layerUp", this.model), s.stopImmediatePropagation()
        },
        layerDown: function (s) {
            var q = $(this.el);
            q.insertAfter(q.next(".data-layer")), this.trigger("layerDown", this.model), s.stopImmediatePropagation()
        },
        initialize: function () {
            var s = $.proxy(this.legendOrderChangeHandler, this);
            this.$("input[name=" + this.model.cid + "-radio-legend-order]").on("change", s);
            var q = $.proxy(this.bubbleFillChangeHandler, this);
            this.$("input[name=" + this.model.cid + "-radio-fill-mode]").on("change", q)
        },
        init: function () {
            this.initSimple();
            this.initChoropleth();
            this.initBubble();
            this.initCategory();
            this.initHeat();
            this.initIntensity();
            this.fieldsChangeHandler();
            this.yearChangeHandler();
            this.bigDataPanelDisabled(this.model);
            this.trigger("mapUpdate", this.model);
            var q = this.model.get("visible");
            q ? this.$("chk-layer-toggle").prop("checked", "checked") : (this.toggleUp(), this.$(".chk-layer-toggle").removeProp("checked"))
        },
        toggleUp: function (q) {
            $(this.el).hasClass("open") ? $(this.el).removeClass("open") : $(this.el).addClass("open"), q && q.stopImmediatePropagation()
        },
        toggleLayerClickHandler: function (q) {
            q.stopImmediatePropagation()
        },
        toggleLayer: function (s) {
            var q = $(s.currentTarget).prop("checked");
            this.model.set({visible: q}), q ? (this.trigger("showLayer", this.model), this.$(".chk-toggle-legend").prop("checked") && this.trigger("showLegend", this.model), this.$(".chk-toggle-animate").prop("checked") && $("#time-slider-container").removeClass("hide"), this.model.get("config").animated && setProgressTime.timeShaft(true, this.model.attributes, this.model.cid)) : (this.trigger("hideLayer", this.model), this.trigger("hideLegend", this.model), $("#time-slider-container").addClass("hide"), $(this.el).removeClass("open"), setProgressTime.timeShaft(false)), s.stopImmediatePropagation();
            this.trigger("mapUpdate", this.model)
        },
        bigDataPanelDisabled: function (q) {
            var s = q.get("data");
            if (s.length > 2000) {
                $("#choropleth-panel").addClass("disabled");
                $("#bubble-panel").addClass("disabled")
            }
        },
        changeState: function (u) {
            var t = o;
            var s = $(u.currentTarget);
            if (this.changePanel(s)) {
                var q = this.createConfig();
                q && (this.model.set({config: q}), q.type == t.configTypes.MARKER_SIMPLE || q.type == t.configTypes.MARKER_HEAT ? this.trigger("mapUpdate", this.model) : q.type == t.configTypes.MARKER_INTENSITY ? this.coorData() : q.type == t.configTypes.MARKER_CHOROPLETH ? this.$("#choropleth-panel").hasClass("disabled") || (this.$(".bucket-count-picker").removeClass("hide"), this.$(".btn-config-breaks").addClass("hide"), "equalcount" == q.bucketType && (q.bucketType = t.defaultBucketType, this.$(".bucket-type-picker").val("equalcount"), this.$(".bucket-count-picker").find("option[text='等个数分段']").attr("selected", !0)), this.markerBucketChange(), this.updateLegend()) : q.type == t.configTypes.MARKER_BUBBLE ? this.$("#bubble-panel").hasClass("disabled") || (this.$(".bucket-count-picker").removeClass("hide"), this.$(".btn-config-breaks").addClass("hide"), "equalcount" == q.bucketType && (q.bucketType = t.defaultBucketType, this.$(".bucket-type-picker").val("equalcount"), this.$(".bucket-count-picker").find("option[text='等个数分段']").attr("selected", !0)), ("multi" == q.fillMode ? this.widthBucketChange("panelchange") : this.widthBucketChange()), "multi" == q.fillMode && (this.$("#bubble-color-bucket-count-picker").removeClass("hide"), "equalcount" == q.colorBucketType && (q.colorBucketType = t.defaultBucketType, this.$("#bubble-color-bucket-type-picker").val("equalcount"), this.$("#bubble-color-bucket-count-picker").find("option[text='等个数分段']").attr("selected", !0)), this.markerBucketChange()), this.updateLegend()) : q.type == t.configTypes.MARKER_CATEGORY ? (this.fetchFieldValues(), this.updateLegend()) : "");
                q && (q.type != "marker-intensity" && this.timeFieldRenderChange())
            }
        },
        changePanel: function (u) {
            var s = u.attr("id"), t = this.$('.config-template:has("#' + s + '")');
            if (t.hasClass("active")) {
                return !1
            }
            this.$(".config-template").removeClass("active"), t.addClass("active");
            this.$(".config-panel.active").removeClass("active");
            var q = this.configTable[s], w = this.$("#" + q);
            (w.addClass("active") && ("simple-panel" == q || "heat-panel" == q || "intensity-panel" == q)) ? (this.$(".legend-setting-wrapper").addClass("disabled"), this.trigger("hideLegend", this.model), w.hasClass("disabled") ? (this.$(".animate-setting-wrapper").addClass("disabled"), this.$(".fields-setting-wrapper").addClass("disabled")) : (this.$(".animate-setting-wrapper").removeClass("disabled"), this.$(".fields-setting-wrapper").removeClass("disabled"))) : (w.hasClass("disabled") ? (this.$(".animate-setting-wrapper").addClass("disabled"), this.$(".legend-setting-wrapper").addClass("disabled"), this.$(".fields-setting-wrapper").addClass("disabled")) : (this.$(".animate-setting-wrapper").removeClass("disabled"), this.$(".legend-setting-wrapper").removeClass("disabled"), this.$(".fields-setting-wrapper").removeClass("disabled")));
            "intensity-panel" == q && this.$(".animate-setting-wrapper").addClass("disabled"), setProgressTime.timeShaft(false);
            return !0
        },
        createConfig: function () {
            var s = this.$(".config-panel.active"), q = s.attr("id");
            return "simple-panel" == q ? this.createSimpleConfig() : "intensity-panel" == q ? this.createIntensityConfig() : "choropleth-panel" == q ? this.$("#choropleth-panel").hasClass("disabled") ? null : this.createChoroplethConfig() : "bubble-panel" == q ? this.$("#bubble-panel").hasClass("disabled") ? null : this.createBubbleConfig() : "category-panel" == q ? this.createCategoryConfig() : "heat-panel" == q ? this.createHeatConfig() : "fluid-panel" == q ? this.createFluidConfig() : void 0
        },
        fieldsChangeHandler: function () {
            for (var y = this.model.get("config"), D = this.model.get("fields"), B = [{
                name: "无",
                code: ""
            }], A = [{name: "无", code: ""}, {name: "名称", code: "titleName"}], C = [{
                name: "名称",
                code: "titleName"
            }], x = [], w = [], s = 0; s < D.length; s++) {
                B.push({name: D[s].name, code: D[s].code}), A.push({
                    name: D[s].name,
                    code: D[s].code
                }), C.push({
                    name: D[s].name,
                    code: D[s].code
                }), r = f, r.isNumericType(D[s].type) ? (x.push({
                    name: D[s].name,
                    code: D[s].code
                }), w.push(D[s].name)) : r.isDateTimeType(D[s].type) && w.push(D[s].name)
            }
            this.$(".label-field-picker").append(this.namePickerTemplate({values: A, defaultValue: y.labelField}));
            0 == x.length ? (this.$("#choropleth-panel").addClass("disabled"), this.$("#bubble-panel").addClass("disabled"), (0 == D.length && this.$("#category-panel").addClass("disabled"), 0 == D.length && this.$("#intensity-panel").addClass("disabled"))) : (this.$(".number-field-picker").append(this.namePickerTemplate({
                values: x,
                defaultValue: y.fieldName
            })), this.$("#bubble-color-field-picker").empty().append(this.namePickerTemplate({
                values: x,
                defaultValue: y.colorFieldName
            }))), B = B.slice(1), this.$(".category-field-picker").append(this.namePickerTemplate({
                values: B,
                defaultValue: y.fieldName
            })), this.$(".intensity-field-picker").append(this.namePickerTemplate({
                values: C,
                defaultValue: y.fieldName
            })), this.$(".intensity-corrfield-picker").append(this.namePickerTemplate({
                values: B,
                defaultValue: y.fieldName
            }));
            var u = [], z = [];
            u = u.concat([{name: "无", code: "无"}], x), z = z.concat([{
                name: "无",
                code: ""
            }], x), this.$("#heat-weight-field-picker").append(this.namePickerTemplate({
                values: u,
                defaultValue: y.weightField
            })), this.$(".intensity-corrcount-picker").append(this.namePickerTemplate({
                values: z,
                defaultValue: y.fieldName
            }));
            var q = [{name: "年份", code: "year"}];
            this.$(".time-field-picker").append(this.namePickerTemplate({values: q, defaultValue: y.timeField}))
        },
        yearChangeHandler: function () {
            for (var x = this.model.get("config"), w = this.model.get("years"), s = [{
                name: "无",
                code: ""
            }], u = [], y = 0; y < w.length; y++) {
                s.push({name: w[y].name, code: w[y].code}), u.push({name: w[y].name, code: w[y].code})
            }
            var q = [{name: "全部", code: "all"}];
            q = q.concat(u);
            !(u.length == 0) ? (this.$(".number-year-picker").append(this.namePickerTemplate({
                values: q,
                defaultValue: x.labelYear
            })), this.$("#bubble-color-year-picker").empty().append(this.namePickerTemplate({
                values: q,
                defaultValue: x.colorFieldYear
            }))) : (this.$(".number-year-picker").append(this.namePickerTemplate({
                values: s,
                defaultValue: x.labelYear
            })));
            this.model.get("config").labelYear = this.$(".number-year-picker").val();
            this.model.get("config").colorFieldYear = this.$("#bubble-color-year-picker").val()
        },
        markerColorChange: function (q) {
            var s = this.model.get("config");
            q != s.markerColor && (s.markerColor = q, this.trigger("mapUpdate", this.model), this.updateLegend())
        },
        onChoroplethColorRampChange: function (q) {
            var s = this.model.get("config");
            s.colors = q.colors;
            this.markerBucketChange();
            this.updateLegend()
        },
        onCategoryColorRampChange: function (q) {
            var t = this.model.get("config");
            t.colors = q.colors;
            var s = f.getRandomColors(t.fieldValues.length, q.colors).reverse();
            if (this.model.get("legendOrder") && this.model.get("legendOrder") == "desc") {
                s.reverse()
            }
            t.fieldColors = s, this.updateCategoryBuckets(), this.updateLegend();
            this.trigger("mapUpdate", this.model)
        },
        markerFillSizeChange: function (q) {
            var t = this.model.get("config");
            var s = parseFloat($(q.currentTarget).val());
            t.markerSize = s;
            this.trigger("mapUpdate", this.model)
        },
        markerFillOpacityChange: function (q) {
            var t = this.model.get("config");
            var s = parseFloat($(q.currentTarget).val());
            if ($(q.currentTarget).attr("id") == "intensity-opacity-curve-picker") {
                t.curveOpt = s
            } else {
                if ($(q.currentTarget).attr("id") == "intensity-opacity-dynamic-picker") {
                    t.dynamicOpt = s
                } else {
                    t.markerOpacity = s
                }
            }
            this.trigger("mapUpdate", this.model)
        },
        blendingModeChange: function (q) {
            var t = this.model.get("config");
            var s = $(q.currentTarget).val();
            t.blendingMode = s;
            this.trigger("mapUpdate", this.model)
        },
        outlineColorChange: function (q) {
            var s = this.model.get("config");
            q != s.outlineColor && (s.outlineColor = q, this.trigger("mapUpdate", this.model), this.updateLegend())
        },
        markerOutlineSizeChange: function (q) {
            var t = this.model.get("config");
            var s = parseFloat($(q.currentTarget).val());
            t.outlineWidth = s;
            this.trigger("mapUpdate", this.model)
        },
        markerOutlineOpacityChange: function (q) {
            var t = this.model.get("config");
            var s = parseFloat($(q.currentTarget).val());
            t.outlineOpacity = s;
            this.trigger("mapUpdate", this.model)
        },
        labelColorChange: function (q) {
            var s = this.model.get("config");
            q != s.labelColor && (s.labelColor = q, s.labelField && this.trigger("mapUpdate", this.model))
        },
        labelFieldChange: function (s) {
            var q = $(s.currentTarget), w = this.model.get("config"), u = q.find("option:selected"),
                t = 0 == u.index() ? null : u.val();
            w.labelField = t, this.trigger("mapUpdate", this.model)
        },
        labelFontChange: function (q) {
            var t = this.model.get("config"), s = $(q.currentTarget).val();
            t.labelFont = s, t.labelField && this.trigger("mapUpdate", this.model)
        },
        labelSizeChange: function (q) {
            var t = this.model.get("config"), s = parseFloat($(q.currentTarget).val());
            t.labelSize = s, t.labelField && this.trigger("mapUpdate", this.model)
        },
        markerBucketChange: function (D) {
            var w = this.model.get("config");
            var y = w.type == "marker-bubble" ? $("#bubble-color-bucket-count-picker").val() : $(".config-panel.active").find(".bucket-count-picker").val();
            var z = w.type == "marker-bubble" ? $("#bubble-color-bucket-type-picker").val() : $(".config-panel.active").find(".bucket-type-picker").val();
            var B = [];
            var I = w.type == "marker-bubble" ? this.$("#bubble-color-field-picker.number-field-picker").val() : this.$(".number-field-picker").val();
            var q = w.type == "marker-bubble" ? this.$("#bubble-size-year-picker.number-year-picker").val() : this.$(".number-year-picker").val();
            var G = this.model.get("data");
            $(G).each(function (J, K) {
                $.each(K.indexdata, function (M, L) {
                    if (q == "all" || q == "") {
                        B.push(Number(L.data[I]))
                    } else {
                        if (Number(L.indexyear) == q) {
                            B.push(Number(L.data[I]))
                        }
                    }
                })
            });
            var t = B.sort(function (K, J) {
                return K - J
            });
            var s = $.unique(t);
            var x = $.grep(s, function (K, J) {
                return K < 0
            });
            var F = $.grep(s, function (K, J) {
                return K == 0
            });
            s = $.grep(s, function (K, J) {
                return K > 0
            });
            var H = parseInt(y) > 1 ? parseInt(y) - F.length : parseInt(y);
            var u = this.dataSector(s, H, z);
            var E = f.getRandomColors(y, w.colors).reverse();
            if (this.model.get("legendOrder") && this.model.get("legendOrder") == "desc") {
                E.reverse()
            }
            var C = [];
            $(u.ranges).each(function (J, K) {
                C.push({value: K, color: E[J]})
            });
            if (!u.isMonodrome) {
                if (w.type == "marker-bubble") {
                    w.colorBreaks = C;
                    w.colorBucketCount = u.count;
                    w.colorBucketType = z
                } else {
                    w.breaks = C;
                    w.bucketCount = u.count;
                    w.bucketType = z
                }
                this.trigger("mapUpdate", this.model)
            } else {
                if (w.type == "marker-bubble") {
                    w.colorBreaks = [];
                    w.colorBucketType = z
                } else {
                    w.breaks = [];
                    w.bucketType = z
                }
                var A = f;
                this.trigger("mapUpdate", this.model);
                A.showWarning("选择的段数大于最大段数" + (s.length - 1) + "，请重新选择！")
            }
        },
        dataSector: function (q, A, x) {
            var B = this;
            q = q || [];
            var s = [];
            var C = q.length;
            var t = false;
            if (A < C) {
                if (x == "equalcount") {
                    var u = (C - 1) / A;
                    for (var w = 0; w < A; w++) {
                        var z = Math.ceil(w * u);
                        s.push(Number(q[z]))
                    }
                    s.push(Number(q[C - 1]))
                } else {
                    if (x == "equalinterval") {
                        var u = (Number(q[C - 1]) - Number(q[0])) / A;
                        for (var w = 0; w < A; w++) {
                            var D = Number(q[0]) + w * u;
                            s.push(D)
                        }
                        s.push(Number(q[C - 1]))
                    }
                }
                t = false
            } else {
                s = q;
                t = true
            }
            var y = A < C ? A : C;
            return {ranges: s, count: y, isMonodrome: t}
        },
        getRandomColors: function (x, t) {
            var q = [], w = o, u = new Rainbow;
            u.setNumberRange(0, x), u.setSpectrum.apply(void 0, t ? t : w.defaultColorRamp);
            for (var s = 0; s < x; s++) {
                q.push(u.colourAt(s))
            }
            q.push(t[t.length - 1].split("#")[1]);
            return q
        },
        markerFieldChangeHandler: function (q) {
            var t = this.model.get("config");
            var s = $(q.currentTarget).val();
            t.fieldName = s;
            t.type == "marker-bubble" && $(q.currentTarget).attr("id") != "bubble-color-field-picker" ? this.widthBucketChange() : this.markerBucketChange();
            this.trigger("mapUpdate", this.model);
            this.updateLegend();
            this.timeFieldRenderChange()
        },
        categoryFieldChange: function (t) {
            var q = $(t.currentTarget), s = q.val(), u = this.model.get("config");
            u.fieldName = s;
            this.fetchFieldValues();
            this.timeFieldRenderChange();
            this.updateLegend()
        },
        fetchFieldValues: function () {
            var t = this.model.get("config"), s = this.model.get("data"), q = [], u = t.fieldName;
            $(s).each(function (w, x) {
                $.each(x.indexdata, function (z, y) {
                    if (t.labelYear == "all" || t.labelYear == "") {
                        if ($.inArray(y.data[u], q) == -1) {
                            q.push(y.data[u])
                        }
                    } else {
                        if (Number(y.indexyear) == t.labelYear) {
                            if ($.inArray(y.data[u], q) == -1) {
                                q.push(y.data[u])
                            }
                        }
                    }
                })
            });
            t.fieldValues = q;
            this.fieldValuesFetchedHandler()
        },
        fieldValuesFetchedHandler: function () {
            var x = this.model.get("config"), u = o;
            if (x.type == u.configTypes.MARKER_CATEGORY) {
                var t = x.fieldValues;
                var s = t.sort(function (z, y) {
                    return z - y
                });
                var q = s.length > b.singleCount ? b.singleCount + 1 : x.fieldValues.length;
                var w = f.getRandomColors(q, x.colors).reverse();
                if (this.model.get("legendOrder") && this.model.get("legendOrder") == "desc") {
                    w.reverse()
                }
                x.fieldColors = w, this.trigger("mapUpdate", this.model);
                this.updateCategoryBuckets();
                this.updateLegend()
            }
        },
        updateCategoryBuckets: function () {
            var y = this.model.get("config"), t = o, w = y.fieldColors, x = y.fieldValues;
            var s = [];
            if (w.length != x.length) {
                s = x.slice(0, w.length - 1);
                s.push("其它")
            } else {
                s = x.slice(0)
            }
            this.$(".bucket-list").html(this.bucketTemplate({values: s, colors: w, colorList: t.colors}));
            for (var q = 0; q < w.length; q++) {
                var u = "bucket-" + q;
                this.$("#" + u + ".bucket-color-picker").colorselector({
                    context: this,
                    initColor: w[q],
                    callback: this.bucketColorChangeHandler
                })
            }
        },
        bucketColorChangeHandler: function (x, w, s, u) {
            var q = $(u).parent().index();
            if (q != -1) {
                var y = this.model.get("config");
                y.fieldColors[q] = x, this.trigger("mapUpdate", this.model);
                this.updateLegend()
            }
        },
        heatWeightFieldChange: function (t) {
            var q = $(t.currentTarget), s = q.val();
            s = "无" == s ? void 0 : s;
            var u = this.model.get("config");
            u.weightField = s;
            this.trigger("mapUpdate", this.model)
        },
        heatTopValuePress: function (q) {
            13 == q.keyCode && this.heatTopValueChange(q)
        },
        heatTopValueChange: function (s) {
            var q = this.model.get("config"), t = parseInt($(s.currentTarget).val());
            q.heatTopValue = t, this.trigger("mapUpdate", this.model)
        },
        heatUnitChange: function (u) {
            var q = this.model.get("config"), s = $(u.currentTarget).val();
            this.$("#heat-unit-wrapper").removeClass("pixel map").addClass(s), q.heatSizeUnit = s;
            var t;
            "pixel" == s ? t = parseInt(this.$("#heat-size-picker").val()) : "map" == s && (t = parseInt(this.$("#input-heat-size").val())), q.heatSize = t, this.trigger("mapUpdate", this.model)
        },
        heatSizeChange: function (s) {
            var q = this.model.get("config"), t = parseInt($(s.currentTarget).val());
            q.heatSize = t, this.trigger("mapUpdate", this.model)
        },
        heatSizePress: function (q) {
            13 == q.keyCode && this.heatSizeChange(q)
        },
        onHeatColorRampChange: function (q) {
            var s = this.model.get("config");
            s.colors = q.colors, this.trigger("mapUpdate", this.model)
        },
        HeatOpacityChange: function (q) {
            var t = this.model.get("config"), s = parseFloat($(q.currentTarget).val());
            t.heatOpacity = s, this.trigger("mapUpdate", this.model)
        },
        onBubbleColorRamp: function (s) {
            var t = this.model.get("config");
            t.colors = s.colors;
            var q = r.getRandomColors(t.colorBucketCount, s.colors);
            t.breakColors = q;
            this.markerBucketChange();
            this.updateLegend()
        },
        markerMinSizeChange: function (q) {
            var t = this.model.get("config"), s = parseFloat($(q.currentTarget).val());
            t.minSize = s;
            this.widthBucketChange();
            this.updateLegend()
        },
        markerMaxSizeChange: function (q) {
            var t = this.model.get("config"), s = parseFloat($(q.currentTarget).val());
            t.maxSize = s;
            this.widthBucketChange();
            this.updateLegend()
        },
        bucketTypeChange: function (u) {
            var t = $(u.currentTarget), x = t.val(), s = parseInt(t.next().val()), w = this.model.get("config"),
                q = t.attr("id");
            "bubble-color-bucket-type-picker" == q ? (w.colorBucketType = x, this.markerBucketChange()) : (w.type == "marker-bubble" ? (w.bucketCount = s, this.$(".bucket-count-picker").removeClass("hide"), this.$(".btn-config-breaks").addClass("hide"), this.widthBucketChange()) : (w.bucketCount = s, this.$(".bucket-count-picker").removeClass("hide"), this.$(".btn-config-breaks").addClass("hide"), this.markerBucketChange()));
            this.updateLegend()
        },
        bucketCountChange: function (u) {
            var t = $(u.currentTarget), s = o, x = parseInt(t.val()), w = this.model.get("config"), q = t.attr("id");
            "bubble-color-bucket-count-picker" == q ? (w.colorBucketCount = x, " " === w.colorBucketType && (w.colorBucketType = s.defaultBucketType), this.markerBucketChange()) : (w.type == "marker-bubble" ? (w.bucketCount = x, " " === w.bucketType && (w.bucketType = s.defaultBucketType), this.widthBucketChange()) : (w.bucketCount = x, " " === w.bucketType && (w.bucketType = s.defaultBucketType), this.markerBucketChange()));
            this.updateLegend()
        },
        widthBucketChange: function (E) {
            var w = this.model.get("config");
            var y = $(".config-panel.active").find(".bucket-count-picker").val();
            var z = $(".config-panel.active").find(".bucket-type-picker").val();
            var B = [];
            var H = this.$("#bubble-size-field-picker.number-field-picker").val();
            var q = this.$("#bubble-size-year-picker.number-year-picker").val();
            var F = this.model.get("data");
            $(F).each(function (J, K) {
                $.each(K.indexdata, function (M, L) {
                    if (q == "all" || q == "") {
                        B.push(Number(L.data[H]))
                    } else {
                        if (Number(L.indexyear) == q) {
                            B.push(Number(L.data[H]))
                        }
                    }
                })
            });
            var t = B.sort(function (K, J) {
                return K - J
            });
            var s = $.unique(t);
            var x = $.grep(s, function (K, J) {
                return K < 0
            });
            var D = $.grep(s, function (K, J) {
                return K == 0
            });
            s = $.grep(s, function (K, J) {
                return K > 0
            });
            var G = parseInt(y) > 1 ? parseInt(y) - D.length : parseInt(y);
            var u = this.dataSector(s, G, z);
            var C = this.widthRandom(w.minSize, w.maxSize, y).reverse();
            if (this.model.get("legendOrder") && this.model.get("legendOrder") == "desc") {
                C.reverse()
            }
            var I = [];
            $(u.ranges).each(function (J, K) {
                I.push({value: K, markerSize: C[J]})
            });
            if (!u.isMonodrome) {
                w.breaks = I;
                w.bucketCount = u.count;
                w.bucketType = z;
                if (!E) {
                    this.trigger("mapUpdate", this.model)
                }
            } else {
                w.breaks = [];
                w.bucketType = z;
                var A = f;
                if (!E) {
                    this.trigger("mapUpdate", this.model)
                }
                A.showWarning("选择段数大于最大段数" + (s.length - 1) + "，请重新选择！")
            }
        },
        widthRandom: function (u, s, w) {
            var x = (Number(s) - Number(u)) / Number(w);
            var q = [];
            for (var t = 0; t < Number(w); t++) {
                q.push(s - x * t)
            }
            return q
        },
        bubbleFillChangeHandler: function (x) {
            var u = $(x.currentTarget), t = o, z = u.val(), y = this.model.get("config");
            if (y.fillMode = z, "single" == z) {
                var w = this.$("#bubble-panel #bubble-size-marker-opacity-picker").val();
                y.markerOpacity = parseFloat(w), this.$("#bubble-multi-fill-wrapper").addClass("hide"), this.$("#bubble-single-fill-wrapper").removeClass("hide")
            } else {
                if ("multi" == z) {
                    y.colorFieldName && y.colorBreaks || (y.colorFieldName = y.fieldName, y.colorBreaks = y.breaks, y.colorBucketCount = y.bucketCount, y.colorBucketType = y.bucketType, this.$("#bubble-color-field-picker").val(y.fieldName), this.$("#bubble-color-bucket-count-picker").val(y.bucketCount), this.$("#bubble-color-bucket-type-picker").find("option[value='" + y.bucketType + "']").attr("selected", !0), this.$(".bucket-count-picker").hasClass("hide") && this.$("#bubble-color-bucket-count-picker").addClass("hide"), this.$(".btn-config-breaks").hasClass("hide") || this.$("#btn-bubble-color-config-breaks").removeClass("hide"));
                    var w = this.$("#bubble-panel #bubble-color-marker-opacity-picker").val();
                    y.markerOpacity = parseFloat(w);
                    var s = this.$("#bubble-panel .marker-color-ramp-picker").attr("color-ramp-name"),
                        q = t.colorRamp.getColor(s);
                    q = q ? q : t.defaultColorRamp, y.colors = q, this.$("#bubble-multi-fill-wrapper").removeClass("hide"), this.$("#bubble-single-fill-wrapper").addClass("hide")
                }
            }
            this.markerBucketChange();
            this.trigger("mapUpdate", this.model);
            this.updateLegend()
        },
        markerYearChange: function (t) {
            var q = $(t.currentTarget), s = q.val(), u = this.model.get("config");
            u.labelYear = s;
            u.type == "marker-choropleth" ? (this.markerBucketChange(), this.updateLegend()) : (u.type == "marker-bubble" ? ($(t.currentTarget).attr("id") != "bubble-color-year-picker" ? (this.widthBucketChange(), this.updateLegend()) : (this.markerBucketChange(), this.updateLegend())) : this.fetchFieldValues(), this.updateLegend());
            ((u.type == "marker-heat" || u.type == "marker-intensity") ? this.trigger("mapUpdate", this.model) : "");
            this.timeFieldRenderChange()
        },
        fillAnimateSettings: function (w, u, q, s) {
            this.$(".time-segment-picker").val(w), this.$(".time-duration-picker").val(u), this.$(".chk-toggle-animate").prop("checked", "checked"), this.$(".chk-time-accumulate").prop("checked", q), this.$("#animate-setting .time-field-picker").val(s), this.$("#animate-setting").removeClass("hide")
        },
        createSimpleConfig: function () {
            var J = this.$("#simple-panel .marker-color-picker").val(),
                A = this.$("#simple-panel .marker-size-picker").val(),
                M = this.$("#simple-panel .marker-opacity-picker").val(),
                H = this.$("#simple-panel .outline-color-picker").val(),
                F = this.$("#simple-panel .outline-width-picker").val(),
                C = this.$("#simple-panel .outline-opacity-picker").val(),
                E = this.$("#simple-panel .label-color-picker").val(),
                B = this.$("#simple-panel .label-field-picker").find("option:selected"),
                K = 0 == B.index() ? null : B.val(), I = this.$("#simple-panel .label-font-picker").val(),
                L = this.$("#simple-panel .label-size-picker").val(),
                x = this.$("#simple-panel .marker-year-picker").val();
            var D = this.$(".chk-toggle-animate").prop("checked"), G = this.$(".time-field-picker").val();
            var u = this.$(".time-segment-picker").val(), q = this.$(".time-duration-picker").val();
            var w = this.$(".chk-time-accumulate").prop("checked");
            var z = j.MarkerSimpleConfig({
                markerColor: J,
                markerSize: parseFloat(A),
                markerOpacity: parseFloat(M),
                outlineColor: H,
                outlineWidth: parseFloat(F),
                outlineOpacity: parseFloat(C),
                labelColor: E,
                labelField: K,
                labelFont: I,
                labelSize: parseFloat(L),
                labelYear: Number(x),
                animated: D,
                timeField: G,
                frameCount: parseInt(u),
                duration: parseInt(q),
                timeAccumulate: w
            });
            return z
        },
        createChoroplethConfig: function () {
            var P = this.$("#choropleth-panel .marker-color-ramp-picker").attr("color-ramp-name"), L = o,
                C = L.colorRamp.getColor(P);
            C = C ? C : L.defaultColorRamp;
            var S = this.$("#choropleth-panel .marker-size-picker").val(),
                K = this.$("#choropleth-panel .marker-opacity-picker").val(),
                E = this.$("#choropleth-panel .outline-color-picker").val(),
                H = this.$("#choropleth-panel .outline-width-picker").val(),
                D = this.$("#choropleth-panel .outline-opacity-picker").val(),
                Q = this.$("#choropleth-panel .label-color-picker").val(),
                O = this.$("#choropleth-panel .label-field-picker").find("option:selected"),
                R = 0 == O.index() ? null : O.val(), M = this.$("#choropleth-panel .label-font-picker").val(),
                F = this.$("#choropleth-panel .label-size-picker").val(),
                B = this.$("#choropleth-panel .number-field-picker").val(),
                N = this.$("#choropleth-panel .bucket-type-picker").val(),
                I = this.$("#choropleth-panel .bucket-count-picker").val(),
                z = this.$("#choropleth-panel .number-year-picker").val();
            var G = this.$(".chk-toggle-animate").prop("checked"), J = this.$(".time-field-picker").val();
            var w = this.$(".time-segment-picker").val(), q = this.$(".time-duration-picker").val();
            var x = this.$(".chk-time-accumulate").prop("checked");
            var A = j.MarkerChoroplethConfig({
                colors: C,
                markerSize: parseFloat(S),
                markerOpacity: parseFloat(K),
                outlineColor: E,
                outlineWidth: parseFloat(H),
                outlineOpacity: parseFloat(D),
                labelColor: Q,
                labelField: R,
                labelFont: M,
                labelSize: parseFloat(F),
                fieldName: B,
                bucketType: N,
                bucketCount: parseInt(I),
                labelYear: z == "all" ? "all" : Number(z),
                animated: G,
                timeField: J,
                frameCount: parseInt(w),
                duration: parseInt(q),
                timeAccumulate: x
            });
            return A
        },
        createBubbleConfig: function () {
            var X = this.$("#bubble-panel .marker-color-picker").val(), S = o,
                G = this.$("#bubble-panel .marker-min-size-picker").val(),
                ab = this.$("#bubble-panel .marker-max-size-picker").val(),
                Q = this.$("#bubble-panel .marker-opacity-picker").val(),
                K = this.$("#bubble-panel .outline-color-picker").val(),
                N = this.$("#bubble-panel .outline-width-picker").val(),
                H = this.$("#bubble-panel .outline-opacity-picker").val(),
                Y = this.$("#bubble-panel .label-color-picker").val(),
                W = this.$("#bubble-panel .label-field-picker").find("option:selected"),
                Z = 0 == W.index() ? null : W.val(), U = this.$("#bubble-panel .label-font-picker").val(),
                L = this.$("#bubble-panel .label-size-picker").val(),
                F = this.$("#bubble-panel #bubble-size-field-picker").val(),
                V = this.$("#bubble-panel .bucket-type-picker").val(),
                O = this.$("#bubble-panel .bucket-count-picker").val(),
                aa = this.$("input[name=" + this.model.cid + "-radio-fill-mode]:checked").val(),
                J = this.$("#bubble-panel #bubble-size-year-picker").val(),
                M = this.$(".chk-toggle-animate").prop("checked"), P = this.$(".time-field-picker").val();
            var w = this.$(".time-segment-picker").val(), q = this.$(".time-duration-picker").val();
            var A = this.$(".chk-time-accumulate").prop("checked");
            v = {
                markerColor: X,
                minSize: parseFloat(G),
                maxSize: parseFloat(ab),
                markerOpacity: parseFloat(Q),
                outlineColor: K,
                outlineWidth: parseFloat(N),
                outlineOpacity: parseFloat(H),
                labelColor: Y,
                labelField: Z,
                labelFont: U,
                labelSize: parseFloat(L),
                fieldName: F,
                bucketType: V,
                bucketCount: parseInt(O),
                fillMode: aa,
                labelYear: J == "all" ? "all" : Number(J),
                animated: M,
                timeField: P,
                frameCount: parseInt(w),
                duration: parseInt(q),
                timeAccumulate: A
            };
            if ("multi" == aa) {
                var D = this.$("#bubble-color-field-picker").val(), x = this.$("#bubble-color-year-picker").val(),
                    R = this.$("#bubble-color-bucket-type-picker").val(),
                    I = this.$("#bubble-color-bucket-count-picker").val(),
                    Q = this.$("#bubble-color-marker-opacity-picker").val();
                v.colorFieldName = D, v.colorFieldYear = Number(x), v.colorBucketType = R, v.colorBucketCount = parseInt(I), v.markerOpacity = parseFloat(Q);
                var z = this.$("#bubble-panel .marker-color-ramp-picker").attr("color-ramp-name"),
                    B = S.colorRamp.getColor(z);
                B = B ? B : S.defaultColorRamp, v.colors = B
            }
            var E = j.MarkerBubbleConfig(v);
            return E
        },
        createCategoryConfig: function () {
            var N = this.$("#category-panel .marker-color-ramp-picker").attr("color-ramp-name"), K = o,
                C = K.colorRamp.getColor(N);
            C = C ? C : K.fullColorRamp;
            var Q = this.$("#category-panel .marker-size-picker").val(),
                I = this.$("#category-panel .marker-opacity-picker").val(),
                E = this.$("#category-panel .outline-color-picker").val(),
                H = this.$("#category-panel .outline-width-picker").val(),
                D = this.$("#category-panel .outline-opacity-picker").val(),
                O = this.$("#category-panel .label-color-picker").val(),
                M = this.$("#category-panel .label-field-picker").find("option:selected"),
                P = 0 == M.index() ? null : M.val(), L = this.$("#category-panel .label-font-picker").val(),
                F = this.$("#category-panel .label-size-picker").val(),
                B = this.$("#category-panel .category-field-picker").val(),
                z = this.$("#category-panel .number-year-picker").val();
            var G = this.$(".chk-toggle-animate").prop("checked"), J = this.$(".time-field-picker").val();
            var w = this.$(".time-segment-picker").val(), q = this.$(".time-duration-picker").val();
            var x = this.$(".chk-time-accumulate").prop("checked");
            var A = j.MarkerCategoryConfig({
                colors: C,
                markerSize: parseFloat(Q),
                markerOpacity: parseFloat(I),
                outlineColor: E,
                outlineWidth: parseFloat(H),
                outlineOpacity: parseFloat(D),
                labelColor: O,
                labelField: P,
                labelFont: L,
                labelSize: parseFloat(F),
                fieldName: B,
                labelYear: z == "all" ? "all" : Number(z),
                animated: G,
                timeField: J,
                frameCount: parseInt(w),
                duration: parseInt(q),
                timeAccumulate: x
            });
            return A
        },
        createHeatConfig: function () {
            var J, G = o;
            J = this.$("#heat-panel #heat-size-picker").val();
            var E = this.$("#heat-panel #heat-opacity-picker").val(),
                A = this.$("#heat-panel #input-heat-top-value").val(),
                D = this.$("#heat-panel #heat-weight-field-picker").val(),
                w = this.$("#heat-panel .number-year-picker").val();
            D = "无" == D ? void 0 : D;
            var z = this.$("#heat-panel #heat-color-ramp-picker").attr("color-ramp-name"),
                K = G.heatColorRamp.getColor(z);
            K = K ? K : G.defaultHeatColor;
            var I = this.$(".chk-toggle-animate").prop("checked"), L = this.$(".time-field-picker").val();
            I || (L = void 0);
            var H = this.$(".time-segment-picker").val(), B = this.$(".time-duration-picker").val();
            var C = this.$(".chk-toggle-animate").prop("checked"), F = this.$(".time-field-picker").val();
            var t = this.$(".time-segment-picker").val(), q = this.$(".time-duration-picker").val();
            var u = this.$(".chk-time-accumulate").prop("checked");
            var x = j.MarkerHeatConfig({
                heatSize: J,
                heatOpacity: E,
                heatTopValue: A,
                weightField: D,
                colors: K,
                animated: I,
                timeField: L,
                frameCount: parseInt(H),
                duration: parseInt(B),
                labelYear: w == "all" ? "all" : Number(w),
                animated: C,
                timeField: F,
                frameCount: parseInt(t),
                duration: parseInt(q),
                timeAccumulate: u
            });
            return x
        },
        createIntensityConfig: function () {
            var L = o;
            var I = this.$("#intensity-panel .intensity-field-picker").val();
            var F = this.$("#intensity-panel .number-year-picker").val();
            var z = this.$("#intensity-panel .intensity-corrfield-picker").val();
            var x = this.$("#intensity-panel #input-intensity-top-value").val();
            var A = this.$("#intensity-panel .intensity-corrcount-picker").val();
            var P = this.$("#intensity-panel #intensity-color-ramp-picker").attr("color-ramp-name");
            var N = L.heatColorRamp.getColor(P);
            N = N ? N : L.defaultHeatColor;
            var K = this.$("#intensity-panel .marker-color-picker").val();
            var E = this.$("#intensity-panel .marker-opacity-picker").val();
            var q = this.$("#intensity-panel .lineWidth-width-picker").val();
            var J = this.$(".chk-toggle-animate").prop("checked"), M = this.$(".time-field-picker").val();
            var u = this.$(".time-segment-picker").val(), s = this.$(".time-duration-picker").val();
            var y = this.$(".chk-time-accumulate").prop("checked");
            var B = this.$("#intensity-panel .intensity-displayWay-picker").val();
            var O = this.$("#intensity-panel .marker-color-curve-picker").val();
            var t = this.$("#intensity-panel #intensity-opacity-curve-picker").val();
            var C = this.$(".chk-toggle-dynamic").prop("checked");
            var w = this.$("#intensity-panel .marker-color-dynamic-picker").val();
            var H = this.$("#intensity-panel #intensity-opacity-dynamic-picker").val();
            var D = this.$("#intensity-panel .marker-size-dynamic-picker").val();
            var G = j.MarkerIntensityConfig({
                fieldName: I,
                labelYear: F == "all" ? "all" : Number(F),
                corrFieldName: z,
                weightField: x,
                colors: N,
                color: K,
                markerOpacity: E,
                corrFieldCount: A,
                lineWidth: parseFloat(q),
                corrData: [],
                animated: J,
                timeField: M,
                frameCount: parseInt(u),
                duration: parseInt(s),
                timeAccumulate: y,
                showWay: B,
                curveColor: O,
                curveOpt: t,
                dynamicCheck: C,
                dynamicColor: w,
                dynamicOpt: H,
                dynamicSize: D
            });
            return G
        },
        initSimple: function () {
            var s = this.model.get("config"), D = o, H = D.defaultMarkerColor, E = D.defaultMarkerSize,
                y = D.defaultMarkerOpacity, K = D.defaultOutlineColor, t = D.defaultOutlineOpacity,
                I = D.defaultOutlineWidth, J = D.defaultLabelColor, w = D.defaultLabelFont, x = D.defaultLabelSize,
                u = D.defaultBlendingMode, A = !1, G = !1, C = void 0, B = D.defaultTimeSegment,
                F = D.defaultTimeDuration, q = !1;
            if (s.type == D.configTypes.MARKER_SIMPLE && (H = s.markerColor, y = s.markerOpacity, E = s.markerSize, K = s.outlineColor, t = s.outlineOpacity, defaultOutlineWidth = s.outlineWidth, J = s.labelColor ? s.labelColor : J, w = s.labelFont, x = s.labelSize, u = s.blendingMode, A = !0, G = this.model.get("animated"), G && (C = this.model.get("timeField"), B = this.model.get("frameCount"), F = this.model.get("duration"), q = this.model.get("timeAccumulate"))), this.$("#simple-panel .marker-color-picker").append(this.colorPickerTemplate({
                colors: D.colors,
                defaultColor: H
            })), this.$("#simple-panel .marker-size-picker").append(this.valuePickerTemplate({
                values: D.markerSizes,
                defaultValue: E
            })), this.$("#simple-panel .marker-opacity-picker").append(this.valuePickerTemplate({
                values: D.opacities,
                defaultValue: y
            })), this.$("#simple-panel .outline-color-picker").append(this.colorPickerTemplate({
                colors: D.colors,
                defaultColor: K
            })), this.$("#simple-panel .outline-width-picker").append(this.valuePickerTemplate({
                values: D.lineWidths,
                defaultValue: I
            })), this.$("#simple-panel .outline-opacity-picker").append(this.valuePickerTemplate({
                values: D.opacities,
                defaultValue: t
            })), this.$("#simple-panel .label-color-picker").append(this.colorPickerTemplate({
                colors: D.colors,
                defaultColor: J
            })), this.$("#simple-panel .label-font-picker").append(this.namePickerTemplate({
                values: D.labelFonts,
                defaultValue: w
            })), this.$("#simple-panel .label-size-picker").append(this.valuePickerTemplate({
                values: D.labelSizes,
                defaultValue: x
            })), this.$("#simple-panel .marker-color-picker").colorselector({
                context: this,
                initColor: H,
                callback: this.markerColorChange
            }), this.$("#simple-panel .outline-color-picker").colorselector({
                context: this,
                initColor: K,
                callback: this.outlineColorChange
            }), this.$("#simple-panel .label-color-picker").colorselector({
                context: this,
                initColor: J,
                callback: this.labelColorChange
            }), this.$(".time-segment-picker").append(this.valuePickerTemplate({
                values: D.timeSegments,
                defaultValue: B
            })), this.$(".time-duration-picker").append(this.valuePickerTemplate({
                values: D.timeDurations,
                defaultValue: F
            })), this.$("#simple-marker-blending-mode-picker").append(this.blendingPickerTemplate({
                values: D.blendingModeTypes,
                initValue: u
            })), G && this.fillAnimateSettings(B, F, q, C), A) {
                var z = this.$("#simple-template");
                this.changePanel(z)
            }
        },
        initChoropleth: function () {
            var s = this.model.get("config"), M = o, u = M.defaultColorRamp, O = M.defaultMarkerSize,
                C = M.defaultMarkerOpacity, S = M.defaultOutlineColor, t = M.defaultOutlineOpacity,
                P = M.defaultOutlineWidth, R = M.defaultLabelColor, z = M.defaultLabelFont, B = M.defaultLabelSize,
                L = M.defaultBucketType, G = M.defaultBucketCount, y = M.defaultBlendingMode, K = !1, T = !1,
                Q = M.defaultLegendTitle, J = M.defaultLegendOrder, I = !1, F = void 0, H = M.defaultTimeSegment,
                N = M.defaultTimeDuration, A = !1;
            if (s.type == M.configTypes.MARKER_CHOROPLETH) {
                if (C = s.markerOpacity, O = s.markerSize, S = s.outlineColor, t = s.outlineOpacity, P = s.outlineWidth, R = s.labelColor ? s.labelColor : R, z = s.labelFont, B = s.labelSize, L = s.bucketType, G = s.bucketCount, u = s.colors, y = s.blendingMode, K = !0, "manual" == L && (this.$("#choropleth-panel .bucket-count-picker").addClass("hide"), this.$("#choropleth-panel .btn-config-breaks").removeClass("hide")), T = this.model.get("showLegend")) {
                    var x = this.model.get("legendTitle");
                    Q = x ? x : this.model.get("dataName");
                    var q = this.model.get("legendOrder");
                    J = q ? q : M.defaultLegendOrder
                }
            }
            var D = M.colorRamp.getColorName(u);
            if (D = D ? D : M.defaultColorRampName, this.$("#choropleth-panel .marker-color-ramp-picker").ghColorRamp({
                onChange: this.onChoroplethColorRampChange,
                colors: M.colorRamp.colors,
                defaultColorRamp: D,
                context: this
            }), this.$("#choropleth-panel .marker-size-picker").append(this.valuePickerTemplate({
                values: M.markerSizes,
                defaultValue: O
            })), this.$("#choropleth-panel .marker-opacity-picker").append(this.valuePickerTemplate({
                values: M.opacities,
                defaultValue: C
            })), this.$("#choropleth-panel .outline-color-picker").append(this.colorPickerTemplate({
                colors: M.colors,
                defaultColor: S
            })), this.$("#choropleth-panel .outline-width-picker").append(this.valuePickerTemplate({
                values: M.lineWidths,
                defaultValue: P
            })), this.$("#choropleth-panel .outline-opacity-picker").append(this.valuePickerTemplate({
                values: M.opacities,
                defaultValue: t
            })), this.$("#choropleth-panel .label-color-picker").append(this.colorPickerTemplate({
                colors: M.colors,
                defaultColor: R
            })), this.$("#choropleth-panel .label-font-picker").append(this.namePickerTemplate({
                values: M.labelFonts,
                defaultValue: z
            })), this.$("#choropleth-panel .label-size-picker").append(this.valuePickerTemplate({
                values: M.labelSizes,
                defaultValue: B
            })), this.$("#choropleth-panel .bucket-type-picker").append(this.namePickerTemplate({
                values: M.bucketTypes,
                defaultValue: L
            })), this.$("#choropleth-panel .bucket-count-picker").append(this.valuePickerTemplate({
                values: M.bucketCounts,
                defaultValue: G
            })), this.$("#choropleth-panel .outline-color-picker").colorselector({
                context: this,
                initColor: S,
                callback: this.outlineColorChange
            }), this.$("#choropleth-panel .label-color-picker").colorselector({
                context: this,
                initColor: R,
                callback: this.labelColorChange
            }), this.$("#choropleth-marker-blending-mode-picker").append(this.blendingPickerTemplate({
                values: M.blendingModeTypes,
                initValue: y
            })), I && this.fillAnimateSettings(H, N, A, F), K) {
                var E = this.$("#choropleth-template");
                this.changePanel(E), this.$(".legend-setting-wrapper").removeClass("disabled"), this.trigger("initLegend", this.model), T && (this.$(".chk-toggle-legend").prop("checked", "checked"), this.$("#input-legend-title").val(Q), this.$("input[value=" + J + "]").prop("checked", "checked"), this.toggleLegend(!0))
            }
        },
        initBubble: function () {
            var T = this.model.get("config"), Q = o, D = Q.defaultBubbleMinSize, q = Q.defaultBubbleMaxSize,
                s = Q.defaultBubbleMarkerColor, E = Q.defaultMarkerOpacity, X = Q.defaultOutlineColor,
                t = Q.defaultOutlineOpacity, V = Q.defaultOutlineWidth, W = Q.defaultLabelColor, z = Q.defaultLabelFont,
                C = Q.defaultLabelSize, P = Q.defaultBucketType, H = Q.defaultBucketCount, M = !1, Y = !1,
                K = Q.defaultLegendTitle, B = Q.defaultLegendOrder, w = Q.defaultColorRamp, F = "single", U = void 0,
                N = void 0, A = !1, u = void 0, J = Q.defaultTimeSegment, R = Q.defaultTimeDuration, I = !1;
            if (T.type == Q.configTypes.MARKER_BUBBLE) {
                if (w = T.colors ? T.colors : w, s = T.markerColor, E = T.markerOpacity, D = T.minSize, q = T.maxSize, X = T.outlineColor, t = T.outlineOpacity, V = T.outlineWidth, W = T.labelColor ? T.labelColor : W, z = T.labelFont, C = T.labelSize, P = T.bucketType, H = T.bucketCount, M = !0, F = T.fillMode, U = T.colorBucketType ? T.colorBucketType : U, N = T.colorBucketCount ? T.colorBucketCount : N, Y = this.model.get("showLegend"), "manual" == P && (this.$(".bucket-count-picker").addClass("hide"), this.$(".btn-config-breaks").removeClass("hide")), "manual" == U && (this.$("#bubble-color-bucket-count-picker").addClass("hide"), this.$("#btn-bubble-color-config-breaks").removeClass("hide")), Y) {
                    var x = this.model.get("legendTitle");
                    K = x ? x : this.model.get("dataName");
                    var L = this.model.get("legendOrder");
                    B = L ? L : Q.defaultLegendOrder
                }
            }
            this.$("#bubble-panel .marker-color-picker").append(this.colorPickerTemplate({
                colors: Q.colors,
                defaultColor: s
            })), this.$("#bubble-panel .marker-min-size-picker").append(this.valuePickerTemplate({
                values: Q.bubbleSizes,
                defaultValue: D
            })), this.$("#bubble-panel .marker-max-size-picker").append(this.valuePickerTemplate({
                values: Q.bubbleSizes,
                defaultValue: q
            })), this.$("#bubble-panel .marker-opacity-picker").append(this.valuePickerTemplate({
                values: Q.opacities,
                defaultValue: E
            })), this.$("#bubble-panel .outline-color-picker").append(this.colorPickerTemplate({
                colors: Q.colors,
                defaultColor: X
            })), this.$("#bubble-panel .outline-width-picker").append(this.valuePickerTemplate({
                values: Q.lineWidths,
                defaultValue: V
            })), this.$("#bubble-panel .outline-opacity-picker").append(this.valuePickerTemplate({
                values: Q.opacities,
                defaultValue: t
            })), this.$("#bubble-panel .label-color-picker").append(this.colorPickerTemplate({
                colors: Q.colors,
                defaultColor: W
            })), this.$("#bubble-panel .label-font-picker").append(this.namePickerTemplate({
                values: Q.labelFonts,
                defaultValue: z
            })), this.$("#bubble-panel .label-size-picker").append(this.valuePickerTemplate({
                values: Q.labelSizes,
                defaultValue: C
            })), this.$("#bubble-panel .bucket-type-picker").append(this.namePickerTemplate({
                values: Q.bucketTypes,
                defaultValue: P
            })), this.$("#bubble-panel .bucket-count-picker").append(this.valuePickerTemplate({
                values: Q.bucketCounts,
                defaultValue: H
            })), this.$("#bubble-panel .marker-color-picker").colorselector({
                context: this,
                initColor: s,
                callback: this.markerColorChange
            }), this.$("#bubble-panel .outline-color-picker").colorselector({
                context: this,
                initColor: X,
                callback: this.outlineColorChange
            }), this.$("#bubble-panel .label-color-picker").colorselector({
                context: this,
                initColor: W,
                callback: this.labelColorChange
            });
            var S = Q.colorRamp.getColorName(w);
            if (S = S ? S : Q.defaultColorRampName, this.$("#bubble-panel .marker-color-ramp-picker").ghColorRamp({
                onChange: this.onBubbleColorRamp,
                colors: Q.colorRamp.colors,
                defaultColorRamp: S,
                context: this
            }), this.$("input[name=" + this.model.cid + "-radio-fill-mode][value=" + F + "]").prop("checked", "checked"), this.$("#bubble-panel #bubble-color-bucket-type-picker").append(this.namePickerTemplate({
                values: Q.bucketTypes,
                defaultValue: U
            })), this.$("#bubble-panel #bubble-color-bucket-count-picker").append(this.valuePickerTemplate({
                values: Q.bucketCounts,
                defaultValue: N
            })), "single" == F ? (this.$("#bubble-multi-fill-wrapper").addClass("hide"), this.$("#bubble-single-fill-wrapper").removeClass("hide")) : "multi" == F && (this.$("#bubble-multi-fill-wrapper").removeClass("hide"), this.$("#bubble-single-fill-wrapper").addClass("hide")), A && this.fillAnimateSettings(J, R, I, u), M) {
                var G = this.$("#bubble-template");
                this.changePanel(G), this.$(".legend-setting-wrapper").removeClass("disabled"), this.trigger("initLegend", this.model), Y && (this.$(".chk-toggle-legend").prop("checked", "checked"), this.$("#input-legend-title").val(K), this.$("input[value=" + B + "]").prop("checked", "checked"), this.toggleLegend(!0))
            }
        },
        initCategory: function () {
            var t = this.model.get("config"), H = o, w = H.fullColorRamp, J = H.defaultMarkerSize,
                B = H.defaultMarkerOpacity, R = H.defaultOutlineColor, u = H.defaultOutlineOpacity,
                N = H.defaultOutlineWidth, P = H.defaultLabelColor, z = H.defaultLabelFont, A = H.defaultLabelSize,
                y = H.defaultBlendingMode, Q = !1, K = !1, O = H.defaultLegendTitle, G = H.defaultLegendOrder, L = !1,
                s = void 0, F = H.defaultTimeSegment, I = H.defaultTimeDuration, M = !1;
            if (t.type == H.configTypes.MARKER_CATEGORY) {
                if (w = t.colors, B = t.markerOpacity, J = t.markerSize, R = t.outlineColor, u = t.outlineOpacity, N = t.outlineWidth, y = t.blendingMode, P = t.labelColor ? t.labelColor : P, z = t.labelFont, A = t.labelSize, Q = !0, K = this.model.get("showLegend")) {
                    var E = this.model.get("legendTitle");
                    O = E ? E : this.model.get("dataName");
                    var q = this.model.get("legendOrder");
                    G = q ? q : H.defaultLegendOrder
                }
            }
            var x = H.colorRamp.getColorName(w);
            if (x = x ? x : H.defaultColorRampName, this.$("#category-panel .marker-color-ramp-picker").ghColorRamp({
                onChange: this.onCategoryColorRampChange,
                colors: H.colorRamp.colors,
                defaultColorRamp: x,
                context: this
            }), this.$("#category-panel .marker-size-picker").append(this.valuePickerTemplate({
                values: H.markerSizes,
                defaultValue: J
            })), this.$("#category-panel .marker-opacity-picker").append(this.valuePickerTemplate({
                values: H.opacities,
                defaultValue: B
            })), this.$("#category-panel .outline-color-picker").append(this.colorPickerTemplate({
                colors: H.colors,
                defaultColor: R
            })), this.$("#category-panel .outline-width-picker").append(this.valuePickerTemplate({
                values: H.lineWidths,
                defaultValue: N
            })), this.$("#category-panel .outline-opacity-picker").append(this.valuePickerTemplate({
                values: H.opacities,
                defaultValue: u
            })), this.$("#category-panel .label-color-picker").append(this.colorPickerTemplate({
                colors: H.colors,
                defaultColor: P
            })), this.$("#category-panel .label-font-picker").append(this.namePickerTemplate({
                values: H.labelFonts,
                defaultValue: z
            })), this.$("#category-panel .label-size-picker").append(this.valuePickerTemplate({
                values: H.labelSizes,
                defaultValue: A
            })), this.$("#category-panel .outline-color-picker").colorselector({
                context: this,
                initColor: R,
                callback: this.outlineColorChange
            }), this.$("#category-panel .label-color-picker").colorselector({
                context: this,
                initColor: P,
                callback: this.labelColorChange
            }), this.$("#category-marker-blending-mode-picker").append(this.blendingPickerTemplate({
                values: H.blendingModeTypes,
                initValue: y
            })), L && this.fillAnimateSettings(F, I, M, s), Q) {
                this.updateCategoryBuckets();
                var D = this.$("#category-template");
                this.changePanel(D), this.$(".legend-setting-wrapper").removeClass("disabled"), this.trigger("initLegend", this.model), K && (this.$(".chk-toggle-legend").prop("checked", "checked"), this.$("#input-legend-title").val(O), this.$("input[value=" + G + "]").prop("checked", "checked"), this.toggleLegend(!0))
            }
        },
        initHeat: function () {
            var s = this.model.get("config"), y = o, A = y.defaultHeatSizeUnit, x = y.defaultHeatPixelSize,
                D = y.defaultHeatMinOpacity, z = y.defaultHeatMaxOpacity, C = y.defaultHeatTopValue,
                H = y.defaultHeatWeightField, w = y.defaultHeatColor, F = !1, B = void 0, G = !1,
                t = y.defaultTimeSegment, E = y.defaultTimeDuration, I = !1;
            s.type == y.configTypes.MARKER_HEAT && (A = s.heatSizeUnit, x = s.heatSize, D = s.heatMinOpacity ? s.heatMinOpacity : D, z = s.heatMaxOpacity ? s.heatMaxOpacity : z, C = s.heatTopValue, H = s.weightField ? s.weightField : H, w = s.colors ? s.colors : y.defaultHeatColor, G = !0, F = s.animated, t = s.frameCount, E = s.duration, t = s.timeAccumulate, B = s.timeField);
            var q = y.heatColorRamp.getColorName(w);
            if (q = q ? q : y.defaultHeatColorName, this.$("#heat-panel #heat-color-ramp-picker").ghColorRamp({
                onChange: this.onHeatColorRampChange,
                colors: y.heatColorRamp.colors,
                defaultColorRamp: q,
                context: this
            }), this.$("#heat-panel #heat-size-picker").append(this.valuePickerTemplate({
                values: y.heatSizes,
                defaultValue: x
            })), this.$("#heat-panel #heat-opacity-picker").append(this.valuePickerTemplate({
                values: y.opacities,
                defaultValue: z
            })), this.$("#heat-panel #heat-unit-picker").val(A), this.$("#heat-panel #input-heat-top-value").val(C), this.$("#heat-panel #heat-weight-field-picker").val(H), "pixel" == A ? (this.$("#heat-panel #heat-size-picker").val(x), this.$("#heat-panel #input-heat-size").val(y.defaultHeatMapSize), this.$("#heat-panel #heat-unit-wrapper").removeClass("pixel map").addClass("pixel")) : "map" == A && (this.$("#heat-panel #input-heat-size").val(x), this.$("#heat-panel #heat-size-picker").val(y.defaultHeatPixelSize), this.$("#heat-panel #heat-unit-wrapper").removeClass("pixel map").addClass("map")), F && this.fillAnimateSettings(t, E, t, B), G) {
                this.$(".animate-setting-wrapper").removeClass("disabled");
                var u = this.$("#heat-template");
                this.changePanel(u)
            }
        },
        initIntensity: function () {
            var s = this.model.get("config"), x = o;
            var A = x.defaultIntensityTopValue, z = x.defaultHeatColor, u = x.defaultlineWidth,
                t = x.defaultMarkerColor, w = x.defaultMarkerOpacity;
            var y = x.defaultIntensityDisplayWay;
            var q = x.heatColorRamp.getColorName(z);
            if (q = q ? q : x.defaultHeatColorName, this.$("#intensity-panel #intensity-color-ramp-picker").ghColorRamp({
                onChange: this.onIntensityColorRampChange,
                colors: x.heatColorRamp.colors,
                defaultColorRamp: q,
                context: this
            }), this.$("#intensity-panel .color-picker").append(this.colorPickerTemplate({
                colors: x.colors,
                defaultColor: t
            })), this.$("#intensity-panel .marker-color-picker").colorselector({
                context: this,
                initColor: t,
                callback: this.intensityColorChange
            }), this.$("#intensity-panel .marker-opacity-picker").append(this.valuePickerTemplate({
                values: x.opacities,
                defaultValue: w
            })), this.$("#intensity-panel .lineWidth-width-picker").append(this.valuePickerTemplate({
                values: x.defaultIntensityLineWidth,
                defaultValue: u
            })), this.$("#intensity-panel .intensity-displayWay-picker").append(this.namePickerTemplate({
                values: x.intensityDisplayWay,
                defaultValue: y
            })), this.$("#intensity-panel .marker-color-curve-picker").colorselector({
                context: this,
                initColor: t,
                callback: this.intensityCurveColorChange
            }), this.$("#intensity-panel .marker-color-dynamic-picker").colorselector({
                context: this,
                initColor: t,
                callback: this.intensityDynamicColorChange
            }), this.$("#intensity-panel .marker-size-dynamic-picker").append(this.valuePickerTemplate({
                values: x.intensityDynamicSize,
                defaultValue: x.defaultIntensityDynamicSize
            }))) {
            }
            this.$("#intensity-panel #input-intensity-top-value").val(A)
        },
        intensityDynamicChangeHanlder: function (t) {
            var t = this.$(".chk-toggle-dynamic"), s = t.prop("checked");
            var q = this.model.get("config");
            q.dynamicCheck = s;
            var u = this.model.get("visible");
            if (s && u) {
                this.$(".dynamic-setting").removeClass("hide");
                this.trigger("mapUpdate", this.model)
            } else {
                this.trigger("hideTimeSlider", this.model), this.$(".dynamic-setting").addClass("hide"), (q.dynamicCheck = !1, this.trigger("mapUpdate", this.model))
            }
        },
        intensityDisplayWayChangeHanlder: function (t) {
            var q = $(t.currentTarget), s = q.val(), u = this.model.get("config");
            u.showWay = s;
            this.$(".wayClass").addClass("hide");
            this.$("." + s + "Class").removeClass("hide");
            this.trigger("mapUpdate", this.model)
        },
        intensityDynamicSizeChangeHanlder: function (t) {
            var q = $(t.currentTarget), s = parseFloat(q.val()), u = this.model.get("config");
            u.dynamicSize = s;
            this.trigger("mapUpdate", this.model)
        },
        intensityCurveColorChange: function (q) {
            var s = this.model.get("config");
            q != s.curveColor && (s.curveColor = q, this.trigger("mapUpdate", this.model))
        },
        intensityDynamicColorChange: function (q) {
            var s = this.model.get("config");
            q != s.dynamicColor && (s.dynamicColor = q, this.trigger("mapUpdate", this.model))
        },
        intensityColorChange: function (q) {
            var s = this.model.get("config");
            q != s.color && (s.color = q, this.trigger("mapUpdate", this.model))
        },
        onIntensityColorRampChange: function (q) {
            var s = this.model.get("config");
            s.colors = q.colors, this.trigger("mapUpdate", this.model)
        },
        intensityFieldChange: function (t) {
            var q = $(t.currentTarget), s = q.val(), u = this.model.get("config");
            u.fieldName = s;
            this.trigger("mapUpdate", this.model);
            this.coorData()
        },
        intensityCorrfieldChange: function (t) {
            var q = $(t.currentTarget), s = q.val(), u = this.model.get("config");
            u.corrFieldName = s;
            this.trigger("mapUpdate", this.model);
            this.coorData()
        },
        intensityTopValuePress: function (q) {
            13 == q.keyCode && this.intensityTopValueChange(q)
        },
        intensityTopValueChange: function (s) {
            var q = this.model.get("config"), t = parseInt($(s.currentTarget).val());
            q.weightField = t, this.trigger("mapUpdate", this.model)
        },
        lineWidthChange: function (q) {
            var t = this.model.get("config");
            var s = parseFloat($(q.currentTarget).val());
            t.lineWidth = s;
            this.trigger("mapUpdate", this.model)
        },
        corrCountChange: function (t) {
            var q = $(t.currentTarget), s = q.val(), w = this.model.get("config");
            w.corrFieldCount = s;
            if (s == "") {
                this.$("#input-intensity-top-value").parent().addClass("hide");
                this.$("#intensity-panel #intensity-color-ramp-picker").addClass("hide");
                this.$("#intensity-panel .marker-color-picker").removeClass("hide");
                this.$("#intensity-panel .marker-color-picker").parent().find(".dropdown.dropdown-colorselector").removeClass("hide")
            } else {
                this.$("#input-intensity-top-value").parent().removeClass("hide");
                this.$("#intensity-panel #intensity-color-ramp-picker").removeClass("hide");
                this.$("#intensity-panel .marker-color-picker").addClass("hide");
                this.$("#intensity-panel .marker-color-picker").parent().find(".dropdown.dropdown-colorselector").addClass("hide");
                var u = parseInt(this.$("#input-intensity-top-value").val());
                w.weightField = u
            }
            this.trigger("mapUpdate", this.model);
            this.coorData()
        },
        coorData: function () {
            var t = this.model.get("config");
            var z = this.model.get("data"), A = t.labelYear, u = t.corrFieldName, s = t.fieldName, y = t.corrFieldCount;
            var B = [], C = [], x = [];
            $.each(z, function (D, E) {
                $.each(E.indexdata, function (H, F) {
                    if (F.indexyear == A || A == "" || A == "all") {
                        var G = {"lat": E.lat, "lng": E.lng, "title": E.title, "elementid": E.elementid};
                        G[s] = F.data[s];
                        G[u] = F.data[u];
                        G[y] = F.data[y];
                        B.push(G);
                        return false
                    }
                })
            });
            var q = [];
            $.each(B, function (E, F) {
                var D = F[u].split(",");
                $.each(D, function (H, G) {
                    $.each(B, function (K, J) {
                        if (J[s] == G) {
                            if (F.lng == J.lng && F.lat == J.lat) {
                                return true
                            }
                            var I = [[Number(F.lng), Number(F.lat)], [Number(J.lng), Number(J.lat)]];
                            x.push({lnglat: I, countField: F[y]});
                            return true
                        }
                    })
                })
            });
            if (x.length == 0) {
                var w = f;
                w.showWarning("选择的数据没有关联关系！")
            }
            t.corrData = x;
            this.trigger("mapUpdate", this.model)
        },
        toggleLegendHandler: function (t) {
            var s = $(t.currentTarget), q = s.prop("checked");
            this.model.set({showLegend: q}), this.toggleLegend(q)
        },
        toggleLegend: function (t) {
            var u = this.$(".chk-toggle-legend"), q = this.model.get("visible");
            if (u) {
                var s = u.prop("checked");
                s && t && q ? this.trigger("showLegend", this.model) : this.trigger("hideLegend", this.model), this.toggleLegendSettings(s)
            }
        },
        toggleLegendSettings: function (q) {
            q ? this.$(".legend-setting-wrapper").removeClass("unchecked") : this.$(".legend-setting-wrapper").addClass("unchecked")
        },
        legendTitleChangeHandler: function (w) {
            var u = $(w.currentTarget), s = o, q = u.val().trim();
            q = q ? q : s.defaultLegendTitle, this.model.set({legendTitle: q});
            this.updateLegend()
        },
        legendOrderChangeHandler: function (t) {
            var u = $(t.currentTarget).val();
            if (this.model.get("config").type == "marker-category") {
                this.model.get("config").fieldColors.reverse();
                this.updateCategoryBuckets()
            } else {
                if (this.model.get("config").type == "marker-choropleth") {
                    var w = this.model.get("config").breaks, q = [];
                    $.each(w, function (x, y) {
                        q.push(y.color)
                    });
                    q.reverse();
                    $.each(this.model.get("config").breaks, function (x, y) {
                        y.color = q[x + 1]
                    })
                } else {
                    if (this.model.get("config").type == "marker-bubble") {
                        var w = this.model.get("config").breaks, s = this.model.get("config").colorBreaks, q = [];
                        $.each(w, function (x, y) {
                            q.push(y.markerSize)
                        });
                        q.reverse();
                        $.each(this.model.get("config").breaks, function (x, y) {
                            y.markerSize = q[x + 1]
                        });
                        if (s) {
                            $.each(s, function (x, y) {
                                q.push(y.color)
                            });
                            q.reverse();
                            $.each(this.model.get("config").colorBreaks, function (x, y) {
                                y.color = q[x + 1]
                            })
                        }
                    }
                }
            }
            this.model.set({legendOrder: u}), this.updateLegend();
            this.trigger("mapUpdate", this.model)
        },
        updateLegend: function () {
            this.trigger("updateLegend", this.model)
        },
        toggleAnimationTimeshaft: function () {
            var B = this.$(".chk-toggle-animate"), t = B.prop("checked"), y = o, x = this.model.get("years");
            if (t) {
                if (x.length == 0) {
                    return f.showWarning("该数据没有年份数据，无法进行时态播放！"), void B.prop("checked", !1)
                }
                if (this.model.get("config").type == "marker-simple" && x.length == 1) {
                    return f.showWarning("该数据只有一个年份，不能在散点图类型下进行展示！"), void B.prop("checked", !1)
                }
                var w = $(".chk-toggle-animate");
                var A = 0;
                $.each(w, function (C, D) {
                    if ($(D).prop("checked") == true) {
                        A++
                    }
                });
                if (A > 1) {
                    return f.showWarning("只能有一个数据开启时态功能"), void B.prop("checked", !1)
                }
            }
            var q = this.model.get("config");
            q.animated = t;
            var s = this.model.get("visible");
            if (t && s) {
                this.$("#animate-setting").removeClass("hide");
                var z = this.$("#animate-setting .time-field-picker").val();
                if (q.type == y.configTypes.MARKER_HEAT) {
                    z ? (q.timeField = z, this.trigger("mapUpdate", this.model)) : q.animated = !1
                } else {
                    if (z) {
                        var u = this.$(".time-segment-picker").val();
                        u = parseInt(u), q.animated = !0, q.timeField = z, q.frameCount = u;
                        this.fetchTimeBreaks()
                    } else {
                        q.animated = !1
                    }
                }
                this.trigger("mapUpdate", this.model);
                this.timeFieldRenderChange()
            } else {
                this.trigger("hideTimeSlider", this.model), setProgressTime.timeShaft(false), this.$("#animate-setting").addClass("hide"), q.type == y.configTypes.MARKER_HEAT ? q.timeField = void 0 : (q.animated = !1, this.trigger("mapUpdate", this.model))
            }
        },
        timeFieldChangeTimeshaft: function (t) {
            var s = $(t.currentTarget), u = s.val(), q = this.model.get("config");
            if (u == "year" && (q.labelYear != "all")) {
                return f.showWarning("年份选择是单个年份无法进行年份播放！")
            }
            q.timeField = u;
            this.fetchTimeBreaks();
            this.trigger("mapUpdate", this.model);
            setProgressTime.timeShaft(true, this.model.attributes, this.model.cid)
        },
        timeDurationChangeTimeshaft: function (s) {
            var t = $(s.currentTarget), u = parseFloat(t.val()), q = this.model.get("config");
            q.duration = u;
            setProgressTime.timeShaft(true, this.model.attributes, this.model.cid)
        },
        timeSegmentChangeTimeshaft: function (s) {
            var t = $(s.currentTarget), u = t.val(), q = this.model.get("config");
            q.frameCount = parseInt(u);
            this.trigger("mapUpdate", this.model);
            this.fetchTimeBreaks();
            setProgressTime.timeShaft(true, this.model.attributes, this.model.cid)
        },
        timeAccumulateChangeTimeshaft: function (s) {
            var t = $(s.currentTarget), u = t.prop("checked"), q = this.model.get("config");
            q.timeAccumulate = u;
            this.trigger("mapUpdate", this.model)
        },
        timeFieldRenderChange: function () {
            var u = this.model.get("config"), s = this.model.get("fields");
            if (!u.animated) {
                return
            }
            var t = {};
            var q = [{name: "年份", code: "year"}];
            var w = u.fieldName;
            if (u.type == "marker-simple" || (u.type == "marker-heat")) {
                w = "year"
            } else {
                $.each(s, function (x, y) {
                    if (y.code == u.fieldName) {
                        t["name"] = y.name;
                        t["code"] = y.code;
                        return true
                    }
                });
                q.push(t)
            }
            this.$(".time-field-picker").empty();
            this.$(".time-field-picker").append(this.namePickerTemplate({values: q, defaultValue: w}));
            u.timeField = w;
            this.fetchTimeBreaks();
            setProgressTime.timeShaft(true, this.model.attributes, this.model.cid)
        },
        fetchTimeBreaks: function () {
            var t = this.model.get("config");
            var y = t.frameCount, z = this.model.get("years");
            if (t.timeField == "year") {
                var E = [];
                $.each(z, function (F, G) {
                    E.push(G.code)
                });
                E = E.sort(function (G, F) {
                    return G - F
                });
                var w = this.dataSector(E, y - 1, "equalcount");
                if (!w.isMonodrome) {
                    t.timebreaks = w.ranges
                } else {
                    f.showWarning("选择时态段数大于最大段数" + E.length + "，请重新选择！")
                }
            } else {
                var B = false;
                $.each(this.model.get("fields"), function (F, G) {
                    if (G.code == t.timeField && G.type.toLowerCase() == "text") {
                        B = true;
                        return true
                    }
                });
                if (B) {
                    return f.showWarning("该指标不支持时态浏览，请重新选择！")
                }
                var C = this.model.get("data"), x = [];
                $(C).each(function (F, G) {
                    $.each(G.indexdata, function (I, H) {
                        if (t.labelYear == "all" || t.labelYear == "") {
                            x.push(Number(H.data[t.timeField]))
                        } else {
                            if (Number(H.indexyear) == t.labelYear) {
                                x.push(Number(H.data[t.timeField]))
                            }
                        }
                    })
                });
                var s = x.sort(function (G, F) {
                    return G - F
                });
                var q = $.unique(s);
                var u = $.grep(q, function (G, F) {
                    return G < 0
                });
                var A = $.grep(q, function (G, F) {
                    return G == 0
                });
                var D = parseInt(y) > 1 && A > 0 ? parseInt(y) - 1 : parseInt(y);
                var w = this.dataSector(q, D, "equalcount");
                if (!w.isMonodrome) {
                    if (D < y) {
                        w.ranges.unshift("0")
                    }
                    t.timebreaks = w.ranges
                } else {
                    f.showWarning("选择时态段数大于最大段数" + (q.length - 1) + "，请重新选择！")
                }
            }
        },
    });
    PolygonConfigView = Backbone.View.extend({
        colorPickerTemplate: _.template($("#color-picker-template").html()),
        valuePickerTemplate: _.template($("#value-picker-template").html()),
        namePickerTemplate: _.template($("#name-picker-template").html()),
        nameCheckedTemplate: _.template($("#name-checked-template").html()),
        bucketTemplate: _.template($("#bucket-template").html()),
        events: {
            "click .btn-title-edit": "titleEditHandler",
            "keypress .title-editor": "titleEditorPressHandler",
            "click .btn-layer-up": "layerUp",
            "click .btn-layer-down": "layerDown",
            "click .btn-toggle-up": "toggleUp",
            "click .title-wrapper": "toggleUp",
            "click .btn-remove": "remove",
            "click .chk-layer-toggle": "toggleLayerClickHandler",
            "change .chk-layer-toggle": "toggleLayer",
            "click .template-thumb": "change",
            "change .fill-opacity-picker": "fillOpacityChange",
            "change .outline-width-picker": "outlineWidthChange",
            "change .outline-opacity-picker": "outlineOpacityChangeHandler",
            "change .label-field-picker": "labelFieldChange",
            "change .label-font-picker": "labelFontChange",
            "change .label-size-picker": "labelSizeChange",
            "change .bucket-type-picker": "bucketTypeChange",
            "change .bucket-count-picker": "bucketCountChange",
            "change .number-field-picker": "numberFieldChange",
            "change .category-field-picker": "categoryFieldChange",
            "change .chk-toggle-legend": "toggleLegendHandler",
            "input #input-legend-title": "legendTitleChangeHandler",
            "change .number-year-picker": "markerYearChange",
            "change .chk-toggle-animate": "toggleAnimationTimeshaft",
            "change .time-field-picker": "timeFieldChangeTimeshaft",
            "change .time-duration-picker": "timeDurationChangeTimeshaft",
            "change .time-segment-picker": "timeSegmentChangeTimeshaft",
            "change .chk-time-accumulate": "timeAccumulateChangeTimeshaft",
            "change .chk-toggle-cartogram": "toggleCartogramHandler",
            "change .cartogramType-picker": "cartogramTypeChangeHandler",
            "change .dataType-picker": "dataTypeChangeHandler",
            "change #cartogramFieldSelect": "cartogramFieldSelectChangeHandler",
            "click #cartogramFieldDiv input": "cartogramFieldDivChangeHandler",
            "change #cartogramYearSelect": "cartogramYearSelectChangeHandler",
            "click #cartogramYearDiv input": "cartogramYearDivChangeHandler",
            "change .subsection-field-picker": "subsectionFieldChangeHandler",
            "change .subsection-year-picker": "bucketYearChangeHandler",
            "change .cartogramBucket-count-picker": "bucketCountChangeHandler",
            "change .cartogram-min-size-picker": "cartogramMinSizeChangeHandler",
            "change .cartogram-max-size-picker": "cartogramMaxSizeChangeHandler",
        },
        configTable: {
            "simple-template": "simple-panel",
            "choropleth-template": "choropleth-panel",
            "category-template": "category-panel"
        },
        remove: function (q) {
            this.trigger("modelRemove", this.model)
        },
        titleEditHandler: function (x) {
            var w = $(x.currentTarget);
            if (w.hasClass("active")) {
                this.$(".title-wrapper").removeClass("editing"), w.removeClass("active")
            } else {
                w.addClass("active");
                var s = this.$(".title-wrapper");
                if (s.hasClass("editing")) {
                    return
                }
                s.addClass("editing"), this.$(".title-wrapper .title-editor").focus()
            }
            x.stopImmediatePropagation(), x.preventDefault();
            var u = this.$(".title-editor"), q = u.val().trim().length;
            this.$(".title-editor").selectRange(q, q)
        },
        titleEditorPressHandler: function (q) {
            13 == q.keyCode && this.titleChangeHandler(q)
        },
        titleChangeHandler: function (x) {
            var w = $(x.currentTarget), s = w.val().trim(), q = f;
            if (q.stringIsBlank(s)) {
                var u = this.$(".title-wrapper span").text();
                w.val(u)
            } else {
                this.$(".title-wrapper span").text(s), this.model.set({dataName: s})
            }
            this.$(".title-wrapper").removeClass("editing");
            $(".btn-title-edit").removeClass("active")
        },
        layerUp: function (s) {
            var q = $(this.el);
            q.insertBefore(q.prev(".data-layer")), this.trigger("layerUp", this.model), this.trigger("legendUp", this.model), s.stopImmediatePropagation()
        },
        layerDown: function (s) {
            var q = $(this.el);
            q.insertAfter(q.next(".data-layer")), this.trigger("layerDown", this.model), this.trigger("legendDown", this.model), s.stopImmediatePropagation()
        },
        initialize: function () {
            this.listenTo(this.model, "change:fields", this.fieldsChangeHandler);
            var q = $.proxy(this.legendOrderChangeHandler, this);
            this.$("input[name=" + this.model.cid + "-radio-legend-order]").on("change", q), this.fetchFieldValues()
        },
        init: function () {
            this.initSimple(), this.initChoropleth(), this.initCategory();
            var q = this.model.get("visible");
            q ? this.$("chk-layer-toggle").prop("checked", "checked") : (this.toggleUp(), this.$(".chk-layer-toggle").removeProp("checked"));
            this.fieldsChangeHandler();
            this.yearChangeHandler();
            this.trigger("mapUpdate", this.model)
        },
        toggleUp: function (q) {
            $(this.el).hasClass("open") ? $(this.el).removeClass("open") : $(this.el).addClass("open"), q && q.stopImmediatePropagation()
        },
        toggleLayerClickHandler: function (q) {
            q.stopImmediatePropagation()
        },
        toggleLayer: function (u) {
            var s = $(u.currentTarget), q = s.prop("checked");
            this.model.set({visible: q}), q ? (this.trigger("showLayer", this.model), this.$(".chk-toggle-legend").prop("checked") && this.trigger("showLegend", this.model), this.$(".chk-toggle-animate").prop("checked") && $("#time-slider-container").removeClass("hide"), this.model.get("config").animated && setProgressTime.timeShaft(true, this.model.attributes, this.model.cid)) : (this.trigger("hideLayer", this.model), this.trigger("hideLegend", this.model), $("#time-slider-container").addClass("hide"), $(this.el).removeClass("open"), setProgressTime.timeShaft(false)), u.stopImmediatePropagation();
            this.trigger("mapUpdate", this.model)
        },
        fieldsChangeHandler: function () {
            for (var y = this.model.get("config"), B = this.model.get("fields"), z = [{
                name: "无",
                code: ""
            }], w = [], s = [], u = 0; u < B.length; u++) {
                z.push({
                    name: B[u].name,
                    code: B[u].code
                }), l = f, l.isNumericType(B[u].type) ? (w.push({
                    name: B[u].name,
                    code: B[u].code
                }), s.push(B[u].name)) : l.isDateTimeType(B[u].type) && s.push(B[u].name)
            }
            var A = [{name: "无", code: ""}, {name: "名称", code: "name"}];
            this.$(".label-field-picker").append(this.namePickerTemplate({
                values: A,
                defaultValue: y.labelField
            })), 0 == w.length ? this.$("#choropleth-panel").addClass("disabled") : this.$(".number-field-picker").append(this.namePickerTemplate({
                values: w,
                defaultValue: y.fieldName
            })), this.$("#cartogramFieldSelect").append(this.namePickerTemplate({
                values: w,
                defaultValue: y.fieldName
            }));
            this.$(".subsection-field-picker").append(this.namePickerTemplate({
                values: z,
                defaultValue: y.fieldName
            })), z = z.slice(1), this.$(".category-field-picker").append(this.namePickerTemplate({
                values: z,
                defaultValue: y.fieldName
            })), this.$(".time-field-picker").append(this.namePickerTemplate({
                values: s,
                defaultValue: this.model.get("timeField")
            }));
            this.$("#cartogramFieldDiv").append(this.nameCheckedTemplate({values: w}));
            if (y.cartogramDataType == "singleYear") {
                var x = [];
                $.each(this.$("#cartogramFieldDiv input"), function (t, C) {
                    $(C).prop("checked") && x.push({code: $(C).val(), name: $(C).attr("name")})
                });
                y.cartogramFields = x
            } else {
                y.cartogramFields.push({
                    code: this.$("#cartogramFieldSelect").val(),
                    name: this.$("#cartogramFieldSelect option:selected").text()
                })
            }
            var q = [{name: "年份", code: "year"}];
            this.$(".time-field-picker").append(this.namePickerTemplate({values: q, defaultValue: y.timeField}))
        },
        yearChangeHandler: function () {
            for (var y = this.model.get("config"), x = this.model.get("years"), u = [{
                name: "无",
                code: ""
            }], w = [], z = 0; z < x.length; z++) {
                u.push({name: x[z].name, code: x[z].code}), w.push({name: x[z].name, code: x[z].code})
            }
            var s = [];
            s = s.concat(w);
            !(w.length == 0) ? (this.$(".number-year-picker").append(this.namePickerTemplate({
                values: s,
                defaultValue: y.labelYear
            }))) : (this.$(".number-year-picker").append(this.namePickerTemplate({
                values: u,
                defaultValue: y.labelYear
            })));
            this.$("#cartogramYearDiv").append(this.nameCheckedTemplate({values: w}));
            this.$("#cartogramYearSelect").append(this.namePickerTemplate({values: w, defaultValue: y.labelYear}));
            this.$(".subsection-year-picker").append(this.namePickerTemplate({values: w, defaultValue: y.labelYear}));
            this.model.get("config").labelYear = this.$(".number-year-picker").val();
            if (y.cartogramDataType == "singleIndex") {
                var q = [];
                $.each(this.$("#cartogramYearDiv input"), function (t, A) {
                    $(A).prop("checked") && q.push({code: $(A).val(), name: $(A).val()})
                });
                y.cartogramYears = q
            } else {
                y.cartogramYears.push({
                    code: this.$("#cartogramYearSelect").val(),
                    name: this.$("#cartogramYearSelect").val()
                })
            }
            y.cartogramBucketYear = $(".subsection-year-picker").val()
        },
        fetchFieldValues: function () {
            var t = this.model.get("config"), s = this.model.get("data"), q = [], u = t.fieldName;
            $(s).each(function (w, x) {
                $.each(x.indexdata, function (z, y) {
                    if (t.labelYear == "all" || t.labelYear == "") {
                        if ($.inArray(y.data[u], q) == -1) {
                            q.push(y.data[u])
                        }
                    } else {
                        if (Number(y.indexdata) == t.labelYear) {
                            if ($.inArray(y.data[u], q) == -1) {
                                q.push(y.data[u])
                            }
                        }
                    }
                })
            });
            t.fieldValues = q;
            this.fieldValuesFetchedHandler()
        },
        fieldValuesFetchedHandler: function () {
            var x = this.model.get("config"), u = o;
            if (x.type == u.configTypes.POLYGON_CATEGORY) {
                var t = x.fieldValues;
                var s = t.sort(function (z, y) {
                    return z - y
                });
                var q = s.length > b.singleCount ? b.singleCount + 1 : x.fieldValues.length;
                var w = f.getRandomColors(q, x.colors).reverse();
                if (this.model.get("legendOrder") && this.model.get("legendOrder") == "desc") {
                    w.reverse()
                }
                x.fieldColors = w, this.trigger("mapUpdate", this.model);
                this.updateCategoryBuckets();
                this.updateLegend()
            }
        },
        markerYearChange: function (t) {
            var q = $(t.currentTarget), s = q.val(), u = this.model.get("config");
            u.labelYear = s;
            u.type == "polygon-choropleth" ? this.markerBucketChange() : (u.type == "polygon-category" ? (this.fetchFieldValues(), this.trigger("mapUpdate", this.model)) : "");
            this.updateLegend();
            this.timeFieldRenderChange()
        },
        change: function (w) {
            var u = $(w.currentTarget), s = o;
            if (this._switchPanel(u)) {
                var q = this.createConfig();
                q && (q.type == s.configTypes.POLYGON_CHOROPLETH || q.type == s.configTypes.POLYGON_CATEGORY ? this.$(".legend-setting-wrapper").removeClass("disabled") : this.$(".legend-setting-wrapper").addClass("disabled"), this.model.set({config: q}), q.type == s.configTypes.POLYGON_SIMPLE ? this.trigger("mapUpdate", this.model) : q.type == s.configTypes.POLYGON_CHOROPLETH ? this.$("#choropleth-panel").hasClass("disabled") || (this.$(".bucket-count-picker").removeClass("hide"), this.$(".btn-config-breaks").addClass("hide"), "manual" == q.bucketType && (q.bucketType = s.defaultBucketType, this.$(".bucket-type-picker").val("equalcount"), this.$(".bucket-count-picker").find("option[text='等个数分段']").attr("selected", !0)), this.markerBucketChange()) : q.type == s.configTypes.POLYGON_CATEGORY && this.fetchFieldValues());
                this.cartogramBucketChangeHandler();
                this.timeFieldRenderChange();
                this.updateLegend()
            }
        },
        createConfig: function () {
            var s = this.$(".config-panel.active"), q = s.attr("id");
            return "simple-panel" == q ? this.createSimpleConfig() : "intensity-panel" == q ? this.createIntensityConfig() : "choropleth-panel" == q ? this.$("#choropleth-panel").hasClass("disabled") ? null : this.createChoroplethConfig() : "bubble-panel" == q ? this.$("#bubble-panel").hasClass("disabled") ? null : this.createBubbleConfig() : "category-panel" == q ? this.createCategoryConfig() : void 0
        },
        _switchPanel: function (w) {
            var t = w.attr("id"), s = this.$('.config-template:has("#' + t + '")');
            if (s.hasClass("active")) {
                return !1
            }
            this.$(".config-template").removeClass("active"), s.addClass("active"), this.$(".config-panel.active").removeClass("active");
            var u = this.configTable[t], q = this.$("#" + u);
            q.hasClass("disabled") ? (this.$(".filter-container").addClass("disabled"), this.$(".legend-setting-wrapper").addClass("disabled"), this.$(".animate-setting-wrapper").removeClass("disabled"), q.addClass("active"), (this.$(".legend-setting-wrapper").addClass("disabled"), this.trigger("hideLegend", this.model))) : (this.$(".filter-container").removeClass("disabled"), this.$(".legend-setting-wrapper").removeClass("disabled"), this.$(".animate-setting-wrapper").removeClass("disabled"), (q.addClass("active") && "simple-panel" == u) ? (this.$(".legend-setting-wrapper").addClass("disabled"), this.$(".animate-setting-wrapper").addClass("disabled"), this.trigger("hideLegend", this.model)) : (this.$(".legend-setting-wrapper").removeClass("disabled"), this.$(".animate-setting-wrapper").removeClass("disabled")));
            return !0
        },
        createSimpleConfig: function () {
            var V = this.$("#simple-panel .fill-color-picker").val(),
                J = this.$("#simple-panel .fill-opacity-picker").val(),
                X = this.$("#simple-panel .outline-color-picker").val(),
                T = this.$("#simple-panel .outline-width-picker").val(),
                R = this.$("#simple-panel .outline-opacity-picker").val(),
                O = this.$("#simple-panel .label-color-picker").val(),
                P = this.$("#simple-panel .label-field-picker").find("option:selected"),
                M = 0 == P.index() ? null : P.val(), W = this.$("#simple-panel .label-font-picker").val(),
                U = this.$("#simple-panel .label-size-picker").val(),
                G = this.$("#simple-panel .number-year-picker").val();
            var N = this.$(".chk-toggle-animate").prop("checked"), S = this.$(".time-field-picker").val();
            var w = this.$(".time-segment-picker").val(), q = this.$(".time-duration-picker").val();
            var C = this.$(".chk-time-accumulate").prop("checked");
            var D = this.$(".chk-toggle-cartogram").prop("checked"),
                I = this.$("#cartogram-setting .cartogramType-picker").val(),
                F = this.$("#cartogram-setting .dataType-picker").val(), B = [], u = [],
                z = this.$("#cartogram-setting .subsection-field-picker").val(),
                E = this.$("#cartogram-setting .cartogramBucket-count-picker").val(),
                A = this.$("#cartogram-setting .cartogram-min-size-picker").val(),
                Q = this.$("#cartogram-setting .cartogram-max-size-picker").val(),
                L = this.$("#cartogram-setting .subsection-year-picker").val();
            if (F == "singleYear") {
                this.$("#cartogramFieldSelect").parent().addClass("hide"), this.$("#cartogramYearDiv").parent().addClass("hide"), this.$("#cartogramYearSelect").parent().removeClass("hide"), this.$("#cartogramFieldDiv").parent().removeClass("hide");
                var x = this.$("#cartogramYearSelect").val();
                u.push({code: x, name: x});
                $.each(this.$("#cartogramFieldDiv input"), function (s, t) {
                    $(t).prop("checked") && B.push({code: $(t).val(), name: $(t).attr("title")})
                })
            } else {
                if (F == "singleIndex") {
                    this.$("#cartogramFieldSelect").parent().removeClass("hide"), this.$("#cartogramYearDiv").parent().removeClass("hide"), this.$("#cartogramYearSelect").parent().addClass("hide"), this.$("#cartogramFieldDiv").parent().addClass("hide");
                    var K = this.$("#cartogramFieldSelect").val();
                    B.push({code: K, name: this.$("#cartogramFieldSelect option:selected").text()});
                    $.each(this.$("#cartogramYearDiv input"), function (s, t) {
                        $(t).prop("checked") && u.push({code: $(t).val(), name: $(t).val()})
                    })
                }
            }
            var H = j.PolygonSimpleConfig({
                fillColor: V,
                fillOpacity: parseFloat(J),
                outlineColor: X,
                outlineWidth: parseFloat(T),
                outlineOpacity: parseFloat(R),
                labelColor: O,
                labelField: M,
                labelFont: W,
                labelSize: parseFloat(U),
                animated: N,
                timeField: S,
                frameCount: parseInt(w),
                duration: parseInt(q),
                timeAccumulate: C,
                cartogram: D,
                cartogramType: I,
                cartogramDataType: F,
                cartogramFields: B,
                cartogramYears: u,
                cartogramBucketField: z,
                cartogramBucketYear: L,
                cartogramBucketCount: E,
                cartogramMinSise: A,
                cartogramMaxSize: Q
            });
            return H
        },
        createChoroplethConfig: function () {
            var aa = this.$("#choropleth-panel .fill-color-ramp-picker").attr("color-ramp-name"), W = o,
                L = W.colorRamp.getColor(aa);
            L = L ? L : W.defaultColorRamp;
            var ad = this.$("#choropleth-panel .fill-opacity-picker").val(),
                V = this.$("#choropleth-panel .outline-color-picker").val(),
                R = this.$("#choropleth-panel .outline-width-picker").val(),
                S = this.$("#choropleth-panel .outline-opacity-picker").val(),
                O = this.$("#choropleth-panel .label-color-picker").val(),
                ab = this.$("#choropleth-panel .label-field-picker").find("option:selected"),
                Z = 0 == ab.index() ? null : ab.val(), ac = this.$("#choropleth-panel .label-font-picker").val(),
                X = this.$("#choropleth-panel .label-size-picker").val(),
                P = this.$("#choropleth-panel .number-field-picker").val(),
                K = this.$("#choropleth-panel .bucket-type-picker").val(),
                Y = this.$("#choropleth-panel .bucket-count-picker").val(),
                H = this.$("#choropleth-panel .number-year-picker").val();
            var Q = this.$(".chk-toggle-animate").prop("checked"), U = this.$(".time-field-picker").val();
            var x = this.$(".time-segment-picker").val(), q = this.$(".time-duration-picker").val();
            var D = this.$(".chk-time-accumulate").prop("checked");
            var E = this.$(".chk-toggle-cartogram").prop("checked"),
                J = this.$("#cartogram-setting .cartogramType-picker").val(),
                G = this.$("#cartogram-setting .dataType-picker").val(), C = [], w = [],
                A = this.$("#cartogram-setting .subsection-field-picker").val(),
                F = this.$("#cartogram-setting .cartogramBucket-count-picker").val(),
                B = this.$("#cartogram-setting .cartogram-min-size-picker").val(),
                T = this.$("#cartogram-setting .cartogram-max-size-picker").val(),
                N = this.$("#cartogram-setting .subsection-year-picker").val();
            if (G == "singleYear") {
                this.$("#cartogramFieldSelect").parent().addClass("hide"), this.$("#cartogramYearDiv").parent().addClass("hide"), this.$("#cartogramYearSelect").parent().removeClass("hide"), this.$("#cartogramFieldDiv").parent().removeClass("hide");
                var z = this.$("#cartogramYearSelect").val();
                w.push({code: z, name: z});
                $.each(this.$("#cartogramFieldDiv input"), function (s, t) {
                    $(t).prop("checked") && C.push({code: $(t).val(), name: $(t).attr("title")})
                })
            } else {
                if (G == "singleIndex") {
                    this.$("#cartogramFieldSelect").parent().removeClass("hide"), this.$("#cartogramYearDiv").parent().removeClass("hide"), this.$("#cartogramYearSelect").parent().addClass("hide"), this.$("#cartogramFieldDiv").parent().addClass("hide");
                    var M = this.$("#cartogramFieldSelect").val();
                    C.push({code: M, name: this.$("#cartogramFieldSelect option:selected").text()});
                    $.each(this.$("#cartogramYearDiv input"), function (s, t) {
                        $(t).prop("checked") && w.push({code: $(t).val(), name: $(t).val()})
                    })
                }
            }
            var I = j.PolygonChoroplethConfig({
                colors: L,
                fillOpacity: parseFloat(ad),
                outlineColor: V,
                outlineWidth: parseFloat(R),
                outlineOpacity: parseFloat(S),
                labelColor: O,
                labelField: Z,
                labelFont: ac,
                labelSize: parseFloat(X),
                fieldName: P,
                bucketType: K,
                bucketCount: parseInt(Y),
                labelYear: Number(H),
                animated: Q,
                timeField: U,
                frameCount: parseInt(x),
                duration: parseInt(q),
                timeAccumulate: D,
                cartogram: E,
                cartogramType: J,
                cartogramDataType: G,
                cartogramFields: C,
                cartogramYears: w,
                cartogramBucketField: A,
                cartogramBucketYear: N,
                cartogramBucketCount: F,
                cartogramMinSise: B,
                cartogramMaxSize: T
            });
            return I
        },
        createCategoryConfig: function () {
            var X = this.$("#category-panel .fill-color-ramp-picker").attr("color-ramp-name"), U = o,
                J = U.colorRamp.getColor(X);
            J = J ? J : U.fullColorRamp;
            var aa = this.$("#category-panel .fill-opacity-picker").val(),
                S = this.$("#category-panel .outline-color-picker").val(),
                P = this.$("#category-panel .outline-width-picker").val(),
                Q = this.$("#category-panel .outline-opacity-picker").val(),
                M = this.$("#category-panel .label-color-picker").val(),
                Y = this.$("#category-panel .label-field-picker").find("option:selected"),
                W = 0 == Y.index() ? null : Y.val(), Z = this.$("#category-panel .label-font-picker").val(),
                V = this.$("#category-panel .label-size-picker").val(),
                N = this.$("#category-panel .category-field-picker").val(),
                G = this.$("#category-panel .number-year-picker").val();
            var O = this.$(".chk-toggle-animate").prop("checked"), T = this.$(".time-field-picker").val();
            var w = this.$(".time-segment-picker").val(), q = this.$(".time-duration-picker").val();
            var C = this.$(".chk-time-accumulate").prop("checked");
            var D = this.$(".chk-toggle-cartogram").prop("checked"),
                I = this.$("#cartogram-setting .cartogramType-picker").val(),
                F = this.$("#cartogram-setting .dataType-picker").val(), B = [], u = [],
                z = this.$("#cartogram-setting .subsection-field-picker").val(),
                E = this.$("#cartogram-setting .cartogramBucket-count-picker").val(),
                A = this.$("#cartogram-setting .cartogram-min-size-picker").val(),
                R = this.$("#cartogram-setting .cartogram-max-size-picker").val(),
                L = this.$("#cartogram-setting .subsection-year-picker").val();
            if (F == "singleYear") {
                this.$("#cartogramFieldSelect").parent().addClass("hide"), this.$("#cartogramYearDiv").parent().addClass("hide"), this.$("#cartogramYearSelect").parent().removeClass("hide"), this.$("#cartogramFieldDiv").parent().removeClass("hide");
                var x = this.$("#cartogramYearSelect").val();
                u.push({code: x, name: x});
                $.each(this.$("#cartogramFieldDiv input"), function (s, t) {
                    $(t).prop("checked") && B.push({code: $(t).val(), name: $(t).attr("title")})
                })
            } else {
                if (F == "singleIndex") {
                    this.$("#cartogramFieldSelect").parent().removeClass("hide"), this.$("#cartogramYearDiv").parent().removeClass("hide"), this.$("#cartogramYearSelect").parent().addClass("hide"), this.$("#cartogramFieldDiv").parent().addClass("hide");
                    var K = this.$("#cartogramFieldSelect").val();
                    B.push({code: K, name: this.$("#cartogramFieldSelect option:selected").text()});
                    $.each(this.$("#cartogramYearDiv input"), function (s, t) {
                        $(t).prop("checked") && u.push({code: $(t).val(), name: $(t).val()})
                    })
                }
            }
            var H = j.PolygonCategoryConfig({
                colors: J,
                fillOpacity: parseFloat(aa),
                outlineColor: S,
                outlineWidth: parseFloat(P),
                outlineOpacity: parseFloat(Q),
                labelColor: M,
                labelField: W,
                labelFont: Z,
                labelSize: parseFloat(V),
                fieldName: N,
                labelYear: Number(G),
                animated: O,
                timeField: T,
                frameCount: parseInt(w),
                duration: parseInt(q),
                timeAccumulate: C,
                cartogram: D,
                cartogramType: I,
                cartogramDataType: F,
                cartogramFields: B,
                cartogramYears: u,
                cartogramBucketField: z,
                cartogramBucketYear: L,
                cartogramBucketCount: E,
                cartogramMinSise: A,
                cartogramMaxSize: R
            });
            return H
        },
        initSimple: function () {
            var F = this.model.get("config"), B = o, K = B.defaultFillColor, I = B.defaultFillOpacity,
                A = B.defaultOutlineColor, q = B.defaultOutlineOpacity, x = B.defaultOutlineWidth,
                y = B.defaultLabelColor, L = B.defaultLabelFont, G = B.defaultLabelSize, E = !1, H = !1, C = void 0,
                w = B.defaultTimeSegment, J = B.defaultTimeDuration, D = !1;
            if (F.type == B.configTypes.POLYGON_SIMPLE && (K = F.fillColor, I = F.fillOpacity, A = F.outlineColor, q = F.outlineOpacity, x = F.outlineWidth, y = F.labelColor, L = F.labelFont, G = F.labelSize, E = !0, H = this.model.get("animated"), H && (C = this.model.get("timeField"), w = this.model.get("frameCount"), J = this.model.get("duration"), D = this.model.get("timeAccumulate"))), this.$("#simple-panel .fill-color-picker").append(this.colorPickerTemplate({
                colors: B.colors,
                defaultColor: K
            })), this.$("#simple-panel .fill-opacity-picker").append(this.valuePickerTemplate({
                values: B.opacities,
                defaultValue: I
            })), this.$("#simple-panel .outline-color-picker").append(this.colorPickerTemplate({
                colors: B.colors,
                defaultColor: A
            })), this.$("#simple-panel .outline-width-picker").append(this.valuePickerTemplate({
                values: B.lineWidths,
                defaultValue: x
            })), this.$("#simple-panel .outline-opacity-picker").append(this.valuePickerTemplate({
                values: B.opacities,
                defaultValue: q
            })), this.$("#simple-panel .label-color-picker").append(this.colorPickerTemplate({
                colors: B.colors,
                defaultColor: y
            })), this.$("#simple-panel .label-font-picker").append(this.namePickerTemplate({
                values: B.labelFonts,
                defaultValue: L
            })), this.$("#simple-panel .label-size-picker").append(this.valuePickerTemplate({
                values: B.labelSizes,
                defaultValue: G
            })), this.$("#simple-panel .fill-color-picker").colorselector({
                context: this,
                initColor: K,
                callback: this.fillColorChange
            }), this.$("#simple-panel .outline-color-picker").colorselector({
                context: this,
                initColor: A,
                callback: this.outlineColorChange
            }), this.$("#simple-panel .label-color-picker").colorselector({
                context: this,
                initColor: y,
                callback: this.labelColorChange
            }), this.$(".time-segment-picker").append(this.valuePickerTemplate({
                values: B.timeSegments,
                defaultValue: w
            })), this.$(".time-duration-picker").append(this.valuePickerTemplate({
                values: B.timeDurations,
                defaultValue: J
            })), this.$(".cartogramType-picker").append(this.namePickerTemplate({
                values: B.cartogramTypes,
                defaultValue: B.defaultCartogramType
            })), this.$(".dataType-picker").append(this.namePickerTemplate({
                values: B.cartogramDataTypes,
                defaultValue: B.defaultCartogramDataType
            })), this.$(".cartogramBucket-count-picker").append(this.valuePickerTemplate({
                values: B.bucketCounts,
                defaultValue: B.defaultBucketCount
            })), this.$("#cartogram-setting .cartogram-min-size-picker").append(this.valuePickerTemplate({
                values: B.cartogramSizes,
                defaultValue: B.defaultCartogramMinSize
            })), this.$("#cartogram-setting .cartogram-max-size-picker").append(this.valuePickerTemplate({
                values: B.cartogramSizes,
                defaultValue: B.defaultCartogramMaxSize
            })), H && this.fillAnimateSettings(w, J, D, C), E) {
                var z = this.$("#simple-template");
                this._switchPanel(z)
            }
        },
        initChoropleth: function () {
            var S = this.model.get("config"), O = o, D = O.defaultColorRamp, X = O.defaultFillOpacity,
                M = O.defaultOutlineColor, G = O.defaultOutlineOpacity, I = O.defaultOutlineWidth,
                J = O.defaultLabelColor, E = O.defaultLabelFont, U = O.defaultLabelSize, R = O.defaultBucketType,
                V = O.defaultBucketCount, P = !1, H = !1, B = O.defaultLegendTitle, Q = O.defaultLegendOrder, K = !1,
                W = void 0, A = O.defaultTimeSegment, z = O.defaultTimeDuration, N = !1;
            if (S.type == O.configTypes.POLYGON_CHOROPLETH) {
                if (X = S.fillOpacity, M = S.outlineColor, G = S.outlineOpacity, I = S.outlineWidth, J = S.labelColor, E = S.labelFont, U = S.labelSize, R = S.bucketType, V = S.bucketCount, D = S.colors, P = !0, H = this.model.get("showLegend"), "manual" == R && (this.$("#choropleth-panel .bucket-count-picker").addClass("hide"), this.$("#choropleth-panel .btn-config-breaks").removeClass("hide")), H) {
                    var F = this.model.get("legendTitle");
                    B = F ? F : this.model.get("dataName");
                    var q = this.model.get("legendOrder");
                    Q = q ? q : O.defaultLegendOrder
                }
            }
            var w = O.colorRamp.getColorName(D);
            if (w = w ? w : O.defaultColorRampName, this.$("#choropleth-panel .fill-color-ramp-picker").ghColorRamp({
                onChange: this.onChoroplethColorRampChange,
                colors: O.colorRamp.colors,
                defaultColorRamp: w,
                context: this
            }), this.$("#choropleth-panel .fill-opacity-picker").append(this.valuePickerTemplate({
                values: O.opacities,
                defaultValue: X
            })), this.$("#choropleth-panel .outline-color-picker").append(this.colorPickerTemplate({
                colors: O.colors,
                defaultColor: M
            })), this.$("#choropleth-panel .outline-width-picker").append(this.valuePickerTemplate({
                values: O.lineWidths,
                defaultValue: I
            })), this.$("#choropleth-panel .outline-opacity-picker").append(this.valuePickerTemplate({
                values: O.opacities,
                defaultValue: G
            })), this.$("#choropleth-panel .label-color-picker").append(this.colorPickerTemplate({
                colors: O.colors,
                defaultColor: J
            })), this.$("#choropleth-panel .label-font-picker").append(this.namePickerTemplate({
                values: O.labelFonts,
                defaultValue: E
            })), this.$("#choropleth-panel .label-size-picker").append(this.valuePickerTemplate({
                values: O.labelSizes,
                defaultValue: U
            })), this.$("#choropleth-panel .bucket-type-picker").append(this.namePickerTemplate({
                values: O.bucketTypes,
                defaultValue: R
            })), this.$("#choropleth-panel .bucket-count-picker").append(this.valuePickerTemplate({
                values: O.bucketCounts,
                defaultValue: V
            })), this.$("#choropleth-panel .outline-color-picker").colorselector({
                context: this,
                initColor: M,
                callback: this.outlineColorChange
            }), this.$("#choropleth-panel .label-color-picker").colorselector({
                context: this,
                initColor: J,
                callback: this.labelColorChange
            }), K && this.fillAnimateSettings(A, z, N, W), P) {
                var x = this.$("#choropleth-template");
                this._switchPanel(x), this.$(".legend-setting-wrapper").removeClass("disabled"), this.trigger("initLegend", this.model), H && (this.$(".chk-toggle-legend").prop("checked", "checked"), this.$("#input-legend-title").val(B), this.$("input[value=" + Q + "]").prop("checked", "checked"), this.toggleLegend(!0))
            }
        },
        initCategory: function () {
            var P = this.model.get("config"), L = o, A = L.fullColorRamp, U = L.defaultFillOpacity,
                J = L.defaultOutlineColor, E = L.defaultOutlineOpacity, G = L.defaultOutlineWidth,
                H = L.defaultLabelColor, B = L.defaultLabelFont, Q = L.defaultLabelSize, O = !1, R = !1,
                M = L.defaultLegendTitle, F = L.defaultLegendOrder, z = !1, N = void 0, I = L.defaultTimeSegment,
                S = L.defaultTimeDuration, x = !1;
            if (P.type == L.configTypes.POLYGON_CATEGORY) {
                if (U = P.fillOpacity, J = P.outlineColor, E = P.outlineOpacity, G = P.outlineWidth, H = P.labelColor, B = P.labelFont, Q = P.labelSize, A = P.colors, O = !0, R = this.model.get("showLegend")) {
                    var w = this.model.get("legendTitle");
                    M = w ? w : this.model.get("dataName");
                    var K = this.model.get("legendOrder");
                    F = K ? K : L.defaultLegendOrder
                }
            }
            var D = L.colorRamp.getColorName(A);
            if (D = D ? D : L.defaultColorRampName, this.$("#category-panel .fill-color-ramp-picker").ghColorRamp({
                onChange: this.onCategoryColorRampChange,
                colors: L.colorRamp.colors,
                defaultColorRamp: D,
                context: this
            }), this.$("#category-panel .fill-opacity-picker").append(this.valuePickerTemplate({
                values: L.opacities,
                defaultValue: U
            })), this.$("#category-panel .outline-color-picker").append(this.colorPickerTemplate({
                colors: L.colors,
                defaultColor: J
            })), this.$("#category-panel .outline-width-picker").append(this.valuePickerTemplate({
                values: L.lineWidths,
                defaultValue: G
            })), this.$("#category-panel .outline-opacity-picker").append(this.valuePickerTemplate({
                values: L.opacities,
                defaultValue: E
            })), this.$("#category-panel .label-color-picker").append(this.colorPickerTemplate({
                colors: L.colors,
                defaultColor: H
            })), this.$("#category-panel .label-font-picker").append(this.namePickerTemplate({
                values: L.labelFonts,
                defaultValue: B
            })), this.$("#category-panel .label-size-picker").append(this.valuePickerTemplate({
                values: L.labelSizes,
                defaultValue: Q
            })), this.$("#category-panel .outline-color-picker").colorselector({
                context: this,
                initColor: J,
                callback: this.outlineColorChange
            }), this.$("#category-panel .label-color-picker").colorselector({
                context: this,
                initColor: H,
                callback: this.labelColorChange
            }), z && this.fillAnimateSettings(I, S, x, N), O) {
                this.updateCategoryBuckets();
                var q = this.$("#category-template");
                this._switchPanel(q), this.$(".legend-setting-wrapper").removeClass("disabled"), this.trigger("initLegend", this.model), R && (this.$(".chk-toggle-legend").prop("checked", "checked"), this.$("#input-legend-title").val(M), this.$("input[value=" + F + "]").prop("checked", "checked"), this.toggleLegend(!0))
            }
        },
        fillOpacityChange: function (w) {
            var u = this.model.get("config"), q = $(w.currentTarget), s = parseFloat(q.val());
            u.fillOpacity = s, this.trigger("mapUpdate", this.model)
        },
        fillColorChange: function (s) {
            var q = this.model.get("config");
            s != q.fillColor && (q.fillColor = s, this.trigger("mapUpdate", this.model), this.updateLegend())
        },
        outlineWidthChange: function (w) {
            var u = this.model.get("config"), q = $(w.currentTarget), s = parseFloat(q.val());
            u.outlineWidth = s, this.trigger("mapUpdate", this.model)
        },
        outlineOpacityChangeHandler: function (w) {
            var u = this.model.get("config"), q = $(w.currentTarget), s = parseFloat(q.val());
            u.outlineOpacity = s, this.trigger("mapUpdate", this.model)
        },
        outlineColorChange: function (s) {
            var q = this.model.get("config");
            s != q.outlineColor && (q.outlineColor = s, this.trigger("mapUpdate", this.model), this.updateLegend())
        },
        labelFieldChange: function (x) {
            var w = $(x.currentTarget), s = this.model.get("config"), u = w.find("option:selected"),
                q = 0 == u.index() ? null : u.val();
            s.labelField = q, this.trigger("mapUpdate", this.model)
        },
        labelColorChange: function (s) {
            var q = this.model.get("config");
            s != q.labelColor && (q.labelColor = s, q.labelField && this.trigger("mapUpdate", this.model))
        },
        labelFontChange: function (w) {
            var u = this.model.get("config"), q = $(w.currentTarget), s = q.val();
            u.labelFont = s, u.labelField && this.trigger("mapUpdate", this.model)
        },
        labelSizeChange: function (w) {
            var u = this.model.get("config"), q = $(w.currentTarget), s = parseFloat(q.val());
            u.labelSize = s, u.labelField && this.trigger("mapUpdate", this.model)
        },
        bucketTypeChange: function (x) {
            var w = $(x.currentTarget), s = w.val(), u = this.model.get("config"), q = parseInt(w.next().val());
            u.bucketType = s;
            u.bucketCount = q;
            this.$(".bucket-count-picker").removeClass("hide"), this.$(".btn-config-breaks").addClass("hide"), this.markerBucketChange();
            this.updateLegend()
        },
        bucketCountChange: function (w) {
            var u = $(w.currentTarget), s = parseInt(u.val()), q = this.model.get("config");
            q.bucketCount = s, this.markerBucketChange();
            this.updateLegend()
        },
        markerBucketChange: function () {
            var w = this.model.get("config");
            var y = $(".config-panel.active").find(".bucket-count-picker").val();
            var z = $(".config-panel.active").find(".bucket-type-picker").val();
            var B = [];
            var F = this.model.get("data");
            var H = w.type == "polygon-category" ? this.$(".category-field-picker").val() : this.$(".number-field-picker").val();
            var q = w.type == "polygon-category" ? this.$(".category-year-picker").val() : this.$(".number-year-picker").val();
            $(F).each(function (I, J) {
                $.each(J.indexdata, function (L, K) {
                    if (q == "all" || q == "") {
                        B.push(K.data[H])
                    } else {
                        if (Number(K.indexdata) == q) {
                            B.push(K.data[H])
                        }
                    }
                })
            });
            var t = B.sort(function (J, I) {
                return J - I
            });
            var s = $.unique(t);
            var x = $.grep(s, function (J, I) {
                return J < 0
            });
            var E = $.grep(s, function (J, I) {
                return J == 0
            });
            s = $.grep(s, function (J, I) {
                return J > 0
            });
            var G = parseInt(y);
            var u = this.dataSector(s, G, z);
            var D = f.getRandomColors(y, w.colors).reverse();
            if (this.model.get("legendOrder") && this.model.get("legendOrder") == "desc") {
                D.reverse()
            }
            var C = [];
            $(u.ranges).each(function (I, J) {
                C.push({value: J, color: D[I]})
            });
            if (!u.isMonodrome) {
                w.breaks = C;
                w.bucketCount = u.count;
                w.bucketType = z;
                this.trigger("mapUpdate", this.model)
            } else {
                w.breaks = [];
                w.bucketCount = [];
                w.bucketType = z;
                var A = f;
                this.trigger("mapUpdate", this.model);
                A.showWarning("选择的段数大于已有数据，请重新选择！")
            }
        },
        dataSector: function (q, A, x) {
            var B = this;
            q = q || [];
            var s = [];
            var C = q.length;
            var t = false;
            if (A < C) {
                if (x == "equalcount") {
                    var u = (C - 1) / A;
                    for (var w = 0; w < A; w++) {
                        var z = Math.ceil(w * u);
                        s.push(Number(q[z]))
                    }
                    s.push(Number(q[C - 1]))
                } else {
                    if (x == "equalinterval") {
                        var u = (Number(q[C - 1]) - Number(q[0])) / A;
                        for (var w = 0; w < A; w++) {
                            var D = Number(q[0]) + w * u;
                            s.push(D)
                        }
                        s.push(Number(q[C - 1]))
                    }
                }
                t = false
            } else {
                s = q;
                t = true
            }
            var y = A < C ? A : C;
            return {ranges: s, count: y, isMonodrome: t}
        },
        onChoroplethColorRampChange: function (s) {
            var q = this.model.get("config");
            q.colors = s.colors;
            this.markerBucketChange();
            this.updateLegend()
        },
        numberFieldChange: function (w) {
            var u = $(w.currentTarget), s = u.val(), q = this.model.get("config");
            q.fieldName = s;
            this.markerBucketChange();
            this.updateLegend();
            this.timeFieldRenderChange()
        },
        onCategoryColorRampChange: function (s) {
            var t = this.model.get("config");
            t.colors = s.colors;
            var q = f.getRandomColors(t.fieldValues.length, s.colors).reverse();
            if (this.model.get("legendOrder") && this.model.get("legendOrder") == "desc") {
                q.reverse()
            }
            t.fieldColors = q, this.trigger("mapUpdate", this.model);
            this.updateCategoryBuckets();
            this.updateLegend()
        },
        categoryFieldChange: function (w) {
            var u = $(w.currentTarget), q = u.val(), s = this.model.get("config");
            s.fieldName = q;
            this.fetchFieldValues();
            this.timeFieldRenderChange()
        },
        updateCategoryBuckets: function () {
            var y = this.model.get("config"), t = o, w = y.fieldColors, x = y.fieldValues;
            var s = [];
            if (w.length != x.length) {
                s = x.slice(0, w.length - 1);
                s.push("其它")
            } else {
                s = x.slice(0)
            }
            this.$(".bucket-list").html(this.bucketTemplate({values: s, colors: w, colorList: t.colors}));
            for (var q = 0; q < w.length; q++) {
                var u = "bucket-" + q;
                this.$("#" + u + ".bucket-color-picker").colorselector({
                    context: this,
                    initColor: w[q],
                    callback: this.bucketColorChange
                })
            }
        },
        bucketColorChange: function (y, w, s, u) {
            var q = $(u).parent().index();
            if (q != -1) {
                var x = this.model.get("config");
                x.fieldColors[q] = y, this.trigger("mapUpdate", this.model);
                this.updateLegend()
            }
        },
        toggleLegendHandler: function (u) {
            var s = $(u.currentTarget), q = s.prop("checked");
            this.model.set({showLegend: q}), this.toggleLegend(q)
        },
        legendTitleChangeHandler: function (t) {
            var q = $(t.currentTarget).val().trim(), s = o;
            q = q ? q : s.defaultLegendTitle, this.model.set({legendTitle: q});
            this.updateLegend()
        },
        legendOrderChangeHandler: function (w) {
            var u = $(w.currentTarget), s = u.val();
            if (this.model.get("config").type == "polygon-category") {
                this.model.get("config").fieldColors.reverse();
                this.updateCategoryBuckets()
            } else {
                if (this.model.get("config").type == "polygon-choropleth") {
                    var x = this.model.get("config").breaks, q = [];
                    $.each(x, function (t, y) {
                        q.push(y.color)
                    });
                    q.reverse();
                    $.each(this.model.get("config").breaks, function (t, y) {
                        y.color = q[t + 1]
                    })
                }
            }
            this.model.set({legendOrder: s}), this.updateLegend();
            this.trigger("mapUpdate", this.model)
        },
        toggleLegendSettings: function (q) {
            q ? this.$(".legend-setting-wrapper").removeClass("unchecked") : this.$(".legend-setting-wrapper").addClass("unchecked")
        },
        toggleLegend: function (w) {
            var u = this.$(".chk-toggle-legend"), q = this.model.get("visible");
            if (u) {
                var s = u.prop("checked");
                s && w && q ? this.trigger("showLegend", this.model) : this.trigger("hideLegend", this.model), this.toggleLegendSettings(s)
            }
        },
        hideLegend: function () {
            this.trigger("hideLegend", this.model)
        },
        updateLegend: function () {
            this.trigger("updateLegend", this.model)
        },
        toggleAnimationTimeshaft: function () {
            var B = this.$(".chk-toggle-animate"), t = B.prop("checked"), y = o, x = this.model.get("years");
            if (t) {
                if (x.length == 0) {
                    return f.showWarning("该数据没有年份数据，无法进行时态播放！"), void B.prop("checked", !1)
                }
                var w = $(".chk-toggle-animate");
                var A = 0;
                $.each(w, function (C, D) {
                    if ($(D).prop("checked") == true) {
                        A++
                    }
                });
                if (A > 1) {
                    return f.showWarning("只能有一个数据开启时态功能"), void B.prop("checked", !1)
                }
            }
            var q = this.model.get("config");
            q.animated = t;
            var s = this.model.get("visible");
            if (t && s) {
                this.$("#animate-setting").removeClass("hide");
                var z = this.$("#animate-setting .time-field-picker").val();
                var u = this.$(".time-segment-picker").val();
                u = parseInt(u), q.animated = !0, q.timeField = z, q.frameCount = u;
                this.fetchTimeBreaks();
                this.trigger("mapUpdate", this.model);
                this.timeFieldRenderChange()
            } else {
                this.trigger("hideTimeSlider", this.model), setProgressTime.timeShaft(false), this.updateLegend(), this.$("#animate-setting").addClass("hide"), q.type == y.configTypes.POLYGON_SIMPLE ? q.timeField = void 0 : (q.animated = !1, this.trigger("mapUpdate", this.model))
            }
        },
        timeFieldChangeTimeshaft: function (t) {
            var s = $(t.currentTarget), u = s.val(), q = this.model.get("config");
            q.timeField = u;
            this.fetchTimeBreaks();
            if (u == "year") {
                $(".chk-time-accumulate").prop("checked", false);
                q.type == "polygon-choropleth" ? this.timeYearDataBreak() : this.timeSingleDataBreak()
            }
            this.trigger("mapUpdate", this.model);
            setProgressTime.timeShaft(true, this.model.attributes, this.model.cid)
        },
        timeYearDataBreak: function () {
            var w = this.model.get("config");
            var y = $(".config-panel.active").find(".bucket-count-picker").val();
            var z = $(".config-panel.active").find(".bucket-type-picker").val();
            var B = [];
            var F = this.model.get("data");
            var H = w.type == "polygon-category" ? this.$(".category-field-picker").val() : this.$(".number-field-picker").val();
            var q = w.timebreaks[0];
            $(F).each(function (I, J) {
                $.each(J.indexdata, function (L, K) {
                    if (q == "all" || q == "") {
                        B.push(K.data[H])
                    } else {
                        if (Number(K.indexdata) == q) {
                            B.push(K.data[H])
                        }
                    }
                })
            });
            var t = B.sort(function (J, I) {
                return J - I
            });
            var s = $.unique(t);
            var x = $.grep(s, function (J, I) {
                return J < 0
            });
            var E = $.grep(s, function (J, I) {
                return J == 0
            });
            s = $.grep(s, function (J, I) {
                return J > 0
            });
            var G = parseInt(y);
            var u = this.dataSector(s, G, z);
            var D = f.getRandomColors(y, w.colors).reverse();
            if (this.model.get("legendOrder") && this.model.get("legendOrder") == "desc") {
                D.reverse()
            }
            var C = [];
            $(u.ranges).each(function (I, J) {
                C.push({value: J, color: D[I]})
            });
            if (!u.isMonodrome) {
                w.timeYearDataBreak = C
            } else {
                w.timeYearDataBreak = [];
                var A = f;
                this.trigger("mapUpdate", this.model);
                A.showWarning("选择的段数大于已有数据，请重新选择！")
            }
            this.updateLegend()
        },
        timeSingleDataBreak: function () {
            var t = this.model.get("config"), s = this.model.get("data"), q = [], u = t.fieldName;
            $(s).each(function (w, x) {
                $.each(x.indexdata, function (z, y) {
                    if (t.labelYear == "all" || t.labelYear == "") {
                        if ($.inArray(y.data[u], q) == -1) {
                            q.push(y.data[u])
                        }
                    } else {
                        if (Number(y.indexdata) == t.timebreaks[0]) {
                            if ($.inArray(y.data[u], q) == -1) {
                                q.push(y.data[u])
                            }
                        }
                    }
                })
            });
            t.timeYearDataBreak = q;
            this.timeSingleDataColors()
        },
        timeSingleDataColors: function () {
            var x = this.model.get("config"), u = o;
            if (x.type == u.configTypes.POLYGON_CATEGORY) {
                var t = x.timeYearDataBreak;
                var s = t.sort(function (z, y) {
                    return z - y
                });
                var q = s.length > b.singleCount ? b.singleCount + 1 : x.timeYearDataBreak.length;
                var w = f.getRandomColors(q, x.colors).reverse();
                if (this.model.get("legendOrder") && this.model.get("legendOrder") == "desc") {
                    w.reverse()
                }
                x.timeYearDataColors = w;
                this.updateLegend()
            }
        },
        timeDurationChangeTimeshaft: function (s) {
            var t = $(s.currentTarget), u = parseFloat(t.val()), q = this.model.get("config");
            q.duration = u;
            setProgressTime.timeShaft(true, this.model.attributes, this.model.cid)
        },
        timeSegmentChangeTimeshaft: function (s) {
            var t = $(s.currentTarget), u = t.val(), q = this.model.get("config");
            q.frameCount = parseInt(u);
            this.trigger("mapUpdate", this.model);
            this.fetchTimeBreaks();
            setProgressTime.timeShaft(true, this.model.attributes, this.model.cid)
        },
        timeAccumulateChangeTimeshaft: function (s) {
            var t = $(s.currentTarget), u = t.prop("checked"), q = this.model.get("config");
            if (q.timeField == "year") {
                return f.showWarning("该时态字段不允许按段播放！"), $(".chk-time-accumulate").prop("checked", false)
            }
            q.timeAccumulate = u;
            this.trigger("mapUpdate", this.model)
        },
        timeFieldRenderChange: function () {
            var u = this.model.get("config"), s = this.model.get("fields");
            if (!u.animated) {
                return
            }
            var t = {};
            var q = [{name: "年份", code: "year"}], w = "year";
            if (u.type == "polygon-simple") {
            } else {
                $.each(s, function (x, y) {
                    if (y.code == u.fieldName) {
                        t["name"] = y.name;
                        t["code"] = y.code;
                        return true
                    }
                });
                q.push(t)
            }
            this.$(".time-field-picker").empty();
            this.$(".time-field-picker").append(this.namePickerTemplate({values: q, defaultValue: w}));
            u.timeField = w;
            this.fetchTimeBreaks();
            if (u.type == "polygon-simple") {
                setProgressTime.timeShaft(false)
            } else {
                u.animated && setProgressTime.timeShaft(true, this.model.attributes, this.model.cid)
            }
        },
        fetchTimeBreaks: function () {
            var t = this.model.get("config");
            var y = t.frameCount, z = this.model.get("years");
            if (t.timeField == "year") {
                var E = [];
                $.each(z, function (F, G) {
                    E.push(G.code)
                });
                E = E.sort(function (G, F) {
                    return G - F
                });
                var w = this.dataSector(E, y - 1, "equalcount");
                if (!w.isMonodrome) {
                    t.timebreaks = w.ranges
                } else {
                    f.showWarning("选择时态段数大于最大段数" + E.length + "，请重新选择！")
                }
            } else {
                var B = false;
                $.each(this.model.get("fields"), function (F, G) {
                    if (G.code == t.timeField && G.type.toLowerCase() == "text") {
                        B = true;
                        return true
                    }
                });
                if (B) {
                    return f.showWarning("该指标不支持时态浏览，请重新选择！")
                }
                var C = this.model.get("data"), x = [];
                $(C).each(function (F, G) {
                    $.each(G.indexdata, function (I, H) {
                        if (Number(H.indexdata) == t.labelYear) {
                            x.push(Number(H.data[t.timeField]))
                        }
                    })
                });
                var s = x.sort(function (G, F) {
                    return G - F
                });
                var q = $.unique(s);
                var u = $.grep(q, function (G, F) {
                    return G < 0
                });
                q = $.grep(q, function (G, F) {
                    return G < 0
                }, true);
                var A = $.grep(q, function (G, F) {
                    return G == 0
                });
                q = $.grep(q, function (G, F) {
                    return G == 0
                }, true);
                var D = parseInt(y) > 1 && A.length > 0 ? parseInt(y) - 1 : parseInt(y);
                var w = this.dataSector(q, D, "equalcount");
                if (!w.isMonodrome) {
                    if (D < y) {
                        w.ranges.unshift("0")
                    }
                    t.timebreaks = w.ranges
                } else {
                    f.showWarning("选择时态段数大于最大段数" + (q.length - 1) + "，请重新选择！")
                }
            }
        },
        toggleCartogramHandler: function () {
            var x = this.$(".chk-toggle-cartogram"), w = x.prop("checked"), t = o;
            var u = this.model.get("config");
            var y = this.model.get("visible");
            if (w) {
                var q = $(".chk-toggle-cartogram");
                var s = 0;
                $.each(q, function (z, A) {
                    if ($(A).prop("checked") == true) {
                        s++
                    }
                });
                if (s > 1) {
                    return f.showWarning("只能有一个数据开启统计图功能"), void x.prop("checked", !1)
                }
            }
            u.cartogram = w;
            if (w && y) {
                this.$("#cartogram-setting").removeClass("hide")
            } else {
                this.$("#cartogram-setting").addClass("hide")
            }
            this.trigger("mapUpdate", this.model)
        },
        cartogramTypeChangeHandler: function (t) {
            var s = $(t.currentTarget), u = s.val(), q = this.model.get("config");
            q.cartogramType = u;
            if (u == "pie") {
                $(".pieBucketConDiv").removeClass("hide")
            } else {
                $(".pieBucketConDiv").addClass("hide")
            }
            this.trigger("mapUpdate", this.model)
        },
        dataTypeChangeHandler: function (x) {
            var w = $(x.currentTarget), y = w.val(), u = this.model.get("config");
            u.cartogramDataType = y;
            if (y == "singleYear") {
                $("#cartogramFieldSelect").parent().addClass("hide");
                $("#cartogramYearDiv").parent().addClass("hide");
                $("#cartogramYearSelect").parent().removeClass("hide");
                $("#cartogramFieldDiv").parent().removeClass("hide");
                var s = [];
                s.push({
                    code: $("#cartogramYearSelect option:selected").val(),
                    name: $("#cartogramYearSelect option:selected").text()
                });
                u.cartogramFields = s;
                var t = $("#cartogramFieldDiv input"), q = [];
                $.each(t, function (z, A) {
                    $(A).prop("checked") && q.push({code: $(A).val(), name: $(A).attr("name")})
                });
                u.cartogramFields = q
            } else {
                if (y == "singleIndex") {
                    $("#cartogramFieldSelect").parent().removeClass("hide");
                    $("#cartogramYearDiv").parent().removeClass("hide");
                    $("#cartogramYearSelect").parent().addClass("hide");
                    $("#cartogramFieldDiv").parent().addClass("hide");
                    var s = [];
                    s.push({
                        code: $("#cartogramFieldSelect option:selected").val(),
                        name: $("#cartogramFieldSelect option:selected").text()
                    });
                    u.cartogramFields = s;
                    var t = $("#cartogramYearDiv input"), q = [];
                    $.each(t, function (z, A) {
                        $(A).prop("checked") && q.push({code: $(A).val(), name: $(A).val()})
                    });
                    u.cartogramYears = q
                }
            }
            this.trigger("mapUpdate", this.model)
        },
        cartogramFieldSelectChangeHandler: function (u) {
            var t = $(u.currentTarget), w = t.val(), q = [], s = this.model.get("config");
            q.push({code: w, name: $("#cartogramFieldSelect option:selected").text()});
            s.cartogramFields = q;
            this.trigger("mapUpdate", this.model)
        },
        cartogramFieldDivChangeHandler: function (u) {
            var t = this.model.get("config");
            var s = $("#cartogramFieldDiv input"), q = [];
            $.each(s, function (w, x) {
                $(x).prop("checked") && q.push({code: $(x).val(), name: $(x).attr("name")})
            });
            t.cartogramFields = q;
            this.trigger("mapUpdate", this.model)
        },
        cartogramYearSelectChangeHandler: function (u) {
            var t = $(u.currentTarget), w = t.val(), q = [], s = this.model.get("config");
            q.push({code: w, name: w});
            s.cartogramYears = q;
            this.trigger("mapUpdate", this.model)
        },
        cartogramYearDivChangeHandler: function (u) {
            var t = this.model.get("config");
            var s = $("#cartogramYearDiv input"), q = [];
            $.each(s, function (w, x) {
                $(x).prop("checked") && q.push({code: $(x).val(), name: $(x).val()})
            });
            t.cartogramYears = q;
            this.trigger("mapUpdate", this.model)
        },
        subsectionFieldChangeHandler: function (t) {
            var s = $(t.currentTarget), u = s.val(), q = this.model.get("config");
            q.cartogramBucketField = u;
            this.cartogramBucketChangeHandler()
        },
        bucketCountChangeHandler: function (t) {
            var s = $(t.currentTarget), u = s.val(), q = this.model.get("config");
            q.cartogramBucketCount = u;
            this.cartogramBucketChangeHandler()
        },
        bucketYearChangeHandler: function (t) {
            var s = $(t.currentTarget), u = s.val(), q = this.model.get("config");
            q.cartogramBucketYear = u;
            this.cartogramBucketChangeHandler()
        },
        cartogramMinSizeChangeHandler: function (t) {
            var s = $(t.currentTarget), u = s.val(), q = this.model.get("config");
            q.cartogramMinSise = Number(u);
            this.cartogramBucketChangeHandler()
        },
        cartogramMaxSizeChangeHandler: function (t) {
            var s = $(t.currentTarget), u = s.val(), q = this.model.get("config");
            q.cartogramMaxSize = Number(u);
            this.cartogramBucketChangeHandler()
        },
        cartogramBucketChangeHandler: function () {
            var x = this.model.get("config");
            if (!x.cartogramBucketField || x.cartogramBucketField == "") {
                return this.trigger("mapUpdate", this.model)
            }
            var s = x.cartogramBucketCount, F = x.cartogramBucketField, D = x.cartogramBucketYear;
            var B = [], z = "equalinterval";
            var G = this.model.get("data");
            $(G).each(function (I, J) {
                $.each(J.indexdata, function (L, K) {
                    if (Number(K.indexdata) == D) {
                        B.push(K.data[F])
                    }
                })
            });
            var u = B.sort(function (J, I) {
                return J - I
            });
            var q = $.unique(u);
            var y = $.grep(q, function (J, I) {
                return J < 0
            });
            var C = $.grep(q, function (J, I) {
                return J == 0
            });
            q = $.grep(q, function (J, I) {
                return J > 0
            });
            var H = parseInt(s);
            var w = this.dataSector(q, H, z);
            var E = this.widthRandom(x.cartogramMinSise, x.cartogramMaxSize, s).reverse();
            var t = [];
            $(w.ranges).each(function (I, J) {
                t.push({value: J, r: E[I]})
            });
            if (!w.isMonodrome) {
                x.cartogramBucket = t;
                this.trigger("mapUpdate", this.model)
            } else {
                x.cartogramBucket = [];
                var A = f;
                this.trigger("mapUpdate", this.model);
                A.showWarning("选择的段数大于已有数据，请重新选择！")
            }
        },
        widthRandom: function (u, s, w) {
            var x = (Number(s) - Number(u)) / Number(w);
            var q = [];
            for (var t = 0; t < Number(w); t++) {
                q.push(s - x * t)
            }
            return q
        },
    });
    LegendView = Backbone.View.extend({
        el: $("#legend-wrapper"),
        legendTemplate: _.template($("#legend-template").html()),
        events: {click: "toggle"},
        initLegend: function (s) {
            var q = this.createLegendObj(s);
            q.items && ($("#legend-container #" + q.id).remove(), $("#legend-container").prepend(this.legendTemplate(q)), $("#legend-container #" + q.id).addClass("hide"))
        },
        updateLegend: function (w) {
            var u = this.createLegendObj(w);
            u.items && ($("#legend-container #" + u.id).replaceWith(this.legendTemplate(u)), w.get("visible") && w.get("showLegend") || $("#legend-container #" + u.id).addClass("hide"), $("#legend-container ul").removeClass("firstShow"), $("#legend-container ul:not(.hide):first").addClass("firstShow"));
            w.get("visible") && w.get("showLegend") && (u.items) ? $("#legend-container #" + u.id).removeClass("hide") : $("#legend-container #" + u.id).addClass("hide");
            var s = $(this.el).find("ul"), q = 0;
            $.each(s, function (t, x) {
                $(x).hasClass("hide") && q++
            });
            q == s.length ? $(this.el).addClass("hide") : $(this.el).removeClass("hide")
        },
        showLegend: function (q) {
            this.showLayerLegend(q), $(this.el).removeClass("hide")
        },
        showLayerLegend: function (s) {
            if (!$("#legend-container #" + s.cid).length > 0) {
                var q = this.createLegendObj(s);
                if (!q.items) {
                    return
                }
                $("#legend-container").prepend(this.legendTemplate(q))
            }
            $("#legend-container #" + s.cid).removeClass("hide"), $("#legend-container ul").removeClass("firstShow"), $("#legend-container ul:not(.hide):first").addClass("firstShow")
        },
        hideLegend: function (q) {
            $("#legend-container #" + q.cid).addClass("hide"), $("#legend-container ul").length == $("#legend-container .hide").length && $(this.el).addClass("hide"), $("#legend-container ul").removeClass("firstShow"), $("#legend-container ul:not(.hide):first").addClass("firstShow")
        },
        clearLegend: function () {
            this.$("#legend-container").empty(), $(this.el).addClass("hide")
        },
        createLegendObj: function (F) {
            var J, I = F.get("geometryType"), C = o;
            "pt" == I || "mpt" == I ? J = "marker" : "pg" != I && "mpg" != I || (J = "polygon");
            var A = F.get("config");
            if (!J) {
                var u = A.type;
                J = 0 == u.indexOf("marker-") ? "marker" : 0 == u.indexOf("polyline-") ? "polyline" : 0 == u.indexOf("polygon-") ? "polygon" : "marker"
            }
            var z = (A.animated && A.timeField == "year" && A.type.indexOf("polygon") != -1) ? A.timeYearDataBreak ? A.timeYearDataBreak : [] : A.breaks,
                K = [], y = "";
            if (A.type == C.configTypes.POLYGON_CHOROPLETH) {
                K.push({color: "#ffffff", value: 0})
            }
            if (A.type == C.configTypes.MARKER_CHOROPLETH || A.type == C.configTypes.POLYGON_CHOROPLETH) {
                $.each(z, function (L, s) {
                    L < z.length - 1 && K.push({color: s.color, value: s.value + "~" + z[L + 1].value})
                })
            } else {
                if (A.type == C.configTypes.MARKER_BUBBLE) {
                    for (var G, E = "single" == A.fillMode ? A.markerColor : void 0, H = 0; H < z.length; H++) {
                        G = z.length > 9 ? C.defaultBubbleLegendMinSize + 1 * z[H].markerSize : C.defaultBubbleLegendMinSize + 2 * z[H].markerSize, H < z.length - 1 && K.push({
                            size: G,
                            color: E,
                            value: z[H].value + "~" + z[H + 1].value
                        })
                    }
                    if ("multi" == A.fillMode) {
                        var D = A.colorBreaks;
                        $.each(D, function (L, s) {
                            L < D.length - 1 && K.push({color: s.color, value: s.value + "~" + D[L + 1].value})
                        })
                    }
                    y = z.length > 9 ? "width:20px;" : "width:40px;"
                } else {
                    if (A.type == C.configTypes.MARKER_CATEGORY || A.type == C.configTypes.POLYGON_CATEGORY) {
                        var q = (A.animated && A.timeField == "year" && A.type.indexOf("polygon") != -1) ? A.timeYearDataColors ? A.timeYearDataColors : [] : A.fieldColors;
                        var x = (A.animated && A.timeField == "year" && A.type.indexOf("polygon") != -1) ? A.timeYearDataBreak ? A.timeYearDataBreak : [] : A.fieldValues;
                        var B = [];
                        if (x.length != q.length) {
                            B = x.slice(0, q.length - 1);
                            B.push("其它")
                        } else {
                            B = x.slice(0)
                        }
                        $.each(B, function (L, s) {
                            K.push({color: q[L], value: s})
                        })
                    } else {
                        K = z
                    }
                }
            }
            var w = F.get("legendOrder");
            return "desc" == w, {
                id: F.cid,
                type: J,
                title: F.get("legendTitle") ? F.get("legendTitle") : F.get("dataName"),
                outlineColor: A.outlineColor,
                items: K,
                widthVal: y
            }
        },
        toggle: function () {
            var q = $(this.el);
            q.hasClass("toggle") ? (q.removeClass("toggle"), 0 == this.$('#legend-container ul:not(".hide")').length && q.addClass("hide")) : q.addClass("toggle")
        }
    });

    function c() {
        this.colors = {}, this.colors["color-ramp-green"] = ["#00B050", "#ffffff"], this.colors["color-ramp-blue"] = ["#0070c0", "#ffffff"], this.colors["color-ramp-red"] = ["#C00000", "#ffffff"], this.colors["color-ramp-purple"] = ["#7030A0", "#ffffff"], this.colors["color-ramp-black"] = ["#000000", "#ffffff"], this.colors["color-ramp-orange"] = ["#FFC000", "#ffffff"], this.colors["color-ramp-yellow"] = ["#FFFF00", "#ffffff"], this.colors["color-ramp-green-red"] = ["#C00000", "#00B050"], this.colors["color-ramp-blue-red"] = ["#C00000", "#0070c0"], this.colors["color-ramp-temperature"] = ["#fffcff", "#fff5ff", "#ffedff", "#ffe5ff", "#ffdeff", "#ffd6ff", "#ffcfff", "#ffc7ff", "#ffbfff", "#ffb8ff", "#ffb0ff", "#ffa8ff", "#ffa1ff", "#ff99ff", "#ff91ff", "#ff8aff", "#ff82ff", "#ff7aff", "#ff73ff", "#ff6bff", "#ff63ff", "#ff5cff", "#ff54ff", "#ff4cff", "#ff45ff", "#ff3dff", "#ff36ff", "#ff2eff", "#ff26ff", "#ff1fff", "#ff17ff", "#ff0fff", "#ff08ff", "#ff00ff", "#ff00ff", "#fb00ff", "#f700ff", "#f200ff", "#ee00ff", "#ea00ff", "#e600ff", "#e100ff", "#dd00ff", "#d900ff", "#d400ff", "#d000ff", "#cc00ff", "#c800ff", "#c400ff", "#bf00ff", "#bb00ff", "#b700ff", "#b300ff", "#ae00ff", "#aa00ff", "#a600ff", "#a200ff", "#9d00ff", "#9900ff", "#9500ff", "#9000ff", "#8c00ff", "#8800ff", "#8400ff", "#8000ff", "#7b00ff", "#7700ff", "#7300ff", "#6f00ff", "#6a00ff", "#6600ff", "#6200ff", "#5d00ff", "#5900ff", "#5500ff", "#5100ff", "#4c00ff", "#4800ff", "#4400ff", "#4000ff", "#3c00ff", "#3700ff", "#3300ff", "#2f00ff", "#2b00ff", "#2600ff", "#2200ff", "#1e00ff", "#1900ff", "#1500ff", "#1100ff", "#0d00ff", "#0800ff", "#0400ff", "#0000ff", "#0000ff", "#0004ff", "#0008ff", "#000dff", "#0011ff", "#0015ff", "#001aff", "#001eff", "#0022ff", "#0026ff", "#002aff", "#002fff", "#0033ff", "#0037ff", "#003cff", "#0040ff", "#0044ff", "#0048ff", "#004cff", "#0051ff", "#0055ff", "#0059ff", "#005eff", "#0062ff", "#0066ff", "#006aff", "#006eff", "#0073ff", "#0077ff", "#007bff", "#0080ff", "#0084ff", "#0088ff", "#008cff", "#0091ff", "#0095ff", "#0099ff", "#009dff", "#00a2ff", "#00a6ff", "#00aaff", "#00aeff", "#00b3ff", "#00b7ff", "#00bbff", "#00bfff", "#00c4ff", "#00c8ff", "#00ccff", "#00d0ff", "#00d5ff", "#00d9ff", "#00ddff", "#00e1ff", "#00e5ff", "#00eaff", "#00eeff", "#00f2ff", "#00f7ff", "#00fbff", "#00ffff", "#00ffff", "#00fffb", "#00fff7", "#00fff2", "#00ffee", "#00ffea", "#00ffe5", "#00ffe1", "#00ffdd", "#00ffd9", "#00ffd5", "#00ffd0", "#00ffcc", "#00ffc8", "#00ffc4", "#00ffbf", "#00ffbb", "#00ffb7", "#00ffb3", "#00ffae", "#00ffaa", "#00ffa6", "#00ffa2", "#00ff9d", "#00ff99", "#00ff95", "#00ff91", "#00ff8c", "#00ff88", "#00ff84", "#00ff80", "#00ff7b", "#00ff77", "#00ff73", "#00ff6e", "#00ff6a", "#00ff66", "#00ff62", "#00ff5e", "#00ff59", "#00ff55", "#00ff51", "#00ff4c", "#00ff48", "#00ff44", "#00ff40", "#00ff3c", "#00ff37", "#00ff33", "#00ff2f", "#00ff2a", "#00ff26", "#00ff22", "#00ff1e", "#00ff1a", "#00ff15", "#00ff11", "#00ff0d", "#00ff08", "#00ff04", "#00ff00", "#00ff00", "#04ff00", "#09ff00", "#0dff00", "#11ff00", "#15ff00", "#1aff00", "#1eff00", "#22ff00", "#26ff00", "#2bff00", "#2fff00", "#33ff00", "#37ff00", "#3cff00", "#40ff00", "#44ff00", "#48ff00", "#4dff00", "#51ff00", "#55ff00", "#59ff00", "#5eff00", "#62ff00", "#66ff00", "#6aff00", "#6fff00", "#73ff00", "#77ff00", "#7bff00", "#80ff00", "#84ff00", "#88ff00", "#8cff00", "#91ff00", "#95ff00", "#99ff00", "#9dff00", "#a2ff00", "#a6ff00", "#aaff00", "#aeff00", "#b3ff00", "#b7ff00", "#bbff00", "#bfff00", "#c4ff00", "#c8ff00", "#ccff00", "#d0ff00", "#d4ff00", "#d9ff00", "#ddff00", "#e1ff00", "#e5ff00", "#eaff00", "#eeff00", "#f2ff00", "#f6ff00", "#fbff00", "#ffff00", "#ffff00", "#fffb00", "#fff700", "#fff200", "#ffee00", "#ffea00", "#ffe600", "#ffe100", "#ffdd00", "#ffd900", "#ffd500", "#ffd000", "#ffcc00", "#ffc800", "#ffc400", "#ffbf00", "#ffbb00", "#ffb700", "#ffb300", "#ffae00", "#ffaa00", "#ffa600", "#ffa200", "#ff9d00", "#ff9900", "#ff9500", "#ff9100", "#ff8c00", "#ff8800", "#ff8400", "#ff8000", "#ff8000", "#fc7a00", "#fa7900", "#f77300", "#f57200", "#f26d00", "#f06800", "#ed6700", "#eb6200", "#e86100", "#e65c00", "#e35700", "#e05600", "#de5100", "#db4d00", "#d94c00", "#d64700", "#d44700", "#d14200", "#cf3e00", "#cc3d00", "#c93900", "#c73800", "#c43400", "#c23100", "#bf3000", "#bd2c00", "#ba2b00", "#b82800", "#b52400", "#b32400", "#b02000", "#ad2000", "#ab1d00", "#a81900", "#a61900", "#a31600", "#a11500", "#9e1200", "#9c1000", "#990f00", "#960d00", "#940a00", "#910a00", "#8f0700", "#8c0700", "#8a0500", "#870200", "#850200", "#820000", "#800000"].reverse(), this.colors["color-ramp-coldhotdiverging"] = ["#4575b5", "#4577b5", "#4579b5", "#477eb8", "#4780b8", "#4782b8", "#4783b8", "#4a86b8", "#4a8aba", "#4a8cba", "#4a8dba", "#4d90ba", "#4d92ba", "#4e96bd", "#4e98bd", "#4f9abd", "#4f9cbd", "#4f9ebd", "#4fa0bd", "#52a4bf", "#52a6bf", "#52a7bf", "#52a9bf", "#54abbf", "#55b0c2", "#55b2c2", "#55b3c2", "#57b6c2", "#57b7c2", "#58bbc4", "#58bdc4", "#5abfc4", "#5ac0c4", "#5ac2c4", "#5bc7c7", "#5ec7c5", "#5ec7c3", "#5ec7c2", "#5ec7c0", "#60c9c0", "#60c9bf", "#60c9bd", "#60c9bb", "#63c9ba", "#64ccbb", "#64ccb9", "#64ccb7", "#66ccb6", "#66ccb4", "#66ccb2", "#67cfb3", "#6acfb2", "#6acfb1", "#6acfaf", "#6acfad", "#6bd1ad", "#6dd1ac", "#6dd1ab", "#6dd1a9", "#6dd1a7", "#70d4a9", "#70d4a7", "#70d4a5", "#70d4a4", "#73d4a3", "#74d6a3", "#74d6a2", "#74d6a0", "#75d69f", "#75d69e", "#77d99e", "#77d99d", "#7ad99d", "#7ad99b", "#7ad999", "#7bdb99", "#7ddb99", "#7ddb97", "#7ddb96", "#7ddb94", "#7fdb95", "#81de95", "#81de93", "#81de92", "#83de92", "#83de90", "#84e090", "#84e08f", "#86e08f", "#86e08e", "#86e08c", "#88e38d", "#8be38e", "#8be38c", "#8be38b", "#8ce38b", "#91e68f", "#93e68f", "#94e68f", "#96e68f", "#9ae691", "#9ce892", "#9ee892", "#9fe892", "#a1e892", "#a4e894", "#a7eb96", "#a9eb96", "#aaeb96", "#adeb99", "#afeb99", "#b0eb99", "#b3ed9a", "#b6ed9c", "#b7ed9c", "#b8ed9c", "#baed9c", "#bff0a1", "#c1f0a1", "#c2f0a1", "#c3f0a1", "#c6f0a3", "#c8f2a4", "#caf2a4", "#cbf2a4", "#cef2a7", "#cff2a7", "#d3f5a9", "#d4f5a9", "#d6f5ab", "#d7f5ab", "#d9f5ab", "#dcf7ac", "#def7af", "#dff7af", "#e0f7af", "#e1f7af", "#e6fab4", "#e7fab4", "#e9fab4", "#eafab4", "#ebfab6", "#ecfab6", "#effcb8", "#f1fcb8", "#f2fcbb", "#f3fcbb", "#f4fcbb", "#f8ffbd", "#faffbf", "#fbffbf", "#fcffbf", "#fdffbf", "#feffbf", "#ffffbf", "#ffffbf", "#fffebd", "#fcfab8", "#fcf8b6", "#fcf7b3", "#fcf6b0", "#faf2ad", "#faf1aa", "#faefa8", "#f7eaa3", "#f7e9a1", "#f7e79e", "#f5e39b", "#f5e198", "#f5df96", "#f5dd93", "#f2d78e", "#f2d58c", "#f2d38a", "#f0cf87", "#f0cc84", "#f0c982", "#f0c77f", "#edc27c", "#edbf79", "#edbb76", "#ebb773", "#ebb470", "#ebb16f", "#e8ab6a", "#e8a869", "#e8a566", "#e8a264", "#e69d61", "#e6995f", "#e6965c", "#e39058", "#e38c56", "#e38854", "#e38552", "#e07f4e", "#e07b4c", "#e0774a", "#de7247", "#de6e45", "#de6942", "#de6540", "#db5f3d", "#db5b3b", "#db5639", "#d95236", "#d94d34", "#d94832", "#d6422f", "#d63e2d", "#d6392b", "#d63428", "#d62f27"].reverse(), this.colors["color-ramp-yellow2green2blue"] = ["#ffff7f", "#fdff7d", "#f8fc79", "#f5fc77", "#f3fc74", "#f0fc72", "#ecfa6e", "#e9fa6c", "#e7fa69", "#e4fa67", "#def763", "#dbf760", "#d8f75e", "#d3f55a", "#d0f558", "#cdf556", "#caf554", "#c4f250", "#c1f24e", "#bdf24b", "#b9f248", "#b4f046", "#b1f043", "#adf041", "#a7ed3d", "#a4ed3d", "#a0ed3b", "#9ced39", "#97eb36", "#92eb34", "#8eeb32", "#8aeb2f", "#84e82c", "#7fe82a", "#7be827", "#76e825", "#71e622", "#6ce620", "#67e61e", "#61e31c", "#5ce319", "#57e316", "#52e314", "#4ce012", "#47e010", "#42e00d", "#3de00b", "#37e009", "#37e009", "#30de09", "#2bde0b", "#23db0b", "#1cdb0b", "#15d90b", "#10d90d", "#0dd610", "#0dd617", "#0fd41f", "#0fd426", "#0fd12c", "#0fd132", "#10cf3a", "#10cf40", "#10cc45", "#10cc4c", "#12c952", "#12c958", "#12c75d", "#14c764", "#13c469", "#13c46f", "#13c273", "#15c27a", "#15bf7e", "#15bf83", "#17bd88", "#17bd8e", "#17ba91", "#17ba97", "#18b89b", "#18b8a0", "#17b5a3", "#17b5a8", "#19b3ab", "#19b3b0", "#19adb0", "#1aa9b0", "#1aa1ad", "#1a9cad", "#1995ab", "#1990ab", "#1993ab", "#1990ab", "#198ba8", "#1989a8", "#1985a6", "#1782a6", "#177ea3", "#177ba3", "#1779a3", "#1775a1", "#1773a1", "#166f9e", "#166c9e", "#14689c", "#14669c", "#14639c", "#145f99", "#145d99", "#135996", "#135796", "#135494", "#125194", "#124f94", "#124b91", "#124991", "#11468f", "#11448f", "#11408c", "#113e8c", "#0f3b8c", "#0f388a", "#0f368a", "#0f3387", "#0f3187", "#0f2e85", "#0f2c85", "#0f2a85", "#0d2682", "#0d2482", "#0d2280", "#0d2080", "#0c1d7d", "#0c1b7d", "#0c197d", "#0c177a", "#0c157a", "#0c1378", "#0c1178", "#0c0f78"].reverse(), this.colors["color-ramp-cyan2purple"] = ["#00f5f5", "#00f1f5", "#00edf5", "#00e9f5", "#00e5f5", "#00e1f5", "#00dcf5", "#00d8f5", "#00d4f5", "#00d0f5", "#00ccf5", "#00c8f5", "#00c4f5", "#00c0f5", "#00bcf5", "#00b8f5", "#00b4f5", "#00b0f5", "#00acf5", "#00a7f5", "#00a3f5", "#009ff5", "#009bf5", "#0097f5", "#0093f5", "#008ff5", "#008bf5", "#0087f5", "#0083f5", "#007ff5", "#007bf5", "#0076f5", "#0072f5", "#006ef5", "#006af5", "#0066f5", "#0062f5", "#005ef5", "#005af5", "#0056f5", "#0052f5", "#004ef5", "#0049f5", "#0045f5", "#0041f5", "#003df5", "#0039f5", "#0035f5", "#0031f5", "#002df5", "#0029f5", "#0025f5", "#0021f5", "#001df5", "#0019f5", "#0014f5", "#0010f5", "#000cf5", "#0008f5", "#0004f5", "#0000f5", "#0000f5", "#0400f5", "#0800f5", "#0c00f5", "#1000f5", "#1400f5", "#1800f5", "#1d00f5", "#2100f5", "#2500f5", "#2900f5", "#2d00f5", "#3100f5", "#3500f5", "#3900f5", "#3d00f5", "#4100f5", "#4500f5", "#4900f5", "#4e00f5", "#5200f5", "#5600f5", "#5a00f5", "#5e00f5", "#6200f5", "#6600f5", "#6a00f5", "#6e00f5", "#7200f5", "#7600f5", "#7b00f5", "#7f00f5", "#8300f5", "#8700f5", "#8b00f5", "#8f00f5", "#9300f5", "#9700f5", "#9b00f5", "#9f00f5", "#a300f5", "#a700f5", "#ac00f5", "#b000f5", "#b400f5", "#b800f5", "#bc00f5", "#c000f5", "#c400f5", "#c800f5", "#cc00f5", "#d000f5", "#d400f5", "#d800f5", "#dd00f5", "#e100f5", "#e500f5", "#e900f5", "#ed00f5", "#f100f5", "#f500f5"].reverse(), this.colors["color-ramp-purple2green"] = ["#4d2096", "#4a2196", "#472299", "#452399", "#42249c", "#3f259c", "#3b259c", "#39289e", "#35289e", "#342aa1", "#302aa1", "#2e2ca1", "#2c2ea3", "#2d33a3", "#2e38a6", "#303ea6", "#3244a8", "#3248a8", "#344da8", "#3552ab", "#3758ab", "#385dad", "#3962ad", "#3965ad", "#3c6cb0", "#3c70b0", "#3e77b3", "#3e7bb3", "#4180b3", "#4185b5", "#4389b5", "#4690b8", "#4694b8", "#4798b8", "#489eba", "#4aa2ba", "#4ca8bd", "#4eacbd", "#4eb0bd", "#50b6bf", "#50b9bf", "#54c0c2", "#54c2c0", "#56c4bf", "#56c4bb", "#58c4b7", "#5bc7b7", "#5bc7b3", "#5fc9b2", "#5fc9ae", "#60c9ab", "#62ccaa", "#64cca8", "#65cfa7", "#67cfa4", "#67cfa0", "#6bd19f", "#6bd19c", "#6fd49c", "#70d49a", "#70d496", "#74d696", "#74d693", "#77d993", "#77d990", "#7bdb90", "#7bdb8c", "#7ddb8b", "#7ede89", "#81de89", "#82e087", "#84e085", "#85e084", "#8de388", "#92e38b", "#97e68d", "#9ce68f", "#9fe68f", "#a5e892", "#a8e892", "#aeeb96", "#b1eb96", "#b6eb99", "#baed9a", "#beed9c", "#c3f09e", "#c7f0a1", "#caf0a1", "#cff2a4", "#d3f2a7", "#d8f5a9", "#dbf5ab", "#dff7ac", "#e3f7af", "#e5f7af", "#ebfab4", "#edfab4", "#f2fcb8", "#f4fcb8", "#f7fcbb", "#fcffbd", "#feffbf", "#fffebf", "#ffffbf", "#fbfcbb", "#f8fab6", "#f7fab4", "#f3f7af", "#f0f5ab", "#ecf2a7", "#e8f0a3", "#e7f0a1", "#e2ed9c", "#e0eb99", "#dbe894", "#dae892", "#d6e68f", "#d1e38b", "#cde086", "#cade83", "#c8de81", "#c3db7d", "#c0d97a", "#bbd675", "#b7d473", "#b6d470", "#b1d16d", "#adcf6a", "#a8cc66", "#a3c963", "#a1c960", "#9fc75e", "#9ac45a", "#96c257", "#91bf54", "#8ebf52", "#8abd4f", "#87ba4d", "#83b84a", "#80b847", "#7bb545", "#77b342", "#72b03f", "#6fad3c", "#6cad3b", "#68ab38", "#64a836", "#5fa633", "#5ba331", "#5aa32f", "#55a12d", "#519e2b", "#4d9c28", "#499926", "#469925", "#439623", "#3f9421", "#3b911f", "#378f1d", "#348f1b", "#308c19", "#2e8a17", "#2a8716", "#278714", "#248513", "#208211", "#1d8010", "#1b7d0e", "#187d0c", "#147a0b"].reverse(), this.colors["color-ramp-brown2blue"] = ["#9c551f", "#9e5a21", "#9e5a23", "#a15f25", "#a36327", "#a6662a", "#a6682b", "#a86b2d", "#ab6f30", "#ab7232", "#ad7434", "#b07937", "#b37e3a", "#b37f3b", "#b5833e", "#b88640", "#b88942", "#ba8d45", "#bd9048", "#bf944a", "#bf974c", "#c29a50", "#c49e52", "#c49f55", "#c7a457", "#c9a85b", "#ccab5e", "#ccad60", "#cfb263", "#d1b566", "#d1b768", "#d4ba6c", "#d6be70", "#d9c373", "#d9c375", "#dbc778", "#decc7c", "#decc7e", "#e0d082", "#e3d386", "#e6d88a", "#e6da8d", "#e8dc90", "#ebe194", "#ebe396", "#ede59a", "#f0e99e", "#f2eba2", "#f2eda4", "#f5f1a9", "#f7f3ac", "#f7f5af", "#faf9b4", "#fcfbb8", "#ffffbd", "#ffffbf", "#ffffbf", "#fafcbb", "#f7fcb8", "#f3fab6", "#eef7b2", "#ebf7af", "#e6f5ab", "#e1f2a7", "#ddf2a4", "#d9f0a3", "#d3ed9f", "#cfed9c", "#caeb99", "#c4e894", "#c1e894", "#bce691", "#b5e38d", "#afe089", "#aae086", "#a6de85", "#9fdb81", "#9bdb7f", "#94d97b", "#8ed678", "#89d675", "#84d474", "#7ed171", "#78d16f", "#73cf6c", "#6bcc68", "#68cc68", "#64c967", "#62c768", "#5fc76a", "#5cc46a", "#59c26b", "#59c26e", "#56bf6f", "#53bd6f", "#52bd72", "#4eba72", "#4db874", "#4cb877", "#48b577", "#45b379", "#44b37c", "#41b07c", "#40ad7e", "#3ead81", "#3cab82", "#39a883", "#37a685", "#37a688", "#34a389", "#32a18b", "#30a18e", "#2e9e8f", "#2d9c91", "#2b9c94", "#299995", "#279696", "#269296", "#238c94", "#238691", "#228291"].reverse(), this.colors["color-ramp-patrialspectrum"] = ["#f2f1a2", "#f2f19f", "#f2f19e", "#f2f19b", "#f2f199", "#f2f096", "#f5f396", "#f5f393", "#f5f390", "#f5f38e", "#f5f38b", "#f5f389", "#f5f387", "#f5f385", "#f5f382", "#f5f380", "#f5f37d", "#f7f77b", "#f7f779", "#f7f776", "#f7f774", "#f7f771", "#f7f76f", "#f7f76c", "#f7f76b", "#f7f768", "#f7f766", "#f7f763", "#f7f760", "#fafa5f", "#fafa5c", "#fafa5a", "#fafa57", "#fafa55", "#fafa52", "#fafa50", "#fafa4d", "#fafa4b", "#fafa49", "#fafa46", "#fcfc44", "#fcfc41", "#fcfc3f", "#fcfc3c", "#fcfc3a", "#fcfc37", "#fcfc35", "#fcfc32", "#fcfc2f", "#fcfc2d", "#fcfc2a", "#ffff29", "#ffff26", "#ffff24", "#ffff21", "#ffff1f", "#ffff1c", "#ffff19", "#ffff17", "#ffff14", "#ffff12", "#ffff0f", "#ffff0d", "#ffff0a", "#ffff08", "#ffff05", "#ffff03", "#ffff00", "#ffff00", "#fffb00", "#fff700", "#fff200", "#ffee00", "#ffea00", "#ffe600", "#ffe100", "#ffdd00", "#ffd900", "#ffd500", "#ffd000", "#ffcc00", "#ffc800", "#ffc400", "#ffbf00", "#ffbb00", "#ffb700", "#ffb300", "#ffae00", "#ffaa00", "#ffa600", "#ffa200", "#ff9d00", "#ff9900", "#ff9500", "#ff9100", "#ff8c00", "#ff8800", "#ff8400", "#ff8000", "#ff7b00", "#ff7700", "#ff7300", "#ff6f00", "#ff6a00", "#ff6600", "#ff6200", "#ff5e00", "#ff5900", "#ff5500", "#ff5100", "#ff4d00", "#ff4800", "#ff4400", "#ff4000", "#ff3c00", "#ff3700", "#ff3300", "#ff2f00", "#ff2b00", "#ff2600", "#ff2200", "#ff1e00", "#ff1a00", "#ff1500", "#ff1100", "#ff0d00", "#ff0900", "#ff0400", "#ff0000", "#ff0000", "#ff1e00", "#ff3c00", "#ff5900", "#ff7700", "#ff9500", "#ffb300", "#ffd000", "#ffee00", "#f2ff00", "#d4ff00", "#b7ff00", "#99ff00", "#7bfc03", "#5efc03", "#41fc03", "#24fc03", "#07fc03", "#03fc1c", "#03fc39", "#03fc56", "#03fc73", "#03fc90", "#03fcad", "#03fcca", "#03fce7", "#03f4fc", "#03d7fc", "#03bafc", "#039dfc", "#037ffc", "#0362fc", "#0345fc", "#0328fc", "#030bfc", "#1803fc", "#3503fc", "#5203fc", "#6f03fc", "#8c03fc", "#a903fc", "#c603fc", "#e303fc", "#fc03f8", "#fc03db", "#fc03be", "#fc03a1", "#fc0384", "#fc0367", "#fc034a", "#fc032c", "#fc0345", "#fc034a", "#fc034e", "#fc0352", "#fc0356", "#fa0359", "#fa035e", "#fa0362", "#fa0366", "#fa036a", "#fa036e", "#fa0573", "#fa0577", "#fa057b", "#f7057e", "#f70582", "#f70586", "#f7058a", "#f7058e", "#f70592", "#f70596", "#f7059a", "#f5059d", "#f505a1", "#f505a5", "#f505a9", "#f505ad", "#f505b1", "#f505b5", "#f505b9", "#f505bd", "#f208bf", "#f208c3", "#f208c7", "#f208cb", "#f208cf", "#f208d3", "#f208d7", "#f208db", "#f208de", "#f008e1", "#f008e4", "#f008e8", "#f008ec", "#f008f0", "#ec08f0", "#e808f0", "#e408f0", "#de07ed", "#da07ed", "#d607ed", "#d207ed", "#ce07ed", "#cb07ed", "#c707ed", "#c307ed", "#bf07ed", "#bb07ed", "#b707ed", "#b407ed", "#b007ed", "#b007ed", "#ac07ed", "#a707eb", "#a307eb", "#9d07e8", "#9907e8", "#9407e6", "#9107e6", "#8b07e3", "#8707e3", "#8207e0", "#7e07e0", "#7a07de", "#7607de", "#7209db", "#6e09db", "#6a09d9", "#6609d9", "#6108d6", "#5e08d6", "#5a08d4", "#5608d4", "#5208d1", "#4e08d1", "#4a08cf", "#4708cf", "#4308cc", "#4008cc", "#3b08c9", "#3808c9", "#3408c7", "#3108c7", "#2d08c4", "#2a08c4", "#2708c2", "#2408c2", "#2007bf", "#1d07bf", "#1a07bd", "#1707bd", "#1307ba", "#1007ba", "#0d07b8", "#0a07b8", "#0707b5", "#070ab5", "#070db3", "#0710b3", "#0712b0", "#0715b0", "#0717ad", "#071aad", "#071dad"].reverse(), this.colors["color-ramp-red2blue"] = ["#c44439", "#c4483a", "#c74e3e", "#c75240", "#c95541", "#c95942", "#cc5e46", "#cc6247", "#cc664a", "#cf6b4c", "#cf6d4c", "#d17250", "#d17551", "#d47b55", "#d47f57", "#d48259", "#d6855a", "#d6895c", "#d98e5f", "#d99262", "#db9664", "#db9967", "#db9b67", "#dea06a", "#dea46d", "#e0a870", "#e0ab72", "#e3b076", "#e3b378", "#e3b578", "#e6ba7c", "#e6bd7e", "#e8c182", "#e8c384", "#ebc888", "#ebca88", "#ebcc8a", "#edd18e", "#edd391", "#f0d895", "#f0da98", "#f2dd99", "#f2df9b", "#f2e19e", "#f5e6a1", "#f5e8a4", "#f7eba8", "#f7eca8", "#faf1ad", "#faf2af", "#faf4b1", "#fcf7b6", "#fcf9b8", "#fffdba", "#fffebd", "#ffffbf", "#ffffbf", "#fdffbd", "#fbffbd", "#f5fcb8", "#f3fcb6", "#f0fcb6", "#edfcb3", "#e8faaf", "#e6faaf", "#e3faad", "#e0faad", "#daf7a8", "#d6f7a6", "#d4f7a6", "#d0f7a3", "#caf59f", "#c7f59f", "#c3f59d", "#bff59b", "#baf299", "#b5f296", "#b0f294", "#adf294", "#a6f090", "#a1f08d", "#9ef08d", "#99f08b", "#93ed8a", "#8eed87", "#88ed85", "#85ed85", "#81eb85", "#7feb86", "#7feb8a", "#7ceb8b", "#79e88c", "#79e88f", "#76e891", "#74e893", "#73e695", "#71e698", "#6ee69a", "#6ee69e", "#6ce6a1", "#6be3a3", "#68e3a6", "#66e3a9", "#66e3ad", "#62e0ae", "#61e0b1", "#61e0b6", "#5ee0b9", "#5bdebb", "#5bdec0", "#59dec3", "#56dec7", "#55dbc9", "#53dbcd", "#53dbd2", "#51dbd6", "#4ed9d9", "#4ed4d9", "#4cd0d9", "#4acbd9", "#49c3d6", "#46bed6", "#45b9d6", "#45b4d6", "#42add4", "#3fa7d4", "#3fa2d4", "#3e9dd4", "#3a95d1", "#3a90d1", "#398ad1", "#3985d1", "#367dcf", "#3477cf", "#3472cf", "#326bcf", "#3065cf", "#3060cf"].reverse(), this.colors["color-ramp-conditionnumber"] = ["#006100", "#026300", "#036600", "#056900", "#076b00", "#096e00", "#0b7000", "#0d7300", "#107500", "#127800", "#147a00", "#177d00", "#1a8000", "#1c8200", "#1f8500", "#228700", "#238a00", "#258c00", "#298f00", "#2c9100", "#2f9400", "#329600", "#369900", "#399c00", "#3d9e00", "#40a100", "#44a300", "#48a600", "#4ca800", "#50ab00", "#54ad00", "#58b000", "#5cb300", "#61b500", "#65b800", "#69ba00", "#6ebd00", "#73bf00", "#78c200", "#7cc400", "#81c700", "#86c900", "#8bcc00", "#91cf00", "#96d100", "#9bd400", "#a1d600", "#a6d900", "#a8db00", "#aede00", "#b3e000", "#b9e300", "#c0e600", "#c5e800", "#cceb00", "#d1ed00", "#d8f000", "#def200", "#e5f500", "#ebf700", "#f2fa00", "#f8fc00", "#ffff00", "#ffff00", "#fffb00", "#fff700", "#fff200", "#ffee00", "#ffea00", "#ffe600", "#ffe100", "#ffdd00", "#ffd900", "#ffd500", "#ffd000", "#ffcc00", "#ffc800", "#ffc400", "#ffbf00", "#ffbb00", "#ffb700", "#ffb300", "#ffae00", "#ffaa00", "#ffa600", "#ffa200", "#ff9d00", "#ff9900", "#ff9500", "#ff9100", "#ff8c00", "#ff8800", "#ff8400", "#ff8000", "#ff7b00", "#ff7700", "#ff7300", "#ff6f00", "#ff6a00", "#ff6600", "#ff6200", "#ff5e00", "#ff5900", "#ff5500", "#ff5100", "#ff4d00", "#ff4800", "#ff4400", "#ff4000", "#ff3c00", "#ff3700", "#ff3300", "#ff2f00", "#ff2b00", "#ff2600", "#ff2200"].reverse(), this.colors["color-ramp-precipitation"] = ["#c2523c", "#c4543a", "#c45539", "#c7583a", "#c75937", "#c95b36", "#cc5d35", "#cc5e33", "#cf6234", "#cf6332", "#d16630", "#d4682f", "#d46a2d", "#d66e2d", "#d66f2b", "#d97229", "#db7528", "#db7725", "#de7c25", "#de7e24", "#e08121", "#e38520", "#e3871d", "#e68c1e", "#e68e1c", "#e89219", "#eb9617", "#eb9915", "#ed9e15", "#eda113", "#eda113", "#eda413", "#f0a911", "#f0ad11", "#f0b00e", "#f2b50e", "#f2b90e", "#f5bf0c", "#f5c30c", "#f5c60a", "#f7cb0a", "#f7cf08", "#f7d308", "#fada08", "#fadd05", "#fae105", "#fce703", "#fceb03", "#fff203", "#fff700", "#fffb00", "#ffff00", "#ffff00", "#f6ff00", "#ebfc00", "#e3fc00", "#d9fa00", "#d0fa00", "#c6f700", "#bdf700", "#b4f500", "#acf500", "#a1f200", "#99f200", "#90f000", "#88f000", "#7eed00", "#77ed00", "#6eeb00", "#66eb00", "#5de800", "#55e800", "#4de600", "#45e600", "#3de300", "#35e300", "#2de000", "#25e000", "#1ede00", "#16de00", "#0fdb00", "#07db00", "#00db00", "#00db00", "#03d90a", "#04d612", "#04d419", "#07d122", "#08cf29", "#0acc31", "#0ac937", "#0cc93e", "#0ec746", "#0fc44c", "#0fc251", "#11bf57", "#13bd5c", "#14ba62", "#14b866", "#16b56b", "#17b36f", "#19b074", "#18ad77", "#19ab7a", "#1ba87e", "#1ca883", "#1ca686", "#1da388", "#1ea18b", "#209e8d", "#1f9c90", "#209991", "#20998f", "#209991", "#1e9690", "#1e9692", "#1e9694", "#1e9696", "#1c9294", "#1c9094", "#1c8e94", "#1c8c94", "#1a8791", "#1a8591", "#1a8391", "#187f8f", "#187d8f", "#187b8f", "#18798f", "#17758c", "#17738c", "#17718c", "#176f8c", "#156b8a", "#15698a", "#15678a", "#136287", "#136087", "#135e87", "#135c87", "#115985", "#115785", "#115585", "#115385", "#104f82", "#104d82", "#104b82", "#104982", "#0e4580", "#0e4380", "#0e4180", "#0c3d7d", "#0c3b7d", "#0c397d", "#0c377d", "#0b347a", "#0b327a", "#0b307a", "#0b2e7a", "#0b2c7a"].reverse(), this.colors["color-ramp-pink2yellowgreen"] = ["#9e1e71", "#9e1e75", "#a1207d", "#a12081", "#a12286", "#a1228a", "#a32490", "#a32494", "#a32498", "#a626a0", "#a626a4", "#a428a6", "#a228a8", "#9e2aa8", "#992aa8", "#952aa8", "#942cab", "#902cab", "#8c2eab", "#892fad", "#8530ad", "#8130ad", "#8033b0", "#7c33b0", "#7833b0", "#7434b0", "#7235b3", "#6f37b3", "#6b37b3", "#693ab5", "#653ab5", "#613ab5", "#5e3cb5", "#5b3db8", "#593fb8", "#553fb8", "#5341ba", "#4f41ba", "#4b41ba", "#4a44bd", "#4644bd", "#4648bd", "#464cbd", "#4953bf", "#4956bf", "#495abf", "#4b61c2", "#4b65c2", "#4e6bc2", "#4e6fc2", "#5175c4", "#5179c4", "#517dc4", "#5484c7", "#5487c7", "#568dc7", "#5792c9", "#5896c9", "#589ac9", "#589ec9", "#5ca5cc", "#5ca9cc", "#5eadcc", "#5fb3cf", "#61b7cf", "#61bbcf", "#64c1d1", "#64c4d1", "#64c8d1", "#66ccd1", "#68d2d4", "#6ad4d2", "#6ad4cf", "#6dd6cd", "#6dd6ca", "#6dd6c6", "#70d6c3", "#71d9c3", "#73d9bf", "#73d9bc", "#77dbbb", "#77dbb8", "#77dbb4", "#7adeb4", "#7adeb1", "#7cdeaf", "#7cdeac", "#7fe0ab", "#7fe0a8", "#7fe0a4", "#84e3a5", "#84e3a2", "#86e3a0", "#86e39d", "#8ae69e", "#8ae69b", "#8ae698", "#8ee898", "#8ee895", "#90e894", "#92eb93", "#96eb94", "#99eb94", "#9ceb94", "#a1ed97", "#a4ed97", "#a9ed9a", "#aef09c", "#b3f09e", "#b5f09e", "#bcf2a2", "#bef2a2", "#c1f2a2", "#c5f2a4", "#caf5a6", "#cef5a9", "#d0f5a9", "#d5f7ac", "#d8f7ac", "#daf7ac", "#def7af", "#e3fab1", "#e6fab4", "#e9fab4", "#edfcb8", "#effcb8", "#f2fcb8", "#f7ffbd", "#faffbd", "#fcffbf", "#feffbf", "#fffebf", "#ffffbf", "#fcfcbb", "#fafab9", "#f6f7b4", "#f4f5b3", "#f1f2af", "#eff0aa", "#eceda8", "#e9eba4", "#e6e8a2", "#e4e69f", "#e1e39a", "#dee098", "#dcde95", "#d7db93", "#d5d98f", "#d2d68b", "#d0d48a", "#cdd186", "#cacf84", "#c7cc81", "#c4c97d", "#c2c77b", "#bfc478", "#bcc277", "#b9bf73", "#b7bd6f", "#b4ba6d", "#b2b86b", "#adb567", "#abb366", "#a8b063", "#a5ad61", "#a3ab5e", "#a0a85b", "#9da65a", "#9aa356", "#98a155", "#959e52", "#939c50", "#8f994e", "#8c964b", "#8a944a", "#879147", "#858f44", "#818c43", "#7f8a41", "#7c8740", "#7a853d", "#77823b", "#75803a", "#717d37", "#6f7a36", "#6d7834", "#6a7531", "#687330", "#65702e", "#636e2d"].reverse(), this.colors["color-ramp-distance"] = ["#ffc800", "#ffd000", "#ffd900", "#ffe100", "#ffea00", "#fff200", "#fffb00", "#fbff00", "#f2ff00", "#eaff00", "#e1ff00", "#d9ff00", "#d0ff00", "#c8ff00", "#bfff00", "#b7ff00", "#aeff00", "#a6ff00", "#9dff00", "#95ff00", "#8cff00", "#84ff00", "#7bff00", "#73ff00", "#6aff00", "#62ff00", "#59ff00", "#51ff00", "#48ff00", "#40ff00", "#37ff00", "#2fff00", "#26ff00", "#1eff00", "#15ff00", "#0dff00", "#04ff00", "#00ff04", "#00ff0d", "#00ff15", "#00ff1e", "#00ff26", "#00ff2f", "#00ff37", "#00ff40", "#00ff48", "#00ff51", "#00ff59", "#00ff62", "#00ff6a", "#00ff73", "#00ff7b", "#00ff84", "#00ff8c", "#00ff95", "#00ff9d", "#00ffa6", "#00ffae", "#00ffb7", "#00ffbf", "#00ffc8", "#00ffd0", "#00ffd9", "#00ffe1", "#00ffea", "#00fff2", "#00fffb", "#00fbff", "#00f2ff", "#00eaff", "#00e1ff", "#00d9ff", "#00d0ff", "#00c8ff", "#00bfff", "#00b7ff", "#00aeff", "#00a6ff", "#009dff", "#0095ff", "#008cff", "#0084ff", "#007bff", "#0073ff", "#006aff", "#0062ff", "#0059ff", "#0051ff", "#0048ff", "#0040ff", "#0037ff", "#002fff", "#0026ff", "#001eff", "#0015ff", "#000dff", "#0004ff", "#0400ff"].reverse(), this.colors["color-ramp-green2blue"] = ["#20cc10", "#1dcc10", "#19cc10", "#17cf10", "#12cf0f", "#0fcf0f", "#0fcf12", "#0fd115", "#0fd118", "#0fd11c", "#0fd11f", "#0cd420", "#0cd424", "#0cd427", "#0cd42a", "#0dd62e", "#0dd632", "#0dd635", "#0dd638", "#0bd93b", "#0bd93f", "#0bd942", "#0bd945", "#0bdb4a", "#0bdb4d", "#0bdb50", "#09db52", "#09de57", "#09de5a", "#09de5e", "#09de62", "#09e066", "#09e06a", "#07e06c", "#07e070", "#07e074", "#07e379", "#07e37c", "#07e380", "#07e384", "#07e689", "#05e68c", "#05e690", "#05e693", "#05e898", "#05e89c", "#05e8a0", "#05e8a4", "#03eba9", "#03ebad", "#03ebb1", "#03ebb5", "#03edba", "#03edbe", "#03edc2", "#00edc6", "#00f0cc", "#00f0d0", "#00f0d4", "#00f0d8", "#00f2de", "#00f2e2", "#00f2e6", "#00f2ea", "#00f2ee", "#00f2f2", "#00f2f2", "#00eef2", "#00eaf2", "#00e6f2", "#00e0f0", "#00dcf0", "#00d8f0", "#00d4f0", "#00d0f0", "#00ccf0", "#00c8f0", "#00c4f0", "#00beed", "#00baed", "#03b6ed", "#03b2ed", "#03afed", "#03abed", "#03a7ed", "#03a1eb", "#039eeb", "#039aeb", "#0396eb", "#0392eb", "#038eeb", "#038aeb", "#0386eb", "#0381e8", "#037de8", "#0379e8", "#0375e8", "#0372e8", "#036ee8", "#036ae8", "#0366e8", "#0361e6", "#035ee6", "#035ae6", "#0356e6", "#0352e6", "#034ee6", "#034be6", "#0346e3", "#0342e3", "#033ee3", "#033be3", "#0337e3", "#0333e3", "#0330e3", "#032ce3", "#0328e3", "#0324e3", "#0321e3"].reverse(), this.colors["color-ramp-red2green1"] = ["#ba1414", "#ba1917", "#bd1e18", "#bd231b", "#bf271c", "#bf2c1f", "#c23121", "#c23623", "#c23a25", "#c43c27", "#c4412a", "#c7462c", "#c74a2e", "#c94f30", "#c95332", "#c95734", "#cc5c37", "#cc6039", "#cf663c", "#cf693e", "#d16e41", "#d17243", "#d17645", "#d47c48", "#d47f4a", "#d6824d", "#d6854f", "#d98b53", "#d98e54", "#d99157", "#db965a", "#db995c", "#de9f60", "#dea262", "#e0a765", "#e0a967", "#e3af6b", "#e3b26d", "#e3b56f", "#e6ba73", "#e6bd75", "#e8bf79", "#e8c27b", "#ebc77f", "#ebc981", "#ebcc84", "#edd087", "#edd28a", "#f0d78d", "#f0da90", "#f2de94", "#f2e096", "#f2e299", "#f5e69d", "#f5e89f", "#f7eca3", "#f7eea6", "#faf1aa", "#faf2ad", "#faf4af", "#fcf7b3", "#fcf8b6", "#fffdba", "#fffebd", "#ffffbf", "#ffffbf", "#fbfcbb", "#f8fab6", "#f7fab4", "#f2f7af", "#eff5ab", "#ebf2a7", "#e7f0a3", "#e3ed9f", "#e2ed9c", "#dfeb99", "#dae894", "#d6e691", "#d2e38d", "#cde089", "#cbe086", "#c7de83", "#c2db7f", "#bed97b", "#bad678", "#b6d474", "#b4d473", "#afd16f", "#abcf6c", "#a6cc68", "#a1c964", "#9dc762", "#9cc75f", "#97c45c", "#93c259", "#8ebf56", "#8abd53", "#85ba50", "#82ba4e", "#7eb84c", "#79b548", "#75b345", "#70b043", "#6bad40", "#69ad3e", "#64ab3c", "#60a839", "#5ca637", "#57a334", "#53a132", "#52a130", "#4e9e2e", "#499c2b", "#459929", "#419627", "#3d9425", "#3a9423", "#369122"].reverse(), this.colors["color-ramp-red2green"] = ["#f50000", "#f50400", "#f50800", "#f50c00", "#f51000", "#f51400", "#f51900", "#f51d00", "#f52100", "#f52500", "#f52900", "#f52d00", "#f53100", "#f53500", "#f53900", "#f53d00", "#f54100", "#f54500", "#f54a00", "#f54e00", "#f55200", "#f55600", "#f55a00", "#f55e00", "#f56200", "#f56600", "#f56a00", "#f56e00", "#f57200", "#f57600", "#f57b00", "#f57f00", "#f58300", "#f58700", "#f58b00", "#f58f00", "#f59300", "#f59700", "#f59b00", "#f59f00", "#f5a300", "#f5a700", "#f5ac00", "#f5b000", "#f5b400", "#f5b800", "#f5bc00", "#f5c000", "#f5c400", "#f5c800", "#f5cc00", "#f5d000", "#f5d400", "#f5d800", "#f5dd00", "#f5e100", "#f5e500", "#f5e900", "#f5ed00", "#f5f100", "#f5f500", "#f5f500", "#f1f500", "#edf500", "#e9f500", "#e5f500", "#e1f500", "#dcf500", "#d8f500", "#d4f500", "#d0f500", "#ccf500", "#c8f500", "#c4f500", "#c0f500", "#bcf500", "#b8f500", "#b4f500", "#b0f500", "#acf500", "#a7f500", "#a3f500", "#9ff500", "#9bf500", "#97f500", "#93f500", "#8ff500", "#8bf500", "#87f500", "#83f500", "#7ff500", "#7bf500", "#76f500", "#72f500", "#6ef500", "#6af500", "#66f500", "#62f500", "#5ef500", "#5af500", "#56f500", "#52f500", "#4ef500", "#4af500", "#45f500", "#41f500", "#3df500", "#39f500", "#35f500", "#31f500", "#2df500", "#29f500", "#25f500", "#21f500", "#1df500", "#19f500", "#14f500", "#10f500", "#0cf500", "#08f500", "#04f500", "#00f500"].reverse(), this.colors["color-ramp-patrialspectrum2"] = ["#734d2a", "#754f2b", "#78502b", "#7a532c", "#7d552d", "#80562d", "#82582d", "#855a2e", "#875b2e", "#8a5e2f", "#8c5f30", "#8f612f", "#916230", "#946431", "#966530", "#996931", "#9c6b32", "#9e6b31", "#a16d32", "#a36e31", "#a67031", "#a87332", "#ab7432", "#ad7632", "#b07833", "#b37932", "#b57a32", "#b87e33", "#ba7f32", "#bd8133", "#bf8334", "#c28432", "#c48533", "#c78734", "#c98834", "#c98834", "#c98c36", "#cc8f39", "#cc923b", "#cf953e", "#cf9840", "#d19b43", "#d19e45", "#d4a148", "#d4a44a", "#d4a54c", "#d6a94f", "#d6aa51", "#d9af54", "#d9b257", "#dbb45a", "#dbb75c", "#dbb85e", "#debd62", "#debd64", "#e0c267", "#e0c269", "#e3c76d", "#e3c86f", "#e6cd73", "#e6cf75", "#e6d078", "#e8d47b", "#e8d47e", "#ebd981", "#ebda84", "#edde87", "#edde8a", "#f0e38d", "#f0e390", "#f0e593", "#f2e796", "#f2e999", "#f5ee9d", "#f5ee9f", "#f7f1a3", "#f7f2a6", "#f7f3a8", "#faf6ad", "#faf7af", "#fcfab3", "#fcfbb6", "#fffeba", "#ffffbd", "#ffffbf", "#ffffbf", "#f8fcbb", "#f3fcb8", "#ecfab6", "#e5f7b2", "#dff7af", "#d7f5ab", "#d2f5a9", "#caf2a7", "#c2f0a3", "#bbf0a1", "#b2ed9c", "#a9eb99", "#a4eb99", "#9ae894", "#91e691", "#8fe694", "#8be397", "#89e09a", "#86e09e", "#83dea1", "#81dea6", "#7ddba9", "#7bd9ad", "#7ad9b3", "#75d6b6", "#73d4ba", "#70d4c0", "#6fd1c4", "#6ccfc8", "#6acfcf", "#66c5cc", "#64becc", "#63b5c9", "#5fabc7", "#5ea4c7", "#5a9ac4", "#5790c2", "#5789c2", "#547fbf", "#5275bd", "#4f6dbd", "#4d62ba", "#4c5ab8", "#4a51b8", "#4646b5", "#4c45b5", "#5142b3", "#5741b0", "#5d3fb0", "#5c3fb0", "#5a3cad", "#5b3cab", "#5b39a8", "#5a37a6", "#5a36a3", "#5b34a3", "#5b32a1", "#5b319e", "#5a2e9c", "#5a2c99", "#592a96", "#592994", "#592791", "#58258f", "#58248c", "#58238a", "#572087", "#592087", "#591f85", "#581d82", "#581c80", "#571a7d", "#56187a", "#561878", "#551675", "#551573", "#541370", "#54136e", "#53116b", "#54106b", "#541069", "#530e66", "#520d63", "#520d61"].reverse(), this.colors["color-ramp-patrialspectrum1"] = ["#872626", "#8a2725", "#8c2926", "#8f2a25", "#912d26", "#942d25", "#962f26", "#993025", "#9c3224", "#9e3525", "#a13623", "#a33924", "#a63b23", "#a83c24", "#ab3e22", "#ad3f21", "#b04221", "#b34520", "#b54821", "#b84a1f", "#ba4e1f", "#bd511e", "#bf501c", "#c2541d", "#c4571c", "#c75b1c", "#c95d1a", "#cc611a", "#cf6519", "#d16817", "#d46917", "#d66c15", "#d97115", "#db7414", "#de7914", "#e07c12", "#e38110", "#e68610", "#e8860e", "#eb8b0e", "#ed8f0c", "#f0950c", "#f0950c", "#f0960e", "#f09a11", "#f09b13", "#f09c16", "#f0a118", "#f2a31b", "#f2a41d", "#f2a81f", "#f2a922", "#f2ad24", "#f2ae27", "#f2af29", "#f2b32c", "#f2b42e", "#f2b530", "#f5bb34", "#f5bc36", "#f5bd39", "#f5c03b", "#f5c13d", "#f5c23f", "#f5c542", "#f5c644", "#f5c747", "#f5ca49", "#f7cc4d", "#f7d04f", "#f7d051", "#f7d154", "#f7d456", "#f7d559", "#f7d55b", "#f7d85e", "#f7d960", "#f7d963", "#fadf67", "#fadf69", "#fae06c", "#fae36e", "#fae371", "#fae373", "#fae676", "#fae678", "#fae77b", "#fae97d", "#fcec80", "#fcee83", "#fcee85", "#fcef88", "#fcf18a", "#fcf18d", "#fcf18f", "#fcf392", "#fcf394", "#fcf497", "#fff89c", "#fff99e", "#fff9a1", "#fffaa3", "#fffba6", "#fffba8", "#fffcab", "#fffcad", "#fffeb0", "#fffeb2", "#fffeb5", "#ffffb8", "#ffffba", "#ffffbd", "#ffffbf", "#ffffbf", "#f9fcbb", "#f5fcbb", "#f0fab6", "#ecfab6", "#e6f7b2", "#e1f7af", "#dcf5ae", "#d7f5ab", "#d1f2a9", "#cdf2a7", "#c7f0a6", "#c2f0a3", "#baed9f", "#b6ed9f", "#afeb9b", "#abeb9b", "#a3e897", "#9de894", "#97e693", "#91e691", "#8fe394", "#8de395", "#8be098", "#89e09a", "#85de9b", "#85dea0", "#81dba0", "#81dba5", "#7ed9a7", "#7bd9aa", "#7ad6ac", "#78d6b0", "#77d4b3", "#74d4b7", "#73d1b9", "#71d1be", "#6ecfc0", "#6ecfc5", "#6accc7", "#6acccc", "#66c4c9", "#64bfc9", "#63b8c7", "#62b3c7", "#60abc4", "#5ea5c4", "#5d9fc2", "#5b99c2", "#5890bf", "#588bbf", "#5584bd", "#557fbd", "#5276ba", "#5070ba", "#4f6ab8", "#4d63b8", "#4c5cb5", "#4b55b5", "#4b50b5", "#4b50b5", "#484db3", "#464ab0", "#4347ad", "#4143ab", "#4042a8", "#3d3fa6", "#3b3ba3", "#3a3aa1", "#37379e", "#37359c", "#363499", "#353196", "#333094", "#322f91", "#312c8f", "#2f2a8c", "#2e298a", "#2e2787", "#2b2585", "#2c2482", "#2a2380", "#28207d", "#27207a"].reverse(), this.colors["color-ramp-slope"] = ["#38a800", "#3cab00", "#3fad00", "#43b000", "#46b000", "#4bb300", "#4eb500", "#53b800", "#57ba00", "#5bbd00", "#60bf00", "#63bf00", "#67c200", "#6cc400", "#71c700", "#75c900", "#7acc00", "#80cf00", "#83cf00", "#88d100", "#8dd400", "#92d600", "#98d900", "#9ddb00", "#a1db00", "#a7de00", "#ace000", "#b2e300", "#b8e600", "#bde800", "#c4eb00", "#c8eb00", "#cded00", "#d4f000", "#daf200", "#e1f500", "#e7f700", "#eefa00", "#f2fa00", "#f8fc00", "#ffff00", "#ffff00", "#fffb00", "#fff700", "#fff200", "#ffee00", "#ffea00", "#ffe600", "#ffe100", "#ffdd00", "#ffd900", "#ffd500", "#ffd000", "#ffcc00", "#ffc800", "#ffc400", "#ffbf00", "#ffbb00", "#ffb700", "#ffb300", "#ffae00", "#ffaa00", "#ffa600", "#ffa200", "#ff9d00", "#ff9900", "#ff9500", "#ff9100", "#ff8c00", "#ff8800", "#ff8400", "#ff8000", "#ff7b00", "#ff7700", "#ff7300", "#ff6f00", "#ff6a00", "#ff6600", "#ff6200", "#ff5e00", "#ff5900", "#ff5500", "#ff5100", "#ff4d00", "#ff4800", "#ff4400", "#ff4000", "#ff3c00", "#ff3700", "#ff3300", "#ff2f00", "#ff2b00", "#ff2600", "#ff2200", "#ff1e00", "#ff1a00", "#ff1500", "#ff1100", "#ff0d00", "#ff0900", "#ff0400", "#ff0000"].reverse(), this.colors["color-ramp-prediction"] = ["#2892c7", "#2895c7", "#2897c7", "#289ac7", "#2b9fc9", "#2ba1c9", "#2ba4c9", "#2ba7c9", "#2ba9c9", "#2bacc9", "#2bafc9", "#2db4cc", "#2db7cc", "#2db9cc", "#2dbccc", "#2dbfcc", "#2dc1cc", "#30c7cf", "#30cacf", "#30cccf", "#30cfcf", "#30cfcc", "#30cfca", "#30cfc7", "#32d1c6", "#32d1c4", "#32d1c1", "#32d1be", "#32d1bc", "#32d1b9", "#32d1b6", "#35d4b7", "#35d4b4", "#35d4b2", "#35d4af", "#35d4ac", "#35d4aa", "#37d6a9", "#37d6a6", "#37d6a4", "#37d6a1", "#37d69e", "#37d69c", "#37d699", "#3bd99a", "#3bd997", "#3bd994", "#3bd992", "#3bd98f", "#3bd98c", "#3bd98a", "#3ddb89", "#3ddb87", "#3ddb84", "#3ddb81", "#3ddb7f", "#3ddb7c", "#3ddb7a", "#40de7a", "#40de78", "#40de75", "#40de72", "#40de70", "#40de6d", "#43e06d", "#43e06a", "#43e067", "#43e065", "#43e062", "#43e060", "#43e05d", "#46e35e", "#46e35b", "#46e359", "#46e356", "#46e353", "#46e351", "#46e34e", "#4ae64f", "#4ae64d", "#4ae64a", "#4de64a", "#4fe64a", "#52e64a", "#57e84c", "#59e84c", "#5ce84c", "#5fe84c", "#61e84c", "#64e84c", "#66e84c", "#6deb50", "#6feb50", "#72eb50", "#74eb50", "#77eb50", "#79eb50", "#7ceb50", "#81ed53", "#84ed53", "#86ed53", "#89ed53", "#8bed53", "#8eed53", "#90ed53", "#97f057", "#99f057", "#9cf057", "#9ef057", "#a1f057", "#a3f057", "#a8f259", "#abf259", "#adf259", "#b0f259", "#b2f259", "#b5f259", "#b7f259", "#bdf55d", "#c0f55d", "#c2f55d", "#c5f55d", "#c7f55d", "#caf55d", "#cdf55d", "#d1f760", "#d4f760", "#d6f760", "#d9f760", "#dbf760", "#def760", "#e4fa64", "#e6fa64", "#e9fa64", "#ebfa64", "#eefa64", "#f0fa64", "#f3fa64", "#f5fa64", "#f8fa64", "#fafa64", "#fafa64", "#f3fa64", "#ebfa61", "#e3fa61", "#dbfa61", "#d3fa5f", "#ccfa5f", "#c1f75e", "#b9f75b", "#b1f75b", "#a9f75b", "#a0f759", "#98f759", "#90f759", "#86f756", "#7ef756", "#76f756", "#6df754", "#65f754", "#5cf554", "#51f551", "#51f559", "#51f561", "#4ff568", "#4ff570", "#4ff578", "#4cf57f", "#4cf587", "#4cf590", "#49f596", "#49f59f", "#49f5a8", "#46f2ad", "#46f2b6", "#46f2be", "#43f2c6", "#43f2cf", "#43f2d8", "#41f2e0", "#41f2e9", "#41f2f2", "#3fe9f2", "#3fe0f2", "#3fd7f2", "#3dcef2", "#3cc3f0", "#3cbaf0", "#39b0f0", "#39a7f0", "#399ef0", "#3894f0", "#388bf0", "#3580f0", "#3576f0", "#356df0", "#3362f0", "#3359f0", "#324eed", "#2f42ed", "#2f39ed", "#2f2fed", "#362ded", "#402ded", "#492ded", "#522bed", "#5b2bed", "#652bed", "#6d28ed", "#7728ed", "#8128ed", "#8826eb", "#9226eb", "#9c26eb", "#a523eb", "#af23eb", "#b923eb", "#c321eb", "#cd21eb", "#d721eb", "#e11eeb", "#eb1eeb", "#eb1ee1", "#eb1dd6", "#e81cc9", "#e81cbf", "#e819b4", "#e819aa", "#e819a0", "#e81794", "#e8178a", "#e8177f", "#e81574", "#e81569", "#e8155f", "#e81252", "#e81248", "#e8123d", "#e81031", "#e81026", "#e8101b", "#e81010"].reverse(), this.colors["color-ramp-surface"] = ["#709959", "#749c5b", "#769e5c", "#7aa15f", "#7ba15f", "#7ea360", "#82a662", "#85a865", "#89ab67", "#8cad68", "#8fb06a", "#91b06c", "#95b36e", "#98b56f", "#9bb871", "#9fba73", "#a3bd75", "#a6bf76", "#a7bf76", "#abc27a", "#aec47c", "#b2c77e", "#b5c97f", "#b9cc81", "#becf84", "#bfcf84", "#c2d186", "#c6d488", "#cad68b", "#ced98d", "#d1db8f", "#d5de91", "#d6de92", "#dae094", "#dee396", "#e2e698", "#e5e89c", "#eaeb9e", "#eded9f", "#edec9f", "#f0eda1", "#f2eea2", "#f2eea2", "#f2ec9f", "#f2eb9f", "#f2ea9e", "#f2e89b", "#f2e699", "#f2e599", "#f2e396", "#f2e194", "#f2df91", "#f2dd91", "#f2db8e", "#f2d98c", "#f2d78c", "#f2d48a", "#f2d288", "#f2cf85", "#f2ce85", "#f2ce85", "#f0ca84", "#f0c987", "#edc585", "#ebc284", "#e8be84", "#e8bd84", "#e6bb85", "#e3b784", "#e0b382", "#e0b284", "#deaf83", "#dbab81", "#d9a982", "#d9a882", "#d6a683", "#d4a382", "#d19f80", "#d19f81", "#cf9c80", "#cc987e", "#c9967f", "#c9957f", "#c7947f", "#c4907d", "#c28e7c", "#c28c7c", "#c28c7c", "#c2947e", "#c49b80", "#c4a181", "#c7aa83", "#c7b085", "#c9b787", "#c9bd88", "#c9c388", "#cccb8d", "#c8cc8d", "#c6cf90", "#c1cf93", "#bed194", "#bad197", "#b5d197", "#b3d49b", "#afd49b", "#add69f", "#a9d69f", "#a6d6a0", "#a3d9a3", "#a5d9a9", "#a7dbae", "#a8dbb4", "#addebd", "#addec1", "#afdec6", "#b1e0cb", "#b3e0d0", "#b6e3d7", "#b8e3db", "#bbe6e2", "#bde6e5", "#bde3e6", "#c1e2e8", "#c3dfe8", "#c5dfeb", "#c8ddeb", "#cadced", "#ccdaed", "#ccd7ed", "#d1d9f0", "#d1d7f0", "#d5d8f2", "#d5d5f2", "#d9d7f2", "#dedaf5", "#e2dcf5", "#e8e1f7", "#eae1f7", "#f0e6fa", "#f2e6fa", "#f4e8fa", "#f7eafc", "#f9edfc", "#fef0ff", "#fff2ff", "#fff2fe"].reverse(), this.colors["color-ramp-spectrumfull"] = ["#ff0000", "#ff0400", "#ff0900", "#ff0d00", "#ff1100", "#ff1500", "#ff1a00", "#ff1e00", "#ff2200", "#ff2600", "#ff2b00", "#ff2f00", "#ff3300", "#ff3700", "#ff3c00", "#ff4000", "#ff4400", "#ff4800", "#ff4d00", "#ff5100", "#ff5500", "#ff5900", "#ff5e00", "#ff6200", "#ff6600", "#ff6a00", "#ff6f00", "#ff7300", "#ff7700", "#ff7b00", "#ff8000", "#ff8400", "#ff8800", "#ff8c00", "#ff9100", "#ff9500", "#ff9900", "#ff9d00", "#ffa200", "#ffa600", "#ffaa00", "#ffae00", "#ffb300", "#ffb700", "#ffbb00", "#ffbf00", "#ffc400", "#ffc800", "#ffcc00", "#ffd000", "#ffd500", "#ffd900", "#ffdd00", "#ffe100", "#ffe600", "#ffea00", "#ffee00", "#fff200", "#fff700", "#fffb00", "#ffff00", "#ffff00", "#f6ff00", "#eeff00", "#e5ff00", "#ddff00", "#d4ff00", "#ccff00", "#c4ff00", "#bbff00", "#b3ff00", "#aaff00", "#a2ff00", "#99ff00", "#91ff00", "#88ff00", "#80ff00", "#77ff00", "#6fff00", "#66ff00", "#5eff00", "#55ff00", "#4dff00", "#44ff00", "#3cff00", "#33ff00", "#2bff00", "#22ff00", "#1aff00", "#11ff00", "#09ff00", "#00ff00", "#00ff08", "#00ff11", "#00ff1a", "#00ff22", "#00ff2a", "#00ff33", "#00ff3c", "#00ff44", "#00ff4c", "#00ff55", "#00ff5e", "#00ff66", "#00ff6e", "#00ff77", "#00ff80", "#00ff88", "#00ff91", "#00ff99", "#00ffa2", "#00ffaa", "#00ffb3", "#00ffbb", "#00ffc4", "#00ffcc", "#00ffd5", "#00ffdd", "#00ffe5", "#00ffee", "#00fff7", "#00ffff", "#00ffff", "#00fbff", "#00f7ff", "#00f2ff", "#00eeff", "#00eaff", "#00e5ff", "#00e1ff", "#00ddff", "#00d9ff", "#00d5ff", "#00d0ff", "#00ccff", "#00c8ff", "#00c4ff", "#00bfff", "#00bbff", "#00b7ff", "#00b3ff", "#00aeff", "#00aaff", "#00a6ff", "#00a2ff", "#009dff", "#0099ff", "#0095ff", "#0091ff", "#008cff", "#0088ff", "#0084ff", "#0080ff", "#007bff", "#0077ff", "#0073ff", "#006eff", "#006aff", "#0066ff", "#0062ff", "#005eff", "#0059ff", "#0055ff", "#0051ff", "#004cff", "#0048ff", "#0044ff", "#0040ff", "#003cff", "#0037ff", "#0033ff", "#002fff", "#002aff", "#0026ff", "#0022ff", "#001eff", "#001aff", "#0015ff", "#0011ff", "#000dff", "#0008ff", "#0004ff", "#0000ff"].reverse(), this.colors["color-ramp-elevation1"] = ["#aff0ea", "#aff0e6", "#aff0e3", "#b1f2e2", "#b1f2de", "#aff2da", "#aff2d7", "#aff2d4", "#aff2d0", "#b1f5cf", "#b1f5cc", "#b1f5c9", "#b1f5c5", "#b1f5c2", "#b2f7c0", "#aff7ba", "#aff7b6", "#aff7b3", "#aff7af", "#b3f7af", "#b9fab1", "#bcfab1", "#c0fab1", "#c4fab1", "#c7fab1", "#c9faaf", "#cefcb0", "#d2fcb0", "#d6fcb0", "#dafcb0", "#defcb0", "#e4ffb2", "#e8ffb2", "#ecffb2", "#f0ffb2", "#f3ffb2", "#f7ffb2", "#fbffb2", "#ffffb2", "#ffffb2", "#f8fcab", "#f6faaa", "#eff7a3", "#ecf59d", "#e4f296", "#def095", "#daed8e", "#d2eb88", "#d0e887", "#c8e681", "#bfe37b", "#bce079", "#b4de74", "#aadb6d", "#a6d968", "#9ed666", "#9bd461", "#91d15c", "#89cf5b", "#85cc56", "#7bc950", "#77c74c", "#6fc44b", "#65c246", "#61bf41", "#59bd40", "#55ba3c", "#4ab837", "#43b536", "#3fb332", "#34b02e", "#30ad29", "#29ab29", "#25a82b", "#21a628", "#21a32e", "#1da12a", "#199e2d", "#169c31", "#169930", "#129633", "#0f9437", "#0e9135", "#0b8f39", "#088c36", "#088a3c", "#058740", "#03853d", "#008241", "#008040", "#008040", "#00823d", "#00853a", "#008736", "#008a33", "#008c2f", "#008f2b", "#008f26", "#009122", "#00941e", "#009619", "#009914", "#009c10", "#009e0b", "#02a107", "#02a302", "#07a602", "#0da802", "#13ab02", "#19ad02", "#1fb002", "#25b002", "#2bb302", "#32b502", "#39b802", "#3fba02", "#47bd02", "#4ebf02", "#55c202", "#5dc402", "#65c702", "#6cc902", "#75cc02", "#7dcf02", "#84cf02", "#8cd102", "#95d402", "#9ed603", "#a7d903", "#b0db03", "#b9de03", "#c2e003", "#cde303", "#d7e603", "#e0e803", "#ebeb03", "#ede503", "#f0e003", "#f0d803", "#f2d203", "#f5cd03", "#f7c603", "#fac003", "#fcba03", "#fcba03", "#fab403", "#f7ae03", "#f5a803", "#f2a203", "#f09d03", "#ed9b03", "#eb9603", "#e89003", "#e68b03", "#e38603", "#e08003", "#de7b03", "#db7500", "#d97000", "#d66b00", "#d46a00", "#d16500", "#cf6100", "#cc5c00", "#c95700", "#c75300", "#c44e00", "#c24a00", "#bf4600", "#bd4200", "#ba4100", "#b83d00", "#b53900", "#b33600", "#b03200", "#ad2e00", "#ab2b00", "#a82700", "#a62400", "#a32100", "#a12000", "#9e1d00", "#9c1a00", "#991700", "#961400", "#941100", "#910f00", "#8f0c00", "#8c0900", "#8a0700", "#870700", "#850400", "#820200", "#800000", "#800000", "#800402", "#7d0601", "#7d0902", "#7a0a02", "#7a0e04", "#780f04", "#781205", "#781405", "#751706", "#751806", "#731b07", "#731d08", "#731f08", "#702109", "#702309", "#6e250a", "#6e260a", "#6b270a", "#6b290a", "#6b2b0c", "#692c0c", "#692f0d", "#69300d", "#69300d", "#6b310f", "#6b3211", "#6e3314", "#6e3516", "#703619", "#73391c", "#73391e", "#753b21", "#753c23", "#783f27", "#7a402a", "#7a422c", "#7d4430", "#7d4632", "#804836", "#824a39", "#824c3c", "#854f40", "#855142", "#875346", "#8a574b", "#8a594d", "#8c5c51", "#8c5d54", "#8f6259", "#91655d", "#916760", "#946b64", "#946d67", "#96716c", "#997571", "#997874", "#9c7d7a", "#9c7f7d", "#9e8381", "#a18987", "#a18b8a", "#a3908f", "#a39392", "#a69999", "#a89e9e", "#a8a2a1", "#aba8a8", "#ababab", "#ababab", "#adadad", "#b0b0b0", "#b3b3b3", "#b3b3b3", "#b5b5b5", "#b8b8b8", "#bababa", "#bdbdbd", "#bfbfbf", "#c1c2c0", "#c3c4c2", "#c3c4c2", "#c5c7c5", "#c7c9c7", "#caccca", "#cdcfcd", "#cfd1cf", "#d2d4d3", "#d3d6d5", "#d3d6d5", "#d6d9d8", "#d8dbdb", "#dbdede", "#dddfe0", "#e0e2e3", "#e3e5e6", "#e5e6e8", "#e5e6e8", "#e8e9eb", "#eaeaed", "#eeedf0", "#f0eff2", "#f3f2f5", "#f6f4f7", "#f9f7fa", "#f9f7fa", "#fcf9fc", "#fffcff"].reverse(), this.colors["color-ramp-elevation2"] = ["#77dbd3", "#78dbce", "#7adecc", "#7cdec7", "#7fe0c5", "#7fe0c0", "#82e0bc", "#84e3ba", "#86e3b6", "#88e3b3", "#8ae6b0", "#8de6ad", "#90e8ac", "#90e8a7", "#92e8a5", "#94eba3", "#96eba0", "#99eb9e", "#9aed9c", "#9fed9c", "#a8f0a1", "#abf0a1", "#b1f0a3", "#b6f2a4", "#bcf2a7", "#c1f2a9", "#c7f5ab", "#cdf5ae", "#d3f7b2", "#d7f7b2", "#dbf7b4", "#e1fab6", "#e6fab9", "#e9fabb", "#eefcbd", "#f2fcc0", "#f8ffc4", "#fbffc4", "#feffc7", "#fffdc7", "#ffffc7", "#ffffc4", "#ffffc2", "#ffffbf", "#ffffbd", "#ffffba", "#ffffb8", "#ffffb5", "#ffffb2", "#ffffb0", "#ffffad", "#ffffab", "#ffffa8", "#ffffa6", "#ffffa3", "#ffffa1", "#ffff9e", "#ffff9c", "#ffff99", "#ffff96", "#ffff94", "#ffff91", "#ffff8f", "#ffff8c", "#ffff8a", "#ffff87", "#ffff85", "#ffff82", "#ffff7f", "#ffff7f", "#fcfa7e", "#faf67f", "#f7f17e", "#f5ed80", "#f2e87e", "#f0e57f", "#ede07d", "#ebdd7f", "#e8da7e", "#e6d67c", "#e3d27d", "#e0cd7b", "#deca7c", "#dbc67b", "#d9c37a", "#d9c37a", "#d6bf75", "#d4bc73", "#d1b86f", "#cfb66c", "#ccb26a", "#c9af66", "#c7ac63", "#c4a860", "#c2a55d", "#bfa25a", "#bd9e57", "#ba9b54", "#b89a53", "#b5954f", "#b3934d", "#b0904a", "#ad8b47", "#ab8944", "#a88641", "#a6823f", "#a3803e", "#a17d3b", "#9e7939", "#9c7736", "#997434", "#966f31", "#946e30", "#916b2d", "#8f682c", "#8c652a", "#8a6328", "#876026", "#876026", "#876a27", "#8a6d29", "#8a772b", "#8a812c", "#8c832e", "#8c8c30", "#8c8c31", "#868f34", "#7d8f35", "#7d8f36", "#769138", "#6e913a", "#6f913c", "#69943e", "#6a9440", "#629441", "#5c9644", "#5d9645", "#569647", "#519949", "#53994b", "#4c994c", "#509c50", "#519c59", "#539c61", "#569e64", "#579e6c", "#5aa177", "#5ca177", "#5da17f", "#60a381", "#62a389", "#64a390", "#67a693", "#69a69a", "#6aa6a0", "#6da8a2", "#6fa8a8", "#71a8a8", "#74a6ab", "#76a0ab", "#77a1ab", "#7b9ead", "#7d9aad", "#7e9aad", "#8299b0", "#849ab0", "#8697b0", "#8a96b3", "#8c97b3", "#8d95b3", "#9194b5", "#9396b5", "#9494b5", "#9696b5", "#9696b5", "#9796b5", "#9996b5", "#9a96b5", "#9b96b5", "#9c96b5", "#9d96b5", "#9e96b5", "#9f96b5", "#a096b5", "#a196b5", "#a296b5", "#a396b5", "#a496b5", "#a596b5", "#a696b5", "#a796b5", "#a896b5", "#a996b5", "#aa96b5", "#ab96b5", "#ac96b5", "#ad96b5", "#ae96b5", "#af96b5", "#b096b5", "#b196b5", "#b296b5", "#b396b5", "#b496b5", "#b596b5", "#b596b5", "#b89ab8", "#ba9cba", "#bda1bd", "#bfa3bf", "#c2a7c2", "#c4a8c4", "#c7adc7", "#c9b1c9", "#ccb3cc", "#cfb8cf", "#d1bad1", "#d4bed4", "#d6c0d6", "#d9c5d9", "#dbcadb", "#decdde", "#e0d0e0", "#e3d3e3", "#e6d8e6", "#e8dae8", "#ebdfeb", "#ede1ed", "#f0e7f0", "#f2eaf2", "#f5edf5", "#f7f2f7", "#faf5fa", "#fcf9fc", "#fffcff"].reverse()
    }

    c.prototype.getColorName = function (s) {
        if (!s) {
            return null
        }
        for (var q in this.colors) {
            if (_.isEqual(this.colors[q], s)) {
                return q
            }
        }
    };
    c.prototype.getColor = function (q) {
        return this.colors[q]
    };
    var c = new c();

    function e() {
        this.colors = {}, this.colors["color-ramp-heat-blue2red"] = ["#0000ff", "#00ffff", "#00ff00", "#ffff00", "#ff0000"], this.colors["color-ramp-heat-purple2white"] = ["#814bab", "#8e1498", "#d53448", "#fdd944", "#ffffff"], this.colors["color-ramp-heat-blue2pink"] = ["#636cea", "#1b16d5", "#be1c4d", "#f79390", "#ffffcc"]
    }

    e.prototype.getColorName = function (s) {
        if (!s) {
            return null
        }
        for (var q in this.colors) {
            if (_.isEqual(this.colors[q], s)) {
                return q
            }
        }
    };
    e.prototype.getColor = function (q) {
        return this.colors[q]
    };
    var e = new e();

    function o() {
        this.o = c;
        this.n = e;
        this.token = $.cookie ? $.cookie("token") : "", this.utfGridSize = 256, this.utfGridRes = 4, this.mapOriginX = -20037508.342784, this.mapOriginY = 20037508.342784, this.colorRamp = this.o, this.defaultColorRamp = this.o.colors["color-ramp-red"], this.defaultColorRampName = "color-ramp-red", this.heatColorRamp = this.n, this.defaultHeatColor = this.n.colors["color-ramp-heat-blue2red"], this.defaultHeatColorName = "color-ramp-heat-blue2red", this.fullColorRamp = this.o.colors["color-ramp-spectrumfull"], this.defaultMapStatus = {
            center: [11679530.428552564, 4015909.814808646],
            resolution: 9783.9396205
        }, this.defaultMap = {
            uid: "auto",
            type: "online"
        }, this.defaultLegendTitle = "图例", this.defaultLegendOrder = "asc", this.configTypes = {
            MARKER_SIMPLE: "marker-simple",
            MARKER_HEAT: "marker-heat",
            MARKER_CHOROPLETH: "marker-choropleth",
            MARKER_CATEGORY: "marker-category",
            MARKER_BUBBLE: "marker-bubble",
            MARKER_INTENSITY: "marker-intensity",
            POLYGON_SIMPLE: "polygon-simple",
            POLYGON_CHOROPLETH: "polygon-choropleth",
            POLYGON_CATEGORY: "polygon-category"
        }, this.colors = ["#00b050", "#0070c0", "#c00000", "#7030a0", "#ffc000", "#56ffa0", "#5fbaff", "#ff6962", "#b45dff", "#ffd677", "#00b3ba", "#0500c5", "#a26866", "#fc36c7", "#ff6a10", "#b1fcff", "#5d8bff", "#b59493", "#f490c6", "#ff9b5e", "#24ff00", "#00fff6", "#f0ff00", "#ffffff", "#000000"], this.opacities = [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1], this.lineWidths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], this.markerSizes = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 24, 28, 32, 35, 40], this.bubbleSizes = [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], this.labelFonts = [{
            name: "雅黑",
            code: "Microsoft YaHei"
        }, {name: "楷体", code: "KaiTi"}, {name: "宋体", code: "SimSun"}, {
            name: "隶书",
            code: "LiSu"
        }], this.labelSizes = [8, 9, 10, 11, 12, 14, 16, 18, 20, 22, 24], this.bucketTypes = [{
            name: "等个数分段",
            code: "equalcount"
        }, {name: "等间距分段", code: "equalinterval"}], this.blendingModeTypes = [{
            name: "正常",
            code: "src-over"
        }, {name: "滤色", code: "screen"}, {name: "变亮", code: "color-dodge"}, {name: "叠加", code: "plus"}, {
            name: "深色",
            code: "multiply"
        }, {name: "变暗", code: "darken"}, {name: "柔光", code: "soft-light"}, {
            name: "强光",
            code: "hard-light"
        }], this.defaultBlendingMode = "src-over", this.bucketCounts = [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 20], this.heatSizes = [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 34, 38, 42, 46, 50, 60, 70, 80], this.timeSegments = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], this.timeDurations = [2, 2.5, 3], this.defaultTimeSegment = 2, this.defaultTimeDuration = 2, this.defaultMarkerColor = "#c00000", this.defaultMarkerSize = 6, this.defaultMarkerOpacity = 0.8, this.defaultLineColor = "#0070c0", this.defaultLineOpacity = 0.8, this.defaultLineWidth = 1, this.defaultFillColor = "#7030a0", this.defaultFillOpacity = 0.8, this.defaultOutlineColor = "#ffffff", this.defaultOutlineOpacity = 0.8, this.defaultOutlineWidth = 1, this.defaultHeatPixelSize = 20, this.defaultHeatMinOpacity = 0, this.defaultHeatMaxOpacity = 0.8, this.defaultHeatResolution = 4, this.defaultHeatMapSize = 1000, this.defaultHeatSizeUnit = "pixel", this.defaultHeatTopValue = 1, this.defaultHeatWeightField = "无", this.noDataColor = "#cccccc", this.defaultLabelColor = "#000000", this.defaultLabelFont = "Microsoft YaHei Regular", this.defaultLabelSize = 12, this.defaultBucketCount = 2, this.defaultBucketType = "equalcount", this.defaultBubbleMarkerColor = "#ff6a10", this.defaultBubbleMinSize = 5, this.defaultBubbleMaxSize = 20, this.defaultBubbleLegendMinSize = 1, this.defaultBubbleLegendItemCount = 5, this.defaultBubbleFillMode = "single", this.markerSymbol = {
            shape: "image",
            image: "",
            offset: [-12, -28],
            size: [24, 32]
        }, this.lineSymbol = {lineColor: "#000", lineOpacity: 0.8}, this.fillSymbol = {
            fillImage: "",
            fillImageSize: [4, 4],
            fillOpacity: 1,
            outlineWidth: 3,
            outlineColor: "#fff"
        }, this.markerPinSymbol = {
            shape: "image",
            image: "",
            offset: [-18, -46],
            size: [36, 50]
        }, this.markerCircleSymbol = {
            shape: "image",
            image: "",
            offset: [-5, -32],
            size: [10, 10]
        }, this.plugin = {
            GEO_LOCATION: "geo-location",
            LAYER_LIST: "layer-list",
            LEGEND: "legend",
            LOGO: "logo"
        }, this.defaultIntensityTopValue = 1, this.defaultIntensityLineWidth = [0.5, 0.7, 1, 2, 3, 4, 5];
        this.defaultCartogramMinSize = 30, this.defaultCartogramMaxSize = 50, this.cartogramSizes = [30, 35, 40, 45, 50];
        this.cartogramTypes = [{name: "饼图", code: "pie"}, {name: "柱状图", code: "bar"}];
        this.defaultCartogramType = "pie";
        this.cartogramDataTypes = [{name: "单年份多指标", code: "singleYear"}, {name: "单指标多年份", code: "singleIndex"}];
        this.defaultCartogramDataType = "singleYear";
        this.intensityDisplayWay = [{name: "直线展示", code: "lineWay"}, {name: "弧线展示", code: "curveWay"}];
        this.defaultIntensityDisplayWay = "lineWay";
        this.intensityDynamicSize = [0.5, 1, 1.5, 2, 2.5, 3];
        this.defaultIntensityDynamicSize = 1
    }

    var o = new o();

    function f() {
        this.w = ["number"];
        this.k = o;
        this.C = $("#message-container");
        this.T = $("#message-container #message");
        this.L = void 0;
        this.init()
    }

    f.prototype = {
        init: function () {
            this.bindEvent();
            $.fn.selectRange = function (s, q) {
                return void 0 === q && (q = s), this.each(function () {
                    if ("selectionStart" in this) {
                        this.selectionStart = s, this.selectionEnd = q
                    } else {
                        if (this.setSelectionRange) {
                            this.setSelectionRange(s, q)
                        } else {
                            if (this.createTextRange) {
                                var t = this.createTextRange();
                                t.collapse(!0), t.moveEnd("character", q), t.moveStart("character", s), t.select()
                            }
                        }
                    }
                })
            }, function () {
                var s = window, q = s.devicePixelRatio;
                s.mobile = "undefined" != typeof window.orientation, s.retina = q >= 1.5 || s.matchMedia && s.matchMedia("(-webkit-min-device-pixel-ratio: 1.5),	                      (-moz-min-device-pixel-ratio: 1.5),	                      (min-device-pixel-ratio: 1.5),	                      (min-resolution: 1.5dppx)").matches
            }()
        }, showError: function (q) {
            this.showmessager("error", q)
        }, showSuccess: function (q) {
            this.showmessager("success", q)
        }, showWarning: function (q) {
            this.showmessager("warning", q)
        }, showmessager: function (w, s) {
            var u = this;
            var q = "error warning";
            "error" == w ? q = "success warning" : "warning" == w && (q = "error success"), u.C.addClass("hide"), setTimeout(function () {
                u.T.text(s || ""), u.C.removeClass(q).addClass(w).removeClass("hide"), clearTimeout(u.L), u.L = setTimeout(function () {
                    u.C.addClass("hide")
                }, 5000)
            }, 10)
        }, showBtnLoading: function (q) {
            $("#" + q).prop("disabled", "disabled"), $("#" + q + " .label").addClass("hide"), $("#" + q + " .loading").removeClass("hide")
        }, hideBtnLoading: function (q) {
            $("#" + q).removeProp("disabled"), $("#" + q + " .label").removeClass("hide"), $("#" + q + " .loading").addClass("hide")
        }, disabledBtn: function (q) {
            $("#" + q).prop("disabled", "disabled")
        }, enabledBtn: function (q) {
            $("#" + q).removeProp("disabled")
        }, stringIsBlank: function (q) {
            return null == q || void 0 == q || "" == q.trim()
        }, getRandomColors: function (y, w) {
            var x = this;
            var s = [], u = new Rainbow;
            u.setNumberRange(0, y), u.setSpectrum.apply(void 0, w ? w : x.k.defaultColorRamp);
            for (var q = 0; q < y; q++) {
                s.push("#" + u.colourAt(q))
            }
            return s
        }, getQueryParamByName: function (s) {
            var q = RegExp("[?&]" + s + "=([^&]*)").exec(window.location.search);
            return q && decodeURIComponent(q[1].replace(/\+/g, " "))
        }, localizeDate: function (q) {
            return q = parseInt(q), $.formatDateTime("yy-mm-dd", new Date(q))
        }, getExtentCenter: function (q) {
            if (q && 4 == q.length) {
                return [(q[0] + q[2]) / 2, (q[1] + q[3]) / 2]
            }
        }, isNumericType: function (q) {
            me = this;
            return $.inArray(q, me.w) >= 0
        }, isDateTimeType: function (q) {
            return "timestamp" == q
        }, contains: function (s, q) {
            return s.indexOf(q) > -1
        }, bindEvent: function () {
            var q = this;
            q.C.bind("click", function () {
                $(this).removeClass("fadeInDown").addClass("fadeOutUp")
            })
        },
    };
    var f = new f();

    function j() {
        var L = o, I = (f, {}), z = {}, Q = {}, u = {}, H = {}, x = {}, F = {}, K = {}, B = {}, q = {}, M = {};
        var G = I.MarkerSimpleConfig = function (s) {
            Q.type = L.configTypes.MARKER_SIMPLE, Q.blendingMode = s && s.blendingMode ? s.blendingMode : L.defaultBlendingMode;
            Q.animated = !(!s || !s.animated) && s.animated, Q.timeField = s && s.timeField ? s.timeField : "year", Q.frameCount = s && s.frameCount ? s.frameCount : L.defaultTimeSegment, Q.duration = s && s.duration ? s.duration : L.defaultTimeDuration, Q.timeAccumulate = !(!s || !s.timeAccumulate) && s.timeAccumulate, Q.timebreaks = [];
            Q.timecurrData = [];
            Q.labelColor = s && s.labelColor ? s.labelColor : L.defaultLabelColor, Q.labelFont = s && s.labelFont ? s.labelFont : L.defaultLabelFont, Q.labelSize = s && s.labelSize ? s.labelSize : L.defaultLabelSize;
            Q.labelYear = s && s.labelYear ? s.labelYear : "";
            Q.markerColor = s && s.markerColor ? s.markerColor : L.defaultMarkerColor, Q.markerSize = s && s.markerSize ? s.markerSize : L.defaultMarkerSize, Q.markerOpacity = s && (s.markerOpacity || 0 == s.markerOpacity) ? s.markerOpacity : L.defaultMarkerOpacity, Q.outlineColor = s && s.outlineColor ? s.outlineColor : L.defaultOutlineColor, Q.outlineWidth = s && (s.outlineWidth || 0 == s.outlineWidth) ? s.outlineWidth : L.defaultOutlineWidth, Q.outlineOpacity = s && (s.outlineOpacity || 0 == s.outlineOpacity) ? s.outlineOpacity : L.defaultOutlineOpacity;
            return Q
        };
        var D = I.MarkerChoroplethConfig = function (y) {
            if (u.type = L.configTypes.MARKER_CHOROPLETH, u.fieldName = y && y.fieldName ? y.fieldName : void 0, u.bucketCount = y && y.bucketCount ? y.bucketCount : L.defaultBucketCount, u.bucketType = y && y.bucketType ? y.bucketType : L.defaultBucketType, u.colors = y && y.colors ? y.colors : L.defaultColorRamp, u.colorsReversed = !(!y || !y.colorsReversed) && y.colorsReversed, u.markerColor = L.noDataColor, u.breaks = y && y.breaks ? y.breaks : void 0, u.blendingMode = y && y.blendingMode ? y.blendingMode : L.defaultBlendingMode, y && y.equalInterval) {
                u.bucketType = "equalinterval", u.breaks = [];
                for (var s = 0; s < y.breakCount; s++) {
                    u.breaks[s] = y.equalInterval.max - s * y.equalInterval.step
                }
            }
            u.animated = !(!y || !y.animated) && y.animated, u.timeField = y && y.timeField ? y.timeField : void 0, u.frameCount = y && y.frameCount ? y.frameCount : L.defaultTimeSegment, u.duration = y && y.duration ? y.duration : L.defaultTimeDuration, u.timeAccumulate = !(!y || !y.timeAccumulate) && y.timeAccumulate, u.timebreaks = [];
            u.timecurrData = [];
            u.labelField = y && y.labelField ? y.labelField : void 0, u.labelColor = y && y.labelColor ? y.labelColor : L.defaultLabelColor, u.labelFont = y && y.labelFont ? y.labelFont : L.defaultLabelFont, u.labelSize = y && y.labelSize ? y.labelSize : L.defaultLabelSize;
            u.labelYear = y && y.labelYear ? y.labelYear : "";
            u.markerColor = y && y.markerColor ? y.markerColor : L.defaultMarkerColor, u.markerSize = y && y.markerSize ? y.markerSize : L.defaultMarkerSize, u.markerOpacity = y && (y.markerOpacity || 0 == y.markerOpacity) ? y.markerOpacity : L.defaultMarkerOpacity, u.outlineColor = y && y.outlineColor ? y.outlineColor : L.defaultOutlineColor, u.outlineWidth = y && (y.outlineWidth || 0 == y.outlineWidth) ? y.outlineWidth : L.defaultOutlineWidth, u.outlineOpacity = y && (y.outlineOpacity || 0 == y.outlineOpacity) ? y.outlineOpacity : L.defaultOutlineOpacity;
            return u
        };
        var P = I.MarkerBubbleConfig = function (s) {
            H.type = L.configTypes.MARKER_BUBBLE, H.fieldName = s && s.fieldName ? s.fieldName : void 0, H.bucketCount = s && s.bucketCount ? s.bucketCount : L.defaultBucketCount, H.bucketType = s && s.bucketType ? s.bucketType : L.defaultBucketType, H.markerColor = s && s.markerColor ? s.markerColor : L.defaultBubbleMarkerColor, H.breaks = s && s.breaks ? s.breaks : void 0, H.minSize = s && s.minSize ? s.minSize : L.defaultBubbleMinSize, H.maxSize = s && s.maxSize ? s.maxSize : L.defaultBubbleMaxSize, H.fillMode = s && s.fillMode ? s.fillMode : L.defaultBubbleFillMode, H.colorFieldName = s && s.colorFieldName ? s.colorFieldName : void 0, H.colorBucketCount = s && s.colorBucketCount ? s.colorBucketCount : L.defaultBucketCount, H.colorBucketType = s && s.colorBucketType ? s.colorBucketType : L.defaultBucketType, H.colorBreaks = s && s.colorBreaks ? s.colorBreaks : void 0, H.colors = s && s.colors ? s.colors : L.defaultColorRamp, H.animated = !(!s || !s.animated) && s.animated, H.timeField = s && s.timeField ? s.timeField : void 0, H.frameCount = s && s.frameCount ? s.frameCount : L.defaultTimeSegment, H.duration = s && s.duration ? s.duration : L.defaultTimeDuration, H.timeAccumulate = !(!s || !s.timeAccumulate) && s.timeAccumulate, H.timebreaks = [];
            H.timecurrData = [];
            H.labelField = s && s.labelField ? s.labelField : void 0, H.labelColor = s && s.labelColor ? s.labelColor : L.defaultLabelColor, H.labelFont = s && s.labelFont ? s.labelFont : L.defaultLabelFont, H.labelSize = s && s.labelSize ? s.labelSize : L.defaultLabelSize;
            H.labelYear = s && s.labelYear ? s.labelYear : "";
            H.markerColor = s && s.markerColor ? s.markerColor : L.defaultMarkerColor, H.markerSize = s && s.markerSize ? s.markerSize : L.defaultMarkerSize, H.markerOpacity = s && (s.markerOpacity || 0 == s.markerOpacity) ? s.markerOpacity : L.defaultMarkerOpacity, H.outlineColor = s && s.outlineColor ? s.outlineColor : L.defaultOutlineColor, H.outlineWidth = s && (s.outlineWidth || 0 == s.outlineWidth) ? s.outlineWidth : L.defaultOutlineWidth, H.outlineOpacity = s && (s.outlineOpacity || 0 == s.outlineOpacity) ? s.outlineOpacity : L.defaultOutlineOpacity;
            return H
        };
        var O = I.MarkerCategoryConfig = function (s) {
            x.type = L.configTypes.MARKER_CATEGORY, x.colors = s && s.colors ? s.colors : L.defaultColorRamp, x.fieldName = s && s.fieldName ? s.fieldName : void 0, x.fieldValues = s && s.fieldValues ? s.fieldValues : void 0, x.fieldColors = s && s.fieldColors ? s.fieldColors : void 0, x.blendingMode = s && s.blendingMode ? s.blendingMode : L.defaultBlendingMode;
            x.animated = !(!s || !s.animated) && s.animated, x.timeField = s && s.timeField ? s.timeField : void 0, x.frameCount = s && s.frameCount ? s.frameCount : L.defaultTimeSegment, x.duration = s && s.duration ? s.duration : L.defaultTimeDuration, x.timeAccumulate = !(!s || !s.timeAccumulate) && s.timeAccumulate, x.timebreaks = [];
            x.timecurrData = [];
            x.labelField = s && s.labelField ? s.labelField : void 0, x.labelColor = s && s.labelColor ? s.labelColor : L.defaultLabelColor, x.labelFont = s && s.labelFont ? s.labelFont : L.defaultLabelFont, x.labelSize = s && s.labelSize ? s.labelSize : L.defaultLabelSize;
            x.labelYear = s && s.labelYear ? s.labelYear : "";
            x.markerColor = s && s.markerColor ? s.markerColor : L.defaultMarkerColor, x.markerSize = s && s.markerSize ? s.markerSize : L.defaultMarkerSize, x.markerOpacity = s && (s.markerOpacity || 0 == s.markerOpacity) ? s.markerOpacity : L.defaultMarkerOpacity, x.outlineColor = s && s.outlineColor ? s.outlineColor : L.defaultOutlineColor, x.outlineWidth = s && (s.outlineWidth || 0 == s.outlineWidth) ? s.outlineWidth : L.defaultOutlineWidth, x.outlineOpacity = s && (s.outlineOpacity || 0 == s.outlineOpacity) ? s.outlineOpacity : L.defaultOutlineOpacity;
            return x
        };
        var N = I.MarkerHeatConfig = function (s) {
            F.type = L.configTypes.MARKER_HEAT, F.heatSizeUnit = s && s.heatSizeUnit ? s.heatSizeUnit : L.defaultHeatSizeUnit, F.heatSize = s && s.heatSize ? s.heatSize : L.defaultHeatSize, s.heatOpacity ? F.heatOpacity = s.heatOpacity : F.heatOpacity = s && (s.heatOpacity || 0 == s.heatOpacity) ? s.heatOpacity : L.defaultHeatOpacity, F.heatTopValue = s && s.heatTopValue ? s.heatTopValue : L.defaultHeatTopValue, F.resolution = s && s.resolution ? s.resolution : L.defaultHeatResolution, F.weightField = s && s.weightField ? s.weightField : void 0, F.colors = s && s.colors ? s.colors : L.defaultHeatColor, F.labelYear = s && s.labelYear ? s.labelYear : "";
            F.animated = !(!s || !s.animated) && s.animated, F.timeField = s && s.timeField ? s.timeField : void 0, F.frameCount = s && s.frameCount ? s.frameCount : L.defaultTimeSegment, F.duration = s && s.duration ? s.duration : L.defaultTimeDuration, F.timeAccumulate = !(!s || !s.timeAccumulate) && s.timeAccumulate;
            F.timebreaks = [];
            F.timecurrData = [];
            return F
        };
        var A = I.MarkerIntensityConfig = function (s) {
            K.type = L.configTypes.MARKER_INTENSITY, K.colors = s && s.colors ? s.colors : L.defaultHeatColor, K.fieldName = s && s.fieldName ? s.fieldName : void 0, K.corrFieldName = s && s.corrFieldName ? s.corrFieldName : void 0, K.corrFieldCount = s && s.corrFieldCount ? s.corrFieldCount : void 0, K.weightField = s && s.weightField ? s.weightField : L.defaultIntensityTopValue, K.lineWidth = s && (s.lineWidth || 0 == s.lineWidth) ? s.lineWidth : L.defaultOutlineWidth, K.color = s && s.color ? s.color : L.defaultMarkerColor, K.markerOpacity = s && (s.markerOpacity || 0 == s.markerOpacity) ? s.markerOpacity : L.defaultMarkerOpacity, K.labelYear = s && s.labelYear ? s.labelYear : "";
            K.corrData = s && s.corrData ? s.corrData : [];
            K.animated = !(!s || !s.animated) && s.animated, K.timeField = s && s.timeField ? s.timeField : void 0, K.frameCount = s && s.frameCount ? s.frameCount : L.defaultTimeSegment, K.duration = s && s.duration ? s.duration : L.defaultTimeDuration, K.timeAccumulate = !(!s || !s.timeAccumulate) && s.timeAccumulate;
            K.timebreaks = [];
            K.timecurrData = [];
            K.showWay = s && s.showWay ? s.showWay : L.intensityDisplayWay, K.curveColor = s && s.curveColor ? s.curveColor : L.defaultMarkerColor, K.curveOpt = s && (s.curveOpt || 0 == s.curveOpt) ? s.curveOpt : L.defaultMarkerOpacity, K.dynamicCheck = !(!s || !s.dynamicCheck) && s.dynamicCheck, K.dynamicColor = s && s.dynamicColor ? s.dynamicColor : L.defaultMarkerColor, K.dynamicOpt = s && (s.dynamicOpt || 0 == s.dynamicOpt) ? s.dynamicOpt : L.defaultMarkerOpacity, K.dynamicSize = s && (s.dynamicSize || 0 == s.dynamicSize) ? s.dynamicSize : L.defaultIntensityDynamicSize;
            return K
        };
        N.prototype.toJson = function () {
            return z
        };
        var w = I.PolygonSimpleConfig = function (s) {
            B.type = L.configTypes.POLYGON_SIMPLE;
            B.labelField = s && s.labelField ? s.labelField : void 0, B.labelColor = s && s.labelColor ? s.labelColor : L.defaultLabelColor, B.labelFont = s && s.labelFont ? s.labelFont : L.defaultLabelFont, B.labelSize = s && s.labelSize ? s.labelSize : L.defaultLabelSize;
            B.fillColor = s && s.fillColor ? s.fillColor : L.defaultFillColor, B.fillOpacity = s && (s.fillOpacity || 0 == s.fillOpacity) ? s.fillOpacity : L.defaultFillOpacity, B.outlineColor = s && s.outlineColor ? s.outlineColor : L.defaultOutlineColor, B.outlineOpacity = s && (s.outlineOpacity || 0 == s.outlineOpacity) ? s.outlineOpacity : L.defaultOutlineOpacity, B.outlineWidth = s && (s.outlineWidth || 0 == s.outlineWidth) ? s.outlineWidth : L.defaultOutlineWidth;
            B.animated = !(!s || !s.animated) && s.animated, B.timeField = s && s.timeField ? s.timeField : "year", B.frameCount = s && s.frameCount ? s.frameCount : L.defaultTimeSegment, B.duration = s && s.duration ? s.duration : L.defaultTimeDuration, B.timeAccumulate = !(!s || !s.timeAccumulate) && s.timeAccumulate, B.timebreaks = [];
            B.timecurrData = [];
            B.cartogram = !(!s || !s.cartogram) && s.cartogram, B.cartogramType = s && s.cartogramType ? s.cartogramType : L.defaultCartogramType, B.cartogramDataType = s && s.cartogramDataType ? s.cartogramDataType : L.defaultCartogramDataType;
            B.cartogramFields = s && s.cartogramFields ? s.cartogramFields : [], B.cartogramYears = s && s.cartogramYears ? s.cartogramYears : [], B.cartogramBucketField = s && s.cartogramBucketField ? s.cartogramBucketField : "", B.cartogramBucketYear = s && s.cartogramBucketYear ? s.cartogramBucketYear : "", B.cartogramBucketCount = s && s.cartogramBucketCount ? s.cartogramBucketCount : L.defaultBucketCount, B.cartogramMinSise = s && s.cartogramMinSise ? s.cartogramMinSise : L.defaultCartogramMinSize, B.cartogramMaxSize = s && s.cartogramMaxSize ? s.cartogramMaxSize : L.defaultCartogramMaxSize;
            B.cartogramBucket = [];
            return B
        };
        var J = I.PolygonChoroplethConfig = function (y) {
            if (q.type = L.configTypes.POLYGON_CHOROPLETH, q.fieldName = y && y.fieldName ? y.fieldName : void 0, q.bucketCount = y && y.bucketCount ? y.bucketCount : L.defaultBucketCount, q.bucketType = y && y.bucketType ? y.bucketType : L.defaultBucketType, q.colors = y && y.colors ? y.colors : L.defaultColorRamp, q.colorsReversed = !(!y || !y.colorsReversed) && y.colorsReversed, q.fillColor = L.noDataColor, q.breaks = y && y.breaks ? y.breaks : void 0, y && y.equalInterval) {
                q.bucketType = "equalinterval", q.breaks = [];
                for (var s = 0; s < y.breakCount; s++) {
                    q.breaks[s] = y.equalInterval.max - s * y.equalInterval.step
                }
            }
            q.labelField = y && y.labelField ? y.labelField : void 0, q.labelColor = y && y.labelColor ? y.labelColor : L.defaultLabelColor, q.labelFont = y && y.labelFont ? y.labelFont : L.defaultLabelFont, q.labelSize = y && y.labelSize ? y.labelSize : L.defaultLabelSize;
            q.labelYear = y && y.labelYear ? y.labelYear : "";
            q.fillColor = y && y.fillColor ? y.fillColor : L.defaultFillColor, q.fillOpacity = y && (y.fillOpacity || 0 == y.fillOpacity) ? y.fillOpacity : L.defaultFillOpacity, q.outlineColor = y && y.outlineColor ? y.outlineColor : L.defaultOutlineColor, q.outlineOpacity = y && (y.outlineOpacity || 0 == y.outlineOpacity) ? y.outlineOpacity : L.defaultOutlineOpacity, q.outlineWidth = y && (y.outlineWidth || 0 == y.outlineWidth) ? y.outlineWidth : L.defaultOutlineWidth;
            q.animated = !(!y || !y.animated) && y.animated, q.timeField = y && y.timeField ? y.timeField : void 0, q.frameCount = y && y.frameCount ? y.frameCount : L.defaultTimeSegment, q.duration = y && y.duration ? y.duration : L.defaultTimeDuration, q.timeAccumulate = !(!y || !y.timeAccumulate) && y.timeAccumulate, q.timebreaks = [];
            q.timecurrData = [];
            q.cartogram = !(!y || !y.cartogram) && y.cartogram, q.cartogramType = y && y.cartogramType ? y.cartogramType : L.defaultCartogramType, q.cartogramDataType = y && y.cartogramDataType ? y.cartogramDataType : L.defaultCartogramDataType, q.cartogramFields = y && y.cartogramFields ? y.cartogramFields : [], q.cartogramYears = y && y.cartogramYears ? y.cartogramYears : [], q.cartogramBucketField = y && y.cartogramBucketField ? y.cartogramBucketField : "", q.cartogramBucketYear = y && y.cartogramBucketYear ? y.cartogramBucketYear : "", q.cartogramBucketCount = y && y.cartogramBucketCount ? y.cartogramBucketCount : L.defaultBucketCount, q.cartogramMinSise = y && y.cartogramMinSise ? y.cartogramMinSise : L.defaultCartogramMinSize, q.cartogramMaxSize = y && y.cartogramMaxSize ? y.cartogramMaxSize : L.defaultCartogramMaxSize;
            q.cartogramBucket = [];
            return q
        };
        var E = I.PolygonCategoryConfig = function (s) {
            M.type = L.configTypes.POLYGON_CATEGORY, M.labelField = s && s.labelField ? s.labelField : void 0, M.labelColor = s && s.labelColor ? s.labelColor : L.defaultLabelColor, M.labelFont = s && s.labelFont ? s.labelFont : L.defaultLabelFont, M.labelSize = s && s.labelSize ? s.labelSize : L.defaultLabelSize;
            M.labelYear = s && s.labelYear ? s.labelYear : "";
            M.fillColor = s && s.fillColor ? s.fillColor : L.defaultFillColor, M.fillOpacity = s && (s.fillOpacity || 0 == s.fillOpacity) ? s.fillOpacity : L.defaultFillOpacity, M.outlineColor = s && s.outlineColor ? s.outlineColor : L.defaultOutlineColor, M.outlineOpacity = s && (s.outlineOpacity || 0 == s.outlineOpacity) ? s.outlineOpacity : L.defaultOutlineOpacity, M.outlineWidth = s && (s.outlineWidth || 0 == s.outlineWidth) ? s.outlineWidth : L.defaultOutlineWidth;
            M.colors = s && s.colors ? s.colors : L.defaultColorRamp, M.fieldName = s && s.fieldName ? s.fieldName : void 0, M.fieldValues = s && s.fieldValues ? s.fieldValues : void 0, M.fieldColors = s && s.fieldColors ? s.fieldColors : void 0;
            M.animated = !(!s || !s.animated) && s.animated, M.timeField = s && s.timeField ? s.timeField : void 0, M.frameCount = s && s.frameCount ? s.frameCount : L.defaultTimeSegment, M.duration = s && s.duration ? s.duration : L.defaultTimeDuration, M.timeAccumulate = !(!s || !s.timeAccumulate) && s.timeAccumulate, M.timebreaks = [];
            H.timecurrData = [];
            M.cartogram = !(!s || !s.cartogram) && s.cartogram, M.cartogramType = s && s.cartogramType ? s.cartogramType : L.defaultCartogramType, M.cartogramDataType = s && s.cartogramDataType ? s.cartogramDataType : L.defaultCartogramDataType, M.cartogramFields = s && s.cartogramFields ? s.cartogramFields : [], M.cartogramYears = s && s.cartogramYears ? s.cartogramYears : [], M.cartogramBucketField = s && s.cartogramBucketField ? s.cartogramBucketField : "", M.cartogramBucketYear = s && s.cartogramBucketYear ? s.cartogramBucketYear : "", M.cartogramBucketCount = s && s.cartogramBucketCount ? s.cartogramBucketCount : L.defaultBucketCount, M.cartogramMinSise = s && s.cartogramMinSise ? s.cartogramMinSise : L.defaultCartogramMinSize, M.cartogramMaxSize = s && s.cartogramMaxSize ? s.cartogramMaxSize : L.defaultCartogramMaxSize;
            M.cartogramBucket = [];
            return M
        };
        I.create = function (s) {
            return null == s ? null : s == L.configTypes.MARKER_SIMPLE || s.type == L.configTypes.MARKER_SIMPLE ? new G(s) : s == L.configTypes.MARKER_INTENSITY || s.type == L.configTypes.MARKER_INTENSITY ? new G(s) : s == L.configTypes.MARKER_HEAT || s.type == L.configTypes.MARKER_HEAT ? new N(s) : s == L.configTypes.MARKER_CHOROPLETH || s.type == L.configTypes.MARKER_CHOROPLETH ? new D(s) : s == L.configTypes.MARKER_BUBBLE || s.type == L.configTypes.MARKER_BUBBLE ? new P(s) : s == L.configTypes.MARKER_CATEGORY || s.type == L.configTypes.MARKER_CATEGORY ? new O(s) : s == L.configTypes.MARKER_FLUID || s.type == L.configTypes.MARKER_FLUID ? new p(s) : s == L.configTypes.POLYGON_SIMPLE || s.type == L.configTypes.POLYGON_SIMPLE ? new w(s) : s == L.configTypes.POLYGON_CHOROPLETH || s.type == L.configTypes.POLYGON_CHOROPLETH ? new J(s) : s == L.configTypes.POLYGON_CATEGORY || s.type == L.configTypes.POLYGON_CATEGORY ? new E(s) : void 0
        };
        return I
    }

    var j = j();

    function k() {
        this.singleCount = 60
    }

    var b = new k();
    var n = new d()
};

function SetProgressTime() {
    this.elementId = "#overShaftDiv";
    this.attributeData;
    this.cid;
    this.config;
    this.data = [];
    this._mProgressTimer;
    this._speed = 1000;
    this._index = 0;
    this.maxValue = 10;
    this.value = 0;
    this.currentX = 0;
    this.operData = [];
    this.contentBoxMinWidth = 80;
    this.singleCount = 60;
    this.legendTemplate = _.template($("#legend-template").html());
    this.init()
}

SetProgressTime.prototype = {
    init: function () {
        this.windowResize();
        this.bindEvent();
        this.scrollBinEvent()
    }, resize: function () {
        var e = this;
        if (e.config) {
            var c = $(".content.clearfloat .map").width();
            var b = e.config.timeField == "year" ? e.data.length : e.data.length - 1;
            var d = (c - 36) / b - 1;
            var a = d < e.contentBoxMinWidth ? e.contentBoxMinWidth * b : c - 36;
            d = d < e.contentBoxMinWidth ? e.contentBoxMinWidth - 1 : d;
            $(".time_slot p").width(d);
            $(".time_slot").width(a);
            $("#progressTime_concent").width(a);
            $(".timeShaftBox .progressTime").width(a);
            $(".timeShaftBox").width(a + 36);
            d < e.contentBoxMinWidth ? $("#overShaftDiv").css("overflow-x", "auto") : $("#overShaftDiv").css("overflow", "hidden");
            $("#overShaftDiv").width(c)
        }
    }, windowResize: function () {
        var a = this;
        $(window).resize(function () {
            a.resize()
        })
    }, bindEvent: function () {
        var a = this;
        $("#progressTime_control").on("click", function () {
            a.timeShaftBtn(this)
        })
    }, timeShaftBtn: function (b) {
        var a = this;
        if ($(b).attr("title") == "暂停") {
            $(b).attr("title", "开始");
            $(b).css("background-image", "url(./img/play.png)");
            window.clearInterval(a._mProgressTimer)
        } else {
            $(b).attr("title", "暂停");
            $(b).css("background-image", "url(./img/pause.png)");
            analysisMap.mapEntrance(a.attributeData, a.cid);
            if (a._index >= a.maxValue) {
                $("#scroll_Thumb").css("margin-left", "0px");
                $("#scroll_Track").css("width", "0px");
                a.value = 0;
                a._index = 0;
                a.setTextBig(a._index);
                var c = [];
                a.config.timeField == "year" ? (a.data[a._index] ? c.push(a.data[a._index]) : c.push(a.data[a.data.length - 1])) : (a.data[a._index + 1] ? (c.push(a.data[a._index]), c.push(a.data[a._index + 1])) : (c.push(a.data[a.data.length - 2]), c.push(a.data[a.data.length - 1])));
                a.config.timecurrData = c;
                if (a.config.timeField == "year" && a.config.type.indexOf("polygon") != -1) {
                    a.pdTypePolygon()
                }
                a.attributeData.config = a.config;
                analysisMap.mapEntrance(a.attributeData, a.cid)
            }
            a._mProgressTimer = window.setInterval(function () {
                if (a._index < a.maxValue) {
                    a._index += 1;
                    a.progressBar(a._index);
                    a.setTextBig(a._index);
                    var d = [];
                    a.config.timeField == "year" ? (a.data[a._index] ? d.push(a.data[a._index]) : d.push(a.data[a.data.length - 1])) : (a.data[a._index + 1] ? (d.push(a.data[a._index]), d.push(a.data[a._index + 1])) : (d.push(a.data[a.data.length - 2]), d.push(a.data[a.data.length - 1])));
                    a.config.timecurrData = d
                } else {
                    a.progressTimeStop()
                }
                if (a.config.timeField == "year" && a.config.type.indexOf("polygon") != -1) {
                    a.pdTypePolygon()
                }
                a.attributeData.config = a.config;
                analysisMap.mapEntrance(a.attributeData, a.cid)
            }, a._speed)
        }
    }, progressTimeStop: function () {
        var a = this;
        $("#progressTime_control").attr("title", "开始");
        $("#progressTime_control").css("background-image", "url(./img/play.png)");
        var b = [];
        a.config.timeField == "year" ? (a.data[a.value] ? b.push(a.data[a.value]) : b.push(a.data[a.data.length - 1])) : (a.data[a.value + 1] ? (b.push(a.data[a.value]), b.push(a.data[a.value + 1])) : (b.push(a.data[a.data.length - 2]), b.push(a.data[a.data.length - 1])));
        a.config.timecurrData = b;
        window.clearInterval(a._mProgressTimer);
        a.setTextBig(a.value);
        a.SetInterval(a._index)
    }, Initialize: function () {
        var a = this;
        if (a.value > a.maxValue) {
            alert("给定当前值大于了最大值");
            return
        }
        a.progressBarInit();
        $("#scroll_Track").css("width", a.currentX + "px");
        $("#scroll_Thumb").css("margin-left", a.currentX + "px");
        var b = a.data ? (a.config.timeField == "year" ? a.data[0] : a.data[0] + "~" + a.data[1]) : "";
        $("#scroll_Thumb").html(b)
    }, progressBar: function (c) {
        var b = this;
        b.value = c;
        if (b.value >= b.maxValue) {
            b.value = b.maxValue
        }
        if (b.value <= 0) {
            b.value = 0
        }
        var a = b.value / b.maxValue * $("#scrollBar").width() + "px";
        $("#scroll_Track").css("width", a);
        $("#scroll_Thumb").css("margin-left", a)
    }, scrollBinEvent: function () {
        var a = this;
        $("#scrollBarBox").click(function (b) {
            a.scrollSchedule(b)
        });
        $("#scrollBarBox").mousemove(function (b) {
            a.scrollPopup(b)
        });
        $("#scrollBarBox").mouseover(function (b) {
            $(".timecode").show()
        });
        $("#scrollBarBox").mouseout(function (b) {
            $(".timecode").hide()
        })
    }, scrollSchedule: function (c) {
        var b = this;
        var a;
        var e = c.clientX - b.currentX;
        a = e - b.currentX - $("#scrollBar").offset().left;
        $("#scroll_Thumb").css("margin-left", a + "px");
        $("#scroll_Track").css("width", a + 2 + "px");
        if ((a + 1) >= $("#scrollBar").width()) {
            $("#scroll_Thumb").css("margin-left", $("#scrollBar").width() - 1 + "px");
            $("#scroll_Track").css("width", $("#scrollBar").width() + 2 + "px");
            b.value = b.maxValue
        } else {
            if (a <= 0) {
                $("#scroll_Thumb").css("margin-left", "0px");
                $("#scroll_Track").css("width", "0px");
                b.value = 0
            } else {
                b.value = Math.floor(a * b.maxValue / $("#scrollBar").width())
            }
        }
        var d = [];
        b.config.timeField == "year" ? (b.data[b.value] ? d.push(b.data[b.value]) : d.push(b.data[b.data.length - 1])) : (b.data[b.value + 1] ? (d.push(b.data[b.value]), d.push(b.data[b.value + 1])) : (d.push(b.data[b.data.length - 2]), d.push(b.data[b.data.length - 1])));
        b.config.timecurrData = d;
        b.setTextBig(b.value);
        b.SetInterval(b.value);
        b._index = b.value;
        if (b.config.timeField == "year" && b.config.type.indexOf("polygon") != -1) {
            b.pdTypePolygon()
        }
        b.attributeData.config = b.config;
        analysisMap.mapEntrance(b.attributeData, b.cid)
    }, scrollPopup: function (c) {
        var b = this;
        var a;
        var d = c.clientX - b.currentX;
        a = d - b.currentX - $("#scrollBar").offset().left;
        $(".timecode").show().css("left", a - 28 + "px");
        if ((a + 1) >= $("#scrollBar").width()) {
            $(".timecode").css("left", $("#scrollBar").width() - 43 + "px");
            b.value = b.maxValue
        } else {
            if (a <= 0) {
                $(".timecode").css("left", "-28px");
                b.value = 0
            } else {
                b.value = Math.floor(a * b.maxValue / $("#scrollBar").width())
            }
        }
        b.setTextSmall(b.value)
    }, progressBarInit: function () {
        this.currentX = $("#scrollBar").width() * (this.value / this.maxValue)
    }, setTextBig: function (c) {
        var b = this;
        var a = b.config.timeField == "year" ? (b.data[c] ? b.data[c] : "") : (b.data[c] && b.data[c + 1] ? (b.data[c] + "~" + b.data[c + 1]) : "");
        $("#scroll_Thumb").html(a)
    }, setTextSmall: function (c) {
        var b = this;
        var a = b.config.timeField == "year" ? b.data[c] : b.data[c] + "~" + b.data[c + 1];
        $(".timecode").html(a)
    }, SetInterval: function (b) {
        var a = this;
        window.clearInterval(a._mProgressTimer);
        if ($("#progressTime_control").attr("title") == "开始") {
            a.progressBar(b);
            a.setTextBig(b)
        } else {
            a._mProgressTimer = window.setInterval(function () {
                if (b < a.maxValue) {
                    b += 1;
                    a.progressBar(b);
                    a.setTextBig(b);
                    var c = [];
                    a.config.timeField == "year" ? (a.data[b] ? c.push(a.data[b]) : c.push(a.data[a.data.length - 1])) : (a.data[b + 1] ? (c.push(a.data[b]), c.push(a.data[b + 1])) : (c.push(a.data[a.data.length - 2]), c.push(a.data[a.data.length - 1])));
                    a.config.timecurrData = c
                } else {
                    a.progressTimeStop()
                }
                if (a.config.timeField == "year" && a.config.type.indexOf("polygon") != -1) {
                    a.pdTypePolygon()
                }
                a.attributeData.config = a.config;
                analysisMap.mapEntrance(a.attributeData, a.cid)
            }, a._speed)
        }
    }, toolContentRender: function (c) {
        var b = this;
        var a = [];
        if (b.config.timeField == "year") {
            $.each(c, function (d, e) {
                a.push("<p title='" + e + "'>" + e + "</p>")
            })
        } else {
            $.each(c, function (d, e) {
                if (c.length == (d + 1)) {
                    return true
                }
                a.push("<p title='" + e + "~" + c[d + 1] + "'>" + e + "~" + c[d + 1] + "</p>")
            })
        }
        $(".time_slot").html(a.join(""));
        b.resize()
    }, pdTypePolygon: function () {
        var a = this;
        a.config.type == "polygon-choropleth" ? a.timeYearDataBreak() : a.timeSingleDataBreak()
    }, timeYearDataBreak: function () {
        var n = this;
        var e = n.config;
        var g = e.bucketCount;
        var h = e.bucketType;
        var i = [];
        var o = n.attributeData.data;
        var s = e.fieldName;
        var a = e.timecurrData[0];
        $(o).each(function (t, u) {
            $.each(u.indexdata, function (x, w) {
                if (a == "all" || a == "") {
                    i.push(w.data[s])
                } else {
                    if (Number(w.indexdata) == a) {
                        i.push(w.data[s])
                    }
                }
            })
        });
        var c = i.sort(function (u, t) {
            return u - t
        });
        var b = $.unique(c);
        var f = $.grep(b, function (u, t) {
            return u < 0
        });
        var m = $.grep(b, function (u, t) {
            return u == 0
        });
        b = $.grep(b, function (u, t) {
            return u > 0
        });
        var q = parseInt(g);
        var d = n.dataSector(b, q, h);
        var k = n.getRandomColors(g, e.colors).reverse();
        if (n.attributeData.legendOrder && n.attributeData.legendOrder == "desc") {
            k.reverse()
        }
        var j = [];
        $(d.ranges).each(function (t, u) {
            j.push({value: u, color: k[t]})
        });
        if (!d.isMonodrome) {
            e.timeYearDataBreak = j
        } else {
            e.timeYearDataBreak = []
        }
        n.updateLegend()
    }, getRandomColors: function (h, f) {
        var g = this;
        var c = [], d = new Rainbow;
        d.setNumberRange(0, h);
        d.setSpectrum.apply(void 0, f ? f : ["#C00000", "#ffffff"]);
        for (var b = 0; b < h; b++) {
            c.push("#" + d.colourAt(b))
        }
        return c
    }, dataSector: function (a, j, f) {
        var k = this;
        a = a || [];
        var b = [];
        var m = a.length;
        var c = false;
        if (j < m) {
            if (f == "equalcount") {
                var d = (m - 1) / j;
                for (var e = 0; e < j; e++) {
                    var h = Math.ceil(e * d);
                    b.push(Number(a[h]))
                }
                b.push(Number(a[m - 1]))
            } else {
                if (f == "equalinterval") {
                    var d = (Number(a[m - 1]) - Number(a[0])) / j;
                    for (var e = 0; e < j; e++) {
                        var n = Number(a[0]) + e * d;
                        b.push(n)
                    }
                    b.push(Number(a[m - 1]))
                }
            }
            c = false
        } else {
            b = a;
            c = true
        }
        var g = j < m ? j : m;
        return {ranges: b, count: g, isMonodrome: c}
    }, timeSingleDataBreak: function () {
        var b = this;
        var d = b.config, c = b.attributeData.data, a = [], e = d.fieldName;
        $(c).each(function (f, g) {
            $.each(g.indexdata, function (i, h) {
                if (d.labelYear == "all" || d.labelYear == "") {
                    if ($.inArray(h.data[e], a) == -1) {
                        a.push(h.data[e])
                    }
                } else {
                    if (Number(h.indexdata) == d.timecurrData[0]) {
                        if ($.inArray(h.data[e], a) == -1) {
                            a.push(h.data[e])
                        }
                    }
                }
            })
        });
        d.timeYearDataBreak = a;
        b.timeSingleDataColors()
    }, timeSingleDataColors: function () {
        var e = this;
        var f = e.config;
        var c = f.timeYearDataBreak;
        var b = c.sort(function (h, g) {
            return h - g
        });
        var a = b.length > e.singleCount ? e.singleCount + 1 : f.timeYearDataBreak.length;
        var d = e.getRandomColors(a, f.colors).reverse();
        if (e.attributeData.legendOrder && e.attributeData.legendOrder == "desc") {
            d.reverse()
        }
        f.timeYearDataColors = d;
        e.updateLegend()
    }, updateLegend: function () {
        var b = this;
        if (!b.attributeData.showLegend) {
            return
        }
        var a = b.createLegendObj();
        a.items && ($("#legend-container #" + a.id).replaceWith(this.legendTemplate(a)), b.attributeData.visible && b.attributeData.showLegend || $("#legend-container #" + a.id).addClass("hide"), $("#legend-container ul").removeClass("firstShow"), $("#legend-container ul:not(.hide):first").addClass("firstShow"));
        b.attributeData.visible && b.attributeData.showLegend && (a.items) ? $("#legend-wrapper").removeClass("hide") : $("#legend-wrapper").addClass("hide")
    }, createLegendObj: function () {
        var y = this;
        var A, z = y.attributeData.geometryType;
        "pt" == z || "mpt" == z ? A = "marker" : "pg" != z && "mpg" != z || (A = "polygon");
        var m = y.config;
        if (!A) {
            var e = m.type;
            A = 0 == e.indexOf("marker-") ? "marker" : 0 == e.indexOf("polyline-") ? "polyline" : 0 == e.indexOf("polygon-") ? "polygon" : "marker"
        }
        var j = (m.animated && m.timeField == "year" && m.type.indexOf("polygon") != -1) ? m.timeYearDataBreak : m.breaks,
            B = [], k = "";
        if (m.type == "polygon-choropleth") {
            B.push({color: "#ffffff", value: 0})
        }
        if (m.type == "marker-choropleth" || m.type == "polygon-choropleth") {
            $.each(j, function (c, a) {
                c < j.length - 1 && B.push({color: a.color, value: a.value + "~" + j[c + 1].value})
            })
        } else {
            if (m.type == "marker-bubble") {
                for (var w, u = "single" == m.fillMode ? m.markerColor : void 0, x = 0; x < j.length; x++) {
                    w = j.length > 9 ? 1 + 1 * j[x].markerSize : 1 + 2 * j[x].markerSize, x < j.length - 1 && B.push({
                        size: w,
                        color: u,
                        value: j[x].value + "~" + j[x + 1].value
                    })
                }
                if ("multi" == m.fillMode) {
                    var q = m.colorBreaks;
                    $.each(q, function (c, a) {
                        c < q.length - 1 && B.push({color: a.color, value: a.value + "~" + q[c + 1].value})
                    })
                }
                k = j.length > 9 ? "width:20px;" : "width:40px;"
            } else {
                if (m.type == "marker-category" || m.type == "polygon-category") {
                    var b = (m.animated && m.timeField == "year" && m.type.indexOf("polygon") != -1) ? m.timeYearDataColors : m.fieldColors;
                    var i = (m.animated && m.timeField == "year" && m.type.indexOf("polygon") != -1) ? m.timeYearDataBreak : m.fieldValues;
                    var o = [];
                    if (i.length != b.length) {
                        o = i.slice(0, b.length - 1);
                        o.push("其它")
                    } else {
                        o = i.slice(0)
                    }
                    $.each(o, function (c, a) {
                        B.push({color: b[c], value: a})
                    })
                } else {
                    B = j
                }
            }
        }
        var g = y.attributeData.legendOrder;
        return "desc" == g, {
            id: y.cid,
            type: A,
            title: y.attributeData.legendTitle ? y.attributeData.legendTitle : y.attributeData.dataName,
            outlineColor: m.outlineColor,
            items: B,
            widthVal: k
        }
    }, timeShaft: function (b, a, e) {
        var c = this;
        c.resetConfig();
        if (b) {
            c.attributeData = a;
            c.cid = e;
            c.config = a.config;
            c.data = c.config.timebreaks;
            c.maxValue = c.config.frameCount;
            c._speed = Number(c.config.duration) * 1000;
            c.toolContentRender(c.config.timebreaks);
            c.timeShaftShow();
            var d = [];
            c.config.timeField == "year" ? d.push(c.data[0]) : d.push(c.data[0]), d.push(c.data[1]);
            c.config.timecurrData = d;
            if (c.config.timeField == "year" && c.config.type.indexOf("polygon") != -1) {
                c.pdTypePolygon()
            }
            c.Initialize()
        } else {
            c.timeShaftHide();
            window.clearInterval(c._mProgressTimer)
        }
    }, resetConfig: function () {
        var a = this;
        a.attributeData = null;
        a.cid = null;
        a.config = null;
        a.data = null;
        window.clearInterval(a._mProgressTimer);
        a._mProgressTimer = null;
        a._speed = 1000;
        a._index = 0;
        a.maxValue = 10;
        a.value = 0;
        a.currentX = 0;
        a.operData = [];
        $(".time_slot").html("");
        $("#scroll_Thumb").html("");
        $("#progressTime_control").attr("title", "开始");
        $("#progressTime_control").css("background-image", "url(./img/play.png)")
    }, timeShaftShow: function () {
        var a = this;
        $(".right-bottom-container").css({bottom: "50px"});
        $(a.elementId).show()
    }, timeShaftHide: function () {
        var a = this;
        $(a.elementId).scrollLeft(0);
        $(".right-bottom-container").css({bottom: "4px"});
        $(a.elementId).hide()
    },
};