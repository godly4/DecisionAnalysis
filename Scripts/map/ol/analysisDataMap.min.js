function AnalysisMap() {
    this.olMap;
    this.mapId = "allmap";
    this.selectClick;
    this.singleCount = 60;
    this.data;
    this.currOperData;
    this.currLayer;
    this.intensityPointLayer;
    this.intensityMoveLayer;
    this.currPolygnData;
    this.overlayPopup;
    this.container = document.getElementById("popup");
    this.content = document.getElementById("popup-content");
    this.closer = document.getElementById("popup-closer");
    this.init()
}

AnalysisMap.prototype = {
    init: function () {
        this.mapPopup();
        this.mapInit();
        this.mapSelectClick()
    }, resize: function () {
        this.olMap.updateSize()
    }, mapInit: function () {
        var a = this;
        a.olMap = new ol.Map({
            target: a.mapId,
            layers: [new ol.layer.Tile({source: new ol.source.OSM()})],
            overlays: [a.overlayPopup],
            loadTilesWhileAnimating: true,
            view: new ol.View({center: [116.404, 39.915], zoom: 10, projection: "EPSG:4326"})
        })
    }, bindEvent: function () {
        var c = this;
        var b = new ol.interaction.Select();
        var a = new ol.interaction.Select({condition: ol.events.condition.pointerMove,});
        c.olMap.addInteraction(b);
        c.olMap.addInteraction(a);
        b.on("select", function (d) {
            if (d.selected.length > 0) {
            }
        });
        a.on("select", function (d) {
            if (d.selected.length > 0) {
            } else {
                if (d.deselected.length > 0) {
                }
            }
        })
    }, mapEntrance: function (a, c) {
        var b = this;
        b.currOperData = a;
        b.currOperData = $.extend({cid: c}, b.currOperData);
        if (a.data.length == 0) {
            return
        }
        b.getLayer();
        if (a.visible) {
            b.olMap.removeInteraction(b.selectClick);
            b.selectClick.getFeatures().array_ = [];
            b.olMap.addInteraction(b.selectClick);
            b.closePopup();
            if (a.geometryType == "pt") {
                b.micOperate()
            } else {
                if (a.geometryType == "pg") {
                    b.macOperate()
                }
            }
        } else {
            b.hideLayer();
            b.hideCartogram()
        }
    }, micOperate: function () {
        var b = this;
        var a = b.currOperData;
        if (a.config.type == "marker-heat") {
            b.currLayer ? (b.currLayer.setVisible(true), b.heatFeatureOpert(), b.setHeatLayerStyle()) : b.heatMapLayerRender()
        } else {
            if (a.config.type == "marker-intensity") {
                b.currLayer ? (b.currLayer.setVisible(true), b.intensityPointLayer.setVisible(true), b.intensityMoveLayer.setVisible(true), b.setIntensityLayerStyle()) : b.intensityLayerRender()
            } else {
                b.currLayer ? (b.currLayer.setVisible(true), b.setLayerStyle()) : b.pointerLayerRender()
            }
        }
    }, macOperate: function () {
        var a = this;
        a.currLayer ? (a.currLayer.setVisible(true), a.setLayerStyle()) : a.polygonLayerRender();
        a.currOperData.config.cartogram ? (a.showCartogram(), a.cartogramDataHandler()) : a.hideCartogram()
    }, pointerLayerRender: function () {
        var g = this, e = g.currOperData.data;
        var k = g.currOperData.config.labelYear;
        var b = g.currOperData.config.fieldName;
        var f = [], a = [], c = 0, h = [];
        $.each(e, function (m, n) {
            if (n.indexdata) {
                $.each(n.indexdata, function (r, q) {
                    if (k == q.indexyear || k == "" || k == "all") {
                        var s = {
                            elementid: n.elementid,
                            title: n.title,
                            lat: n.lat,
                            lng: n.lng,
                            year: q.indexyear,
                            data: q.data,
                            sm: c++
                        };
                        var p = new ol.geom.Point([Number(n.lng), Number(n.lat)]);
                        p.set("name", n.title);
                        h.push(new ol.Graphic(p));
                        h[h.length - 1].setStyle(new ol.style.Style({
                            image: g.micImageRender(s),
                            text: g.textRender(s)
                        }))
                    }
                })
            } else {
                var o = {elementid: n.elementid, title: n.title, lat: n.lat, lng: n.lng, sm: c++};
                var l = new ol.geom.Point([Number(n.lng), Number(n.lat)]);
                l.set("name", n.title);
                h.push(new ol.Graphic(l));
                h[h.length - 1].setStyle(new ol.style.Style({image: g.micImageRender(o), text: g.textRender(o)}))
            }
        });
        var d = new ol.layer.Image({
            source: new ol.source.Graphic({graphics: h}),
            opacity: 1,
            visible: true,
            layerIdName: "layer_" + g.currOperData.dataUid,
            themeType: "point",
            listId: g.currOperData.cid,
            zIndex: 0
        });
        g.olMap.addLayer(d);
        g.currLayer = d
    }, heatMapLayerRender: function () {
        var b = this;
        var a = new ol.layer.Heatmap({
            source: new ol.source.Vector(),
            gradient: b.currOperData.config.colors,
            opacity: b.currOperData.config.heatOpacity,
            radius: parseFloat(b.currOperData.config.heatSize),
            weight: function (c) {
                if (analysisMap.currOperData.config.weightField) {
                    return c.get("weight") - Number(analysisMap.currOperData.config.heatTopValue)
                } else {
                    return 1
                }
            },
            layerIdName: "heatLayer_" + b.currOperData.dataUid,
            listId: b.currOperData.cid,
            themeType: "point",
            zIndex: 0
        });
        b.currLayer = a;
        b.olMap.addLayer(a);
        b.heatFeatureOpert()
    }, heatFeatureOpert: function () {
        var f = this, e = f.currOperData.data, b = f.currOperData.config;
        var h = f.currOperData.config.labelYear;
        var a = f.currOperData.config.weightField;
        var d = [];
        $.each(e, function (k, l) {
            if (b.animated == true) {
                if (b.timeField == "year") {
                    $.each(l.indexdata, function (n, m) {
                        var o = Number(m.indexyear) == Number(b.timecurrData[0]);
                        if (b.timeAccumulate) {
                            o = Number(m.indexyear) <= Number(b.timecurrData[0])
                        }
                        o ? (d.push({
                            elementid: l.elementid,
                            title: l.title,
                            lat: l.lat,
                            lng: l.lng,
                            year: m.indexyear,
                            data: m.data
                        })) : "";
                        return false
                    })
                }
            } else {
                if (l.indexdata) {
                    $.each(l.indexdata, function (n, m) {
                        if (h == "" || h == "all") {
                            d.push({
                                elementid: l.elementid,
                                title: l.title,
                                lat: l.lat,
                                lng: l.lng,
                                year: m.indexyear,
                                data: m.data
                            })
                        } else {
                            m.indexyear == h ? (d.push({
                                elementid: l.elementid,
                                title: l.title,
                                lat: l.lat,
                                lng: l.lng,
                                year: m.indexyear,
                                data: m.data
                            })) : "";
                            return false
                        }
                    })
                } else {
                    d.push({elementid: l.elementid, title: l.title, lat: l.lat, lng: l.lng})
                }
            }
        });
        var c = [];
        $.each(d, function (k, l) {
            c.push(new ol.Feature({
                geometry: new ol.geom.Point([Number(l.lng), Number(l.lat)]),
                labelPoint: new ol.geom.Point(l.title),
                name: l.title,
                data: l,
                dataUid: f.currOperData.dataUid,
                weight: l.data ? l.data[a] : ""
            }))
        });
        var g = new ol.source.Vector({features: c});
        f.currLayer.setSource(g)
    }, setHeatLayerStyle: function () {
        var b = this, a = b.currOperData.config;
        b.currLayer.setOpacity(parseFloat(a.heatOpacity));
        b.currLayer.setRadius(parseFloat(a.heatSize));
        b.currLayer.setGradient(a.colors)
    }, intensityLayerRender: function () {
        var u = this, t = u.currOperData.config, m = u.currOperData.data;
        var s = t.labelYear, k = t.corrFieldName, c = t.fieldName, p = t.corrFieldCount, f = t.corrData;
        var e = [], q = [], v = [];
        $.each(m, function (w, x) {
            $.each(x.indexdata, function (A, z) {
                if (z.indexyear == s || s == "" || s == "all") {
                    var y = new ol.geom.Point([Number(x.lng), Number(x.lat)]);
                    y.set("name", x.title);
                    q.push(new ol.Graphic(y));
                    q[q.length - 1].setStyle(new ol.style.Style({
                        image: new ol.style.Circle({
                            radius: 5,
                            fill: new ol.style.Fill({color: "rgb(200,35,35)"}),
                            stroke: new ol.style.Stroke({color: "rgb(200,35,35)", width: 0})
                        })
                    }));
                    return false
                }
            })
        });
        var n = t.showWay == "lineWay" ? u.lineWayDataHandler() : u.curveWayDataHandler();
        var l = new ol.layer.Image({
            source: new ol.source.Graphic({graphics: q}),
            opacity: 1,
            visible: true,
            layerIdName: "intensityPointLayer_" + u.currOperData.dataUid,
            themeType: "point",
            listId: u.currOperData.cid,
            zIndex: 0
        });
        u.olMap.addLayer(l);
        var g = u.lineStyleHandler();
        var o = new mapv.DataSet(n.data);
        var a = g.lineStyle;
        var b = {map: u.olMap, dataSet: o, mapvOptions: a};
        u.olMap.addLayer(new ol.layer.Image({
            source: new ol.source.Mapv(b),
            visible: true,
            layerIdName: "intensityLayer_" + u.currOperData.dataUid,
            themeType: "point",
            listId: u.currOperData.cid,
            zIndex: 0
        }));
        var r = new mapv.DataSet(n.timeData);
        var h = g.timeDataStyle;
        var d = {map: u.olMap, dataSet: r, mapvOptions: h};
        u.olMap.addLayer(new ol.layer.Image({
            source: new ol.source.Mapv(d),
            visible: true,
            layerIdName: "intensityMoveLayer_" + u.currOperData.dataUid,
            themeType: "point",
            listId: u.currOperData.cid,
            zIndex: 0
        }))
    }, setIntensityLayerStyle: function () {
        var t = this, r = t.currOperData.config, k = t.currOperData.data;
        var q = r.labelYear, h = r.corrFieldName, c = r.fieldName, o = r.corrFieldCount, e = r.corrData;
        var m = r.showWay == "lineWay" ? t.lineWayDataHandler() : t.curveWayDataHandler();
        var f = t.lineStyleHandler();
        var n = new mapv.DataSet(m.data);
        var a = f.lineStyle;
        var b = {map: t.olMap, dataSet: n, mapvOptions: a};
        var l = new ol.source.Mapv(b);
        t.currLayer.setSource(l);
        var p = new mapv.DataSet(m.timeData);
        var g = f.timeDataStyle;
        var d = {map: t.olMap, dataSet: p, mapvOptions: g};
        var s = new ol.source.Mapv(d);
        t.intensityMoveLayer.setSource(s)
    }, moveLineWayTimeDataHandler: function (e) {
        var h = this, k = [], c = h.currOperData.config.corrData.length;
        var a = e.lnglat;
        var d = (a[1][0] - a[0][0]) / c;
        var b = (a[1][1] - a[0][1]) / c;
        for (j = 0; j < c; j++) {
            var g = a[0][0] + d * j;
            var f = a[0][1] + b * j;
            k.push({geometry: {type: "Point", coordinates: [g, f]}, count: 1, time: j})
        }
        return k
    }, moveCurveWayTimeDataHandler: function (b) {
        var a = this, c = [];
        for (i = 0; i < b.length; i++) {
            c.push({geometry: {type: "Point", coordinates: b[i]}, count: 1, time: i})
        }
        return c
    }, lineWayDataHandler: function () {
        var l = this, c = l.currOperData.config, h = l.currOperData.data;
        var m = c.labelYear, d = c.corrFieldName, a = c.fieldName, g = c.corrFieldCount, b = c.corrData;
        var k = [], f = [];
        $.each(b, function (o, p) {
            f.push({geometry: {type: "LineString", coordinates: p.lnglat}, count: Number(p.countField)});
            if (c.dynamicCheck) {
                var n = analysisMap.moveLineWayTimeDataHandler(p);
                k = k.concat(n)
            }
        });
        var e = {data: f, timeData: k};
        return e
    }, curveWayDataHandler: function () {
        var l = this, c = l.currOperData.config, h = l.currOperData.data;
        var m = c.labelYear, d = c.corrFieldName, a = c.fieldName, g = c.corrFieldCount, b = c.corrData;
        var k = [], f = [];
        $.each(b, function (p, q) {
            var s = {lng: q.lnglat[0][0], lat: q.lnglat[0][1]}, n = {lng: q.lnglat[1][0], lat: q.lnglat[1][1]};
            var r = mapv.utilCurve.getPoints([s, n]);
            f.push({geometry: {type: "LineString", coordinates: r}, count: Number(q.countField)});
            if (c.dynamicCheck) {
                var o = analysisMap.moveCurveWayTimeDataHandler(r);
                k = k.concat(o)
            }
        });
        var e = {data: f, timeData: k};
        return e
    }, lineStyleHandler: function () {
        var l = this, d = l.currOperData.config, k = l.currOperData.data;
        var m = d.labelYear, e = d.corrFieldName, a = d.fieldName, h = d.corrFieldCount, c = d.corrData;
        var b;
        if (d.showWay == "lineWay") {
            if (!d.corrFieldCount || d.corrFieldCount == "") {
                b = {strokeStyle: l.colorFormat(d.color, d.markerOpacity), lineWidth: d.lineWidth, draw: "simple"}
            } else {
                b = {
                    gradient: {
                        0: l.colorFormat(d.colors[0], d.markerOpacity),
                        0.5: l.colorFormat(d.colors[2], d.markerOpacity),
                        1: l.colorFormat(d.colors[4], d.markerOpacity)
                    }, lineWidth: d.lineWidth, max: Number(d.weightField), draw: "intensity"
                }
            }
        } else {
            if (d.showWay == "curveWay") {
                var b = {strokeStyle: l.colorFormat(d.curveColor, d.curveOpt), lineWidth: d.lineWidth, draw: "simple"}
            }
        }
        var g;
        if (d.dynamicCheck) {
            g = {
                fillStyle: l.colorFormat(d.dynamicColor, d.dynamicOpt),
                size: d.dynamicSize,
                animation: {type: "time", stepsRange: {start: 0, end: c.length}, trails: 1, duration: 8,},
                draw: "simple"
            }
        }
        var f = {lineStyle: b, timeDataStyle: g};
        return f
    }, polygonLayerRender: function () {
        var c = this, a = c.currOperData.data;
        var b = [];
        $.each(a, function (d, e) {
            b.push(e.elementid)
        });
        b = b.join(",");
        $.ajax({
            url: "./template/GetRegionGeoInfo.json",
            async: false,
            type: "get",
            dataType: "text",
            success: function (h) {
                var d = jQuery.parseJSON(h);
                var g = [];
                for (var f = 0; f < d.features.length; f++) {
                    var k = d.features[f].properties.id;
                    d.features[f].properties["config"] = c.currOperData.config;
                    d.features[f].properties["layerIdName"] = "layer_" + c.currOperData.dataUid;
                    d.features[f].properties["listId"] = c.currOperData.cid
                }
                var l = new ol.source.Vector({features: (new ol.format.GeoJSON({featureProjection: "EPSG:4326"})).readFeatures(d)});
                var e = new ol.layer.Vector({
                    style: c.polygonStyleChange,
                    opacity: 1,
                    visible: true,
                    config: c.currOperData.config,
                    data: c.currOperData.data,
                    layerIdName: "layer_" + c.currOperData.dataUid,
                    themeType: "polygon",
                    listId: c.currOperData.cid,
                    zIndex: 0
                });
                c.olMap.addLayer(e);
                e.setSource(l);
                c.currLayer = e
            }
        })
    }, polygonStyleChange: function (k) {
        var f = analysisMap;
        if (f.currLayer && f.currLayer.get("layerIdName") == k.getProperties().layerIdName && f.currLayer.get("listId") == f.currOperData.cid) {
            f.currLayer.set("config", f.currOperData.config)
        } else {
            if (!f.currLayer || f.currLayer.get("layerIdName") != k.getProperties().layerIdName) {
                var g = k.getProperties().layerIdName;
                var d = f.olMap.getLayers().getArray();
                if (d.length > 1) {
                    $.each(d, function (l, m) {
                        if (!m.get("layerIdName")) {
                            return true
                        }
                        if (m.get("layerIdName") == g) {
                            f.currLayer = m
                        }
                    })
                }
            }
        }
        var c = f.currLayer.get("config");
        if (!k) {
            return
        }
        var e = analysisMap.typeMacStyleGroup(k);
        var h = analysisMap.colorFormat(c.outlineColor, c.outlineOpacity);
        var b = e.optflag ? e.opt : c.fillOpacity;
        var a = analysisMap.colorFormat(e.fillColor, b);
        return new ol.style.Style({
            stroke: new ol.style.Stroke({color: h, width: c.outlineWidth}),
            fill: new ol.style.Fill({color: a}),
            text: analysisMap.polygonTextChange(k)
        })
    }, polygonTextChange: function (b) {
        var c = this;
        var a = c.currOperData.config;
        if (!a.labelField) {
            return
        }
        return new ol.style.Text({
            font: a.labelSize + "px " + a.labelFont,
            text: b.getProperties().name,
            fill: new ol.style.Fill({color: a.labelColor})
        })
    }, setLayerStyle: function () {
        var a = this;
        if (a.currOperData.geometryType == "pt") {
            a.changeStyle()
        } else {
            if (a.currOperData.geometryType == "pg") {
                a.currLayer.setStyle(analysisMap.polygonStyleChange)
            }
        }
    }, hideLayer: function () {
        var a = this;
        a.currLayer.setVisible(false)
    }, changeStyle: function (m) {
        var h = this, f = h.currOperData.data, c = h.currOperData.config;
        var l = h.currOperData.config.labelYear;
        var d = h.currOperData.config.fieldName;
        var g = [];
        var b = [], e = 0, k = [];
        $.each(f, function (o, p) {
            if (c.animated == true) {
                if (c.timeField == "year") {
                    $.each(p.indexdata, function (t, s) {
                        var v = Number(c.timecurrData[0]) == Number(s.indexyear);
                        if (c.timeAccumulate == true) {
                            v = Number(c.timecurrData[0]) >= Number(s.indexyear)
                        }
                        if (v) {
                            var u = {
                                elementid: p.elementid,
                                title: p.title,
                                lat: p.lat,
                                lng: p.lng,
                                year: s.indexyear,
                                data: s.data,
                                sm: e++
                            };
                            var r = new ol.geom.Point([Number(p.lng), Number(p.lat)]);
                            r.set("name", p.title);
                            k.push(new ol.Graphic(r));
                            k[k.length - 1].setStyle(new ol.style.Style({
                                image: h.micImageRender(u),
                                text: h.textRender(u)
                            }))
                        }
                    })
                } else {
                    $.each(p.indexdata, function (t, s) {
                        var u = s.data[c.timeField] >= c.timecurrData[0] && s.data[c.timeField] <= c.timecurrData[1];
                        if (c.timeAccumulate == true) {
                            u = c.timecurrData[1] && s.data[c.timeField] <= c.timecurrData[1]
                        }
                        if ((l == s.indexyear || l == "" || l == "all") && (u)) {
                            var v = {
                                elementid: p.elementid,
                                title: p.title,
                                lat: p.lat,
                                lng: p.lng,
                                year: s.indexyear,
                                data: s.data,
                                sm: e++
                            };
                            var r = new ol.geom.Point([Number(p.lng), Number(p.lat)]);
                            r.set("name", p.title);
                            k.push(new ol.Graphic(r));
                            k[k.length - 1].setStyle(new ol.style.Style({
                                image: h.micImageRender(v),
                                text: h.textRender(v)
                            }))
                        }
                    })
                }
            } else {
                if (p.indexdata) {
                    $.each(p.indexdata, function (t, s) {
                        if (l == s.indexyear || l == "" || l == "all") {
                            var u = {
                                elementid: p.elementid,
                                title: p.title,
                                lat: p.lat,
                                lng: p.lng,
                                year: s.indexyear,
                                data: s.data,
                                sm: e++
                            };
                            var r = new ol.geom.Point([Number(p.lng), Number(p.lat)]);
                            r.set("name", p.title);
                            k.push(new ol.Graphic(r));
                            k[k.length - 1].setStyle(new ol.style.Style({
                                image: h.micImageRender(u),
                                text: h.textRender(u)
                            }))
                        }
                    })
                } else {
                    var q = {elementid: p.elementid, title: p.title, lat: p.lat, lng: p.lng, sm: e++};
                    var n = new ol.geom.Point([Number(p.lng), Number(p.lat)]);
                    n.set("name", p.title);
                    k.push(new ol.Graphic(n));
                    k[k.length - 1].setStyle(new ol.style.Style({image: h.micImageRender(q), text: h.textRender(q)}))
                }
            }
        });
        var a = new ol.source.Graphic({graphics: k});
        h.currLayer.setSource(a)
    }, micImageRender: function (b) {
        var c = this;
        var a = c.currOperData.config;
        var d = c.typeMicStyleGroup(b);
        return new ol.style.Circle({
            radius: d.r,
            fill: new ol.style.Fill({color: c.colorFormat(d.fillColor, a.markerOpacity)}),
            stroke: new ol.style.Stroke({
                color: c.colorFormat(d.outlineColor, a.outlineOpacity),
                width: a.outlineWidth
            }),
        })
    }, textRender: function (c) {
        var d = this;
        var b = d.currOperData.config, a = "";
        if (!b.labelField) {
            return
        }
        if (b.labelYear == c.year || b.labelYear == "" || b.labelYear == "all") {
            a = (b.labelField != "" ? b.labelField == "titleName" ? c.title : c.data[b.labelField] : "")
        }
        return new ol.style.Text({
            font: b.labelSize + "px " + b.labelFont,
            text: a,
            offsetX: 0,
            offsetY: -b.labelSize - 4,
            fill: new ol.style.Fill({color: b.labelColor})
        })
    }, typeMicStyleGroup: function (g) {
        var h = this;
        var b = "rgba(255, 255, 255, 1)", a = 5, l = "rgba(255, 255, 255, 1)", d = h.currOperData.config;
        var k = d.labelYear;
        var e = d.fieldName;
        if (h.currOperData.config.type == "marker-simple") {
            b = d.markerColor;
            a = d.markerSize;
            l = d.outlineColor
        } else {
            if (h.currOperData.config.type == "marker-choropleth") {
                a = d.markerSize;
                $.each(d.breaks, function (m, n) {
                    l = d.outlineColor;
                    if (n.value >= g.data[d.fieldName] && m != 0) {
                        b = d.breaks[m - 1].color;
                        return false
                    }
                    if (n.value == g.data[d.fieldName] && m == 0) {
                        b = d.breaks[m].color;
                        return false
                    }
                })
            } else {
                if (h.currOperData.config.type == "marker-bubble") {
                    $.each(d.breaks, function (m, n) {
                        l = d.outlineColor;
                        if (n.value >= g.data[d.fieldName] && m != 0) {
                            a = d.breaks[m - 1].markerSize;
                            return false
                        }
                        if (n.value == g.data[d.fieldName] && m == 0) {
                            a = d.breaks[m].markerSize;
                            return false
                        }
                    });
                    if (d.fillMode == "multi") {
                        $.each(d.colorBreaks, function (m, n) {
                            l = d.outlineColor;
                            if (n.value >= g.data[d.fieldName] && m != 0) {
                                b = d.colorBreaks[m - 1].color;
                                return false
                            }
                            if (n.value == g.data[d.fieldName] && m == 0) {
                                b = d.colorBreaks[m].color;
                                return false
                            }
                        })
                    } else {
                        b = d.markerColor;
                        l = d.outlineColor
                    }
                } else {
                    if (h.currOperData.config.type == "marker-category") {
                        a = d.markerSize;
                        var c = g.data[d.fieldName];
                        var f = $.inArray(c, d.fieldValues);
                        b = d.fieldColors[f > h.singleCount - 1 ? h.singleCount : f];
                        l = d.outlineColor
                    }
                }
            }
        }
        return {fillColor: b, r: a, outlineColor: l}
    }, typeMacStyleGroup: function (l) {
        var h = this, a, c = false, b = 0, e = h.currLayer.get("config");
        var f = h.currLayer.get("data");
        if (e.type == "polygon-simple") {
            a = e.fillColor
        } else {
            if (e.type == "polygon-choropleth") {
                var d = "";
                if (e.animated && e.timeField == "year") {
                    $.each(f, function (m, n) {
                        var o = n.elementid;
                        if (l.getProperties().id == o) {
                            $.each(n.indexdata, function (q, p) {
                                if (e.timecurrData[0] == p.indexdata) {
                                    d = p.data[e.fieldName]
                                }
                            })
                        }
                    });
                    if (d == undefined || d == 0 || e.breaks.length == 0) {
                        a = "#ffffff"
                    } else {
                        $.each(e.timeYearDataBreak, function (m, n) {
                            if (n.value >= d && m != 0) {
                                a = e.timeYearDataBreak[m - 1].color;
                                return false
                            }
                            if (n.value == d && m == 0) {
                                a = e.timeYearDataBreak[m].color;
                                return false
                            }
                        })
                    }
                } else {
                    $.each(f, function (m, n) {
                        var o = n.elementid;
                        if (l.getProperties().id == o) {
                            $.each(n.indexdata, function (q, p) {
                                if (e.labelYear == p.indexdata) {
                                    d = p.data[e.fieldName]
                                }
                            })
                        }
                    });
                    if (d == undefined || d == 0 || e.breaks.length == 0) {
                        a = "#ffffff"
                    } else {
                        $.each(e.breaks, function (m, n) {
                            if (n.value >= d && m != 0) {
                                a = e.breaks[m - 1].color;
                                return false
                            }
                            if (n.value == d && m == 0) {
                                a = e.breaks[m].color;
                                return false
                            }
                        })
                    }
                    if (e.animated) {
                        var k = !(Number(e.timecurrData[0]) <= Number(d) && Number(e.timecurrData[1]) >= Number(d));
                        if (e.timeAccumulate) {
                            k = !(e.timecurrData[1] && Number(e.timecurrData[1]) >= Number(d))
                        }
                        if (k) {
                            c = true;
                            b = 0
                        }
                    }
                }
            } else {
                if (e.type == "polygon-category") {
                    var d = "";
                    if (e.animated && e.timeField == "year") {
                        $.each(f, function (m, n) {
                            var o = n.elementid;
                            if (l.getProperties().id == o) {
                                $.each(n.indexdata, function (q, p) {
                                    if (e.timecurrData[0] == p.indexdata) {
                                        d = p.data[e.fieldName]
                                    }
                                })
                            }
                        });
                        var g = 0;
                        $.each(e.timeYearDataBreak, function (m, n) {
                            if (n == d) {
                                g = m
                            }
                        });
                        a = g > 60 ? e.timeYearDataColors[e.timeYearDataColors.length - 1] : e.timeYearDataColors[g]
                    } else {
                        $.each(f, function (m, n) {
                            var o = n.elementid;
                            if (l.getProperties().id == o) {
                                $.each(n.indexdata, function (q, p) {
                                    if (e.labelYear == p.indexdata) {
                                        d = p.data[e.fieldName]
                                    }
                                })
                            }
                        });
                        var g = 0;
                        $.each(e.fieldValues, function (m, n) {
                            if (n == d) {
                                g = m
                            }
                        });
                        a = g > 60 ? e.fieldColors[e.fieldColors.length - 1] : e.fieldColors[g];
                        if (e.animated) {
                            var k = !(Number(e.timecurrData[0]) <= Number(d) && Number(e.timecurrData[1]) >= Number(d));
                            if (e.timeAccumulate) {
                                k = !(e.timecurrData[1] && Number(e.timecurrData[1]) >= Number(d))
                            }
                            if (k) {
                                c = true;
                                b = 0
                            }
                        }
                    }
                }
            }
        }
        return {fillColor: a, opt: b, optflag: c}
    }, clearMap: function () {
        var b = this;
        var c = b.olMap.getLayers().getArray();
        for (var a = c.length - 1; a > 0; a--) {
            b.olMap.removeLayer(c[a])
        }
        b.deleteAllCartongram();
        b.olMap.removeInteraction(b.selectClick);
        b.selectClick.getFeatures().array_ = [];
        b.olMap.addInteraction(b.selectClick);
        b.intensityPointLayer = null;
        b.intensityMoveLayer = null;
        b.currPolygnData = null;
        b.data = null;
        b.currOperData = null;
        b.currLayer = null;
        b.closePopup()
    }, colorFormat: function (b, d) {
        if (!b || b == "") {
            return
        }
        var f = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;
        var e = b.toLowerCase();
        if (e && f.test(e)) {
            if (e.length === 4) {
                var g = "#";
                for (var c = 1; c < 4; c += 1) {
                    g += e.slice(c, c + 1).concat(e.slice(c, c + 1))
                }
                e = g
            }
            var a = [];
            for (var c = 1; c < 7; c += 2) {
                a.push(parseInt("0x" + e.slice(c, c + 2)))
            }
            return "rgba(" + a.join(",") + "," + d + ")"
        } else {
            return "rgba(255,255,255,1)"
        }
    }, getLayer: function (c) {
        var d = this;
        d.currLayer = undefined;
        var g = d.olMap.getLayers().getArray();
        var b = d.currOperData.dataUid;
        var a = d.currOperData.config.type == "marker-heat" ? "heatLayer_" + b : (d.currOperData.config.type == "marker-intensity" ? "intensityLayer_" + b : "layer_" + b);
        var f = d.currOperData.config.type == "marker-intensity" ? "intensityPointLayer_" + b : "";
        var e = d.currOperData.config.type == "marker-intensity" ? "intensityMoveLayer_" + b : "";
        if (g.length > 1) {
            $.each(g, function (h, k) {
                if (!k.get("layerIdName")) {
                    return true
                }
                if (k.get("layerIdName").indexOf(b) != -1) {
                    c ? "" : k.setVisible(false)
                }
                if (k.get("layerIdName") == a) {
                    d.currLayer = k
                }
                if (d.currOperData.config.type == "marker-intensity" && k.get("layerIdName") == f) {
                    d.intensityPointLayer = k
                }
                if (d.currOperData.config.type == "marker-intensity" && k.get("layerIdName") == e) {
                    d.intensityMoveLayer = k
                }
            })
        }
    }, removeLayer: function (b) {
        var c = this;
        var d = c.olMap.getLayers().getArray();
        for (var a = d.length - 1; a > 0; a--) {
            if (d[a].get("layerIdName").indexOf(b) != -1) {
                if (d[a].get("layerIdName").indexOf("intensity") !== -1) {
                    c.intensityPointLayer = null, c.intensityMoveLayer = null
                }
                c.olMap.removeLayer(d[a])
            }
        }
        c.deleteCartogram(b);
        c.olMap.removeInteraction(c.selectClick);
        c.selectClick.getFeatures().array_ = [];
        c.olMap.addInteraction(c.selectClick)
    }, sortLayer: function () {
        var b = this;
        var c = b.olMap.getLayers().getArray();
        var a = $("#data-layer-list>li");
        $.each(a, function (d, e) {
            $.each(c, function (g, f) {
                if (f.get("listId") == $(e).attr("id")) {
                    f.setZIndex(a.length - d)
                }
            })
        })
    }, mapSelectClick: function () {
        var a = this;
        a.selectClick = new ol.interaction.Select({condition: ol.events.condition.click});
        a.olMap.addInteraction(a.selectClick);
        a.selectClick.on("select", function (c) {
            var f = c.mapBrowserEvent.coordinate;
            var d = c.selected[0];
            if (d) {
                var b = d.geometry_ ? d.geometry_.getProperties().name : d.getProperties().name;
                a.content.innerHTML = "<div>名称：" + b + "</div>";
                a.overlayPopup.setPosition(f)
            } else {
                a.selectFeature = null;
                a.closePopup()
            }
        })
    }, mapPopup: function () {
        var a = this;
        a.overlayPopup = new ol.Overlay(({element: a.container, autoPan: true, autoPanAnimation: {duration: 250}}));
        a.closer.onclick = function () {
            a.closePopup()
        }
    }, closePopup: function () {
        var a = this;
        a.overlayPopup.setPosition(undefined);
        a.closer.blur();
        return false
    }, cartogramDataHandler: function () {
        var d = this;
        var b = d.overlayOper();
        var e = d.currOperData.data, c = d.currOperData.config, a = d.currOperData.fields;
        $.each(e, function (f, h) {
            var k = {name: h.title, x: Number(h.lng), y: Number(h.lat), data: [], code: h.elementid};
            var g = [];
            if (c.cartogramDataType == "singleYear") {
                $.each(c.cartogramFields, function (n, m) {
                    var l = {name: m.name, code: m.code, y: 0, yf: c.cartogramYears[0].name};
                    $.each(h.indexdata, function (o, p) {
                        if (p.indexdata == c.cartogramYears[0].code) {
                            l.y = p.data[m.code] ? Number(p.data[m.code]) : 0
                        }
                    });
                    g.push(l)
                })
            } else {
                $.each(c.cartogramYears, function (n, m) {
                    var l = {name: m.name, code: m.code, y: 0, yf: c.cartogramFields[0].name};
                    $.each(h.indexdata, function (o, p) {
                        if (m.code == p.indexdata && p.data[c.cartogramFields[0].code]) {
                            l.y = p.data[c.cartogramFields[0].code] ? Number(p.data[c.cartogramFields[0].code]) : 0
                        }
                    });
                    g.push(l)
                })
            }
            k.data = g;
            b ? d.redrawChart(k) : d.addChartContent(k)
        })
    }, overlayOper: function () {
        var b = this, a = false;
        var d = "highchart" + b.currOperData.dataUid;
        var c = analysisMap.olMap.getOverlays().getArray();
        $.each(c, function (e, g) {
            var f = g.getId();
            if (f == d) {
                a = true;
                return true
            }
        });
        return a
    }, addChartContent: function (g) {
        var d = this;
        var f = [g.x, g.y];
        var c = "chart_" + d.currOperData.dataUid + "_" + g.code, e = "highchart" + d.currOperData.dataUid;
        $("#chart").append('<div id="' + c + '" class="highchartsConDiv" ac="' + e + '"></div>');
        var b = new ol.Overlay({position: f, positioning: "center-center", element: document.getElementById(c), id: e});
        d.olMap.addOverlay(b);
        var a = d.currOperData.config.cartogramBucketField == "" || d.currOperData.config.cartogramType == "bar" ? 100 : d.getBuketWidth(g.code);
        d.addChart(c, g, a)
    }, redrawChart: function (d) {
        var c = this;
        var b = "chart_" + c.currOperData.dataUid + "_" + d.code;
        var a = c.currOperData.config.cartogramBucketField == "" || c.currOperData.config.cartogramType == "bar" ? 100 : c.getBuketWidth(d.code);
        c.addChart(b, d, a)
    }, addChart: function (a, c, k) {
        var g = this;
        console.log(c.data);
        var b = g.currOperData.config, f = g.currOperData.fields;
        var h = b.cartogramType;
        if (h == "pie") {
            $("#" + a).highcharts({
                chart: {
                    type: "pie",
                    backgroundColor: "rgba(255, 255, 255, 0)",
                    plotBorderColor: null,
                    plotBackgroundColor: null,
                    plotBackgroundImage: null,
                    plotBorderWidth: null,
                    plotShadow: false,
                    width: k,
                    height: k
                },
                title: {text: null},
                tooltip: {pointFormat: "{point.yf}<br/>数据:<br/>{point.y}"},
                credits: {enabled: false},
                plotOptions: {pie: {dataLabels: {enabled: false}}},
                series: [{name: c.name, data: c.data}]
            })
        } else {
            if (h == "bar") {
                var d = [], e = [c.data[0].yf];
                $.each(c.data, function (l, m) {
                    d.push({name: m.name, data: [m.y]})
                });
                $("#" + a).highcharts({
                    chart: {
                        type: "column",
                        backgroundColor: "rgba(255, 255, 255, 0)",
                        plotBorderColor: null,
                        plotBackgroundColor: null,
                        plotBackgroundImage: null,
                        plotBorderWidth: null,
                        plotShadow: false,
                        width: k,
                        height: k
                    },
                    title: {text: null},
                    xAxis: {categories: e, title: {text: null}, labels: {enabled: false}, lineWidth: 0, tickWidth: 0},
                    yAxis: {min: 0, title: {text: null}, labels: {enabled: false}, gridLineWidth: 0},
                    legend: {enabled: false},
                    tooltip: {pointFormat: "{series.name}<br/>数据:<br/>{point.y}"},
                    series: d
                })
            }
        }
    }, showCartogram: function () {
        var a = this;
        var c = "highchart" + a.currOperData.dataUid;
        var b = analysisMap.olMap.getOverlays().getArray();
        $.each(b, function (e, g) {
            var f = g.getId();
            if (f == c) {
                var d = g.values_.element.attributes.id.value;
                $("#" + d).show()
            }
        })
    }, hideCartogram: function () {
        var a = this;
        var c = "highchart" + a.currOperData.dataUid;
        var b = analysisMap.olMap.getOverlays().getArray();
        $.each(b, function (e, g) {
            var f = g.getId();
            if (f == c) {
                var d = g.values_.element.attributes.id.value;
                $("#" + d).hide()
            }
        })
    }, deleteCartogram: function (b) {
        var e = this;
        var g = "highchart" + b;
        var f = analysisMap.olMap.getOverlays().getArray();
        for (var a = f.length - 1; a > 0; a--) {
            var d = f[a];
            var c = d.getId();
            if (c && c == g) {
                e.olMap.removeOverlay(d)
            }
        }
    }, deleteAllCartongram: function () {
        var c = this;
        var d = analysisMap.olMap.getOverlays().getArray();
        for (var a = d.length - 1; a > 0; a--) {
            var b = d[a];
            if (b.getId() && b.getId().indexOf("highchart") != -1) {
                c.olMap.removeOverlay(b)
            }
        }
    }, getBuketWidth: function (b) {
        var d = this, a = 100;
        var c = d.currOperData.config, e = d.currOperData.data;
        var f;
        $.each(e, function (g, h) {
            var k = h.elementid;
            if (b == k) {
                $.each(h.indexdata, function (m, l) {
                    if (c.cartogramBucketYear == l.indexdata) {
                        f = l.data[c.cartogramBucketField]
                    }
                })
            }
        });
        if (f == undefined || f == 0 || c.cartogramBucket.length == 0) {
            a = 100
        } else {
            $.each(c.cartogramBucket, function (g, h) {
                if (h.value >= f && g != 0) {
                    a = Number(c.cartogramBucket[g - 1].r) * 2;
                    return false
                }
                if (h.value == f && g == 0) {
                    a = Number(c.cartogramBucket[g].r) * 2;
                    return false
                }
            })
        }
        return a
    },
};